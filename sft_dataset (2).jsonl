{"contents":[
        {
          "role":"user",
          "parts":[
            {
              "fileData":{
                "mimeType":"image/jpeg",
                "fileUri":"https://github.com/yohanesnuwara/sft-finetune-gemini/blob/main/images/RS-112408%20Final%20Report%20Realgrunnen_page-0020.jpg"
              }
            },
            {
              "text":"OCR the following page into complete JSON.

Your task is to parse and extract as many infomation as possible from the page and put into JSON like specified

Never come up with new structures or keys, just fill up in the specified JSON schema.

Page can be either full texts, full table, or texts with table.

1. Identify the type of page:
   - 1.1 If the page consists only of texts:

      Parse sentences into JSON and do not give full sentence or summary

      Example sentence:

      "Two sets of sample (CL01 & CL02) is transferred at 15 deg C and pressure 1 atm" (page A.1)

      JSON response

      {
          "page": "A.1",
          "conditioning": {
              "samples": ["CL01", "CL02"],
              "transfer_temp": 15,
              "transfer_temp_unit": "C",
              "transfer_pressure": 1,
              "transfer_pressure_unit": "atm"
              // ...
          }
      }

      Try to find these parameters inferred from "flash" keyword
      {
        "sep_pressure": ...,
        "sep_pressure_unit": ...,
        "sep_temperature": ...,
        "sep_temperature_unit": ...,
      }



   - 1.2 If the page consists of table of contents
     - Put each table title from the list in key "table_title"
     - Identify the "keyword" in the table title, into these categories
        - If mention composition then "composition"
        - If mention constant composition expansion or constant mass expansion then "CCE"
        - If mention constant volume depletion then "CVD"
        - If mention differential liberation expansion then "DLE"
        - If mention multistage separator then "MSS"
        - If mention viscosity then "VISCO"
     - Identify the "sample_name" from keywords like Cylinder, Sample, Chamber number, or if it is sample pair
     - Identify the "page_number"

    JSON response:

    {
        "page": "....",
        "list_content": [
            {
                "title": "...",
                "keyword": "composition",
                "sample_name": null,
                "page_number": 1
            },
            {
                "title": "...",
                "keyword": "CCE"
                "sample_name": "A01",
                "page_number": 2
            },
            {
                "title": "...",
                "keyword": "CVD",
                "sample_name": "A01+A02",
                "page_number": 3
            }
        ]
    }

   - 1.3 If the page consists of texts with table:
     - 1.3.1 If the page displays "sample inventory" or "sample summary" table:
       - This type of page can be recognized by structure of the table. If the table has Sample ID/name or Bottle no in the y-axis, and properties in the x-axis
       - Properties reported in this summary table such as sampling depth, GOR, density, molecular weight, reservoir temperature, reservoir pressure (Pres), viscosity
       - Do not confuse this table with experiment table
       - Extract data into the "sample_inventory" JSON schema.
       - Extract other relevant information into "Other_information".
       - If you do not find any of the keys, DO NOT create the key
       - Identify title of each table and decide the "type"
            - If mention MDT oil, then "type": "OFT"
            - If mention MDT water, then "type": "WATER"

       Example JSON:
        {
          "page": "...",
          "sample_inventory": {
            "data": [
              {
                "sample_name": "1.01",
                "type": "OFT", # put "OFT" if mention MDT oil, "WATER" if mention MDT water
                "sampling_date": "2023-04-26", # If mention Transfer Date
                "well_id": "23/1", # Well name
                "basin_id": null,
                "sub_basin_id": null,
                "field_id": "Volve", # Field name
                "field_segment_id": null,
                "formation_id": "Realgrunnen", # Formation name
                "formation_zone_id": null,
                "reservoir_pressure": 182.0,
                "reservoir_pressure_unit": "bara",
                "reservoir_temperature": 69.8,
                "reservoir_temperature_unit": "C",
                "true_vertical_depth": 1929.0, # If mention sampling depth m TVDSS (true vertical depth sub sea)
                "true_vertical_depth_unit": "m",
                "measured_depth": 1984.5, # If mention sampling depth m MD (measured depth)
                "measured_depth_unit": "m",
                "pressure_at_lab": 400.0,
                "pressure_at_lab_unit": "bara",
                "temperature_at_lab": 80.0,
                "temperature_at_lab_unit": "C",
                "pressure_when_sampled": 100,
                "pressure_when_sampled_unit": "bara",
                "temperature_when_sampled": 23,
                "temperature_when_sampled_unit": "C",
                "top_perforation_depth": 2000,
                "top_perforation_depth_unit": "m",
                "bottom_perforation_depth": 3000,
                "bottom_perforation_depth_unit": "m",
                "transfer_pressure": 450.0,
                "transfer_pressure_unit": "bara",
                "transfer_temperature": 80.0,
                "transfer_temperature_unit": "C",
                "drawdown_pressure": 100,
                "drawdown_pressure_unit": "bara",
                "flashed_oil_contamination": 2.0, # If mention Mud filtrate contamination in STO
                "flashed_oil_contamination": "mass%", # If the unit mentioned is Wt%
                "fluid_type": "Oil",
                "mud_base": "Oil", # put "Oil" if mention OBM, or "Water" if mention WBM
                //... # Other parameters
              },
              {
                "Sample Type": "REC", # If mention Recombined
                # Same as above
                //...
              }
            ]
          },
          "Other_information": {
            "remarks": "Additional details can be provided here."
          }
        }

   - 1.4 If the page consists of a table:
     - 1.4.1 If the page consists of an Information table or descriptions:
       - Extract physical parameters and values into a structured JSON format.
       - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
         - If found, set "sample_name" accordingly.
         - If not found, set "sample_name" to null.

       Important data:

       - If you find "density of stock tank oil", put into key "flashed_oil_density", then fill "flashed_oil_density_unit"
       - If you see gas oil ratio (GOR), put into key "recombined_fluid_gor", then fill "recombined_fluid_gor_unit

       Getting 'flashed_oil_temperature':
       If you see the following

        ```
        Separation conditions:    From:  80.0 °C and   400 bara
                                  To:    25.5 °C and   atm. pressure
        ```

       In this case, "flashed_oil_temperature": 25.5, "flashed_oil_temperature_unit": "C"
       Pick the number after "To:   " before "and atm.pressure"

       Example JSON:
        {
            "page": "...",
            "sample_name": "...",
            "parameter1": "...",
            "parameter1_unit": "...",
            "parameter2": "...",
            "parameter2_unit": "...",
            "parameter3": "...",
            "parameter4_unit": "...",

            # Important data
            "flashed_oil_density": ...,
            "flashed_oil_density_unit": "...",
            "flashed_oil_temperature": 20.5,
            "flashed_oil_temperature_unit": "C",
            "recombined_fluid_gor": ...,
            "recombined_fluid_gor_unit": "...",
            et cetera ...
        }

     - 1.4.2 If the page contains a Composition table :

        - Dynamically identify each fluid-type group by reading the top header row(s), matching these synonyms:
          - flashed_oil ↔ "Stock tank oil", "Flashed Liquid", "Stock tank oil"
          - flashed_gas ↔ "Stock tank gas", "Flashed gas"
          - recombined_fluid ↔ "Monophasic fluid", "Reservoir fluid"
        - Under each fluid-type header, locate its two sub-columns: one labeled "Mole %" → molar_amount, the other "Weight %" → mass_amount.
        - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
            - If found, set "sample_name" accordingly.
            - Sample name is just like ID consist of letter and number, without C10+ or C36+
            - If not found, set "sample_name" to null.
        - If the table title says "uncorrected" or "corrected", set "uncorrected": true/false.
        - Identify "last_component" from the final row label (e.g. "C36+"), include units on every top-level number, and fill only the keys in the prescribed schema—do not invent new ones.

        IMPORTANT!!!
        - In case there is blank cell in the table (value not reported)
        - If you do not find BOTH molar amount and mass amount of a component, do not extract it into JSON

        Example table with blanks:

      |Component         | Stock tank gas    | Stock tank oil    |  Reservoir fluid   | Mol weight  |
      |Mole%             | Weight% | Mole%   | Weight% | Mole%   |  Mole%   | Weight% |             |
      |Nitrogen          | 0.157   | 0.183   |         |         |  0.084   | 0.024   | 28.02       |
      |Carbon Dioxide    | 6.582   | 12.048  |         |         |  3.509   | 1.555   | 44.01       |
      |Hydrogen Sulphide | 0       | 0       |         |         |  0       | 0       | 34.08       |
      |Methane           | 73.927  | 49.324  | 0.115   | 0.01    |  39.466  | 6.376   | 16.04       |
      |Ethane            | 8.997   | 11.251  | 0.222   | 0.036   |  4.9     | 1.484   | 30.07       |


        Result JSON (referring to the table):

{
    "page": ...,
    "sample_name": "A001", # The name of sample
    "uncorrected": true, # false or null
    "last_component": "C10+",
    "flashed_oil_mw": 151.9, # oil molecular weight or MW
    "flashed_oil_density": 0.777, # oil density at stock-tank condition 15 degC
    "flashed_oil_density_unit": "g/cm3", # g/cm3, kg/m3
    "flashed_oil_temperature": 60.0, # temperature at flash
    "flashed_oil_temperature_unit": "F", # F, C, K, R
    "flashed_oil_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide molar_amount and mass_amount is null, so no need to extract
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 0.115,
                "mass_amount": 0.01
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 0.222,
                "mass_amount": 0.036
            }
        ]
    },
    "flashed_gas_mw": 23.4, # gas molecular weight or MW
    "flashed_gas_specific_gravity": 0.808, # also called relative density or ideal
    "flashed_gas_specific_gravity_unit": "SG", # if unit not mentioned then most likely SG
    "flashed_gas_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide has molar_amount and mass_amount, so extract it
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.157,
                "mass_amount": 0.183
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 6.582,
                "mass_amount": 12.048
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 73.997,
                "mass_amount": 49.324
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 8.997,
                "mass_amount": 11.251
            }
        ]
    },

    # Recombined is sometimes called as Reservoir Fluid or Monophasic
    "recombined_fluid_mw": 30.2, # reservoir fluid MW
    "recombined_fluid_gor": 12200.8, # Gas oil ratio or gas liquid ratio (GLR) or Rs
    "recombined_fluid_gor_unit": "scf/STB", # scf/STB, Sm3/Sm3, Sm3/m3, scf/bbl
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.084,
                "mass_amount": 0.024
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 3.509,
                "mass_amount": 1.555
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 39.466,
                "mass_amount": 6.376
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 4.9,
                "mass_amount": 1.484
            }
        ]
    }
}
     - 1.4.3 If the page contains a Constant Composition Expansion (CCE) or Constant Mass Expansion (CME) table:
       - Identify measurement units for parameters.
       - Always put as "CCE" not "CME"
       - Extract data and structure into the "experiments" JSON key.
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Stages 'order' key must always start from 0
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column name | Key
       --------|-----------
       Relative Volume (column) | relative_total_volume
       Relative Volumes (Vs/Vs,BP) | relative_total_volume
       RLD (column) | relative_oil_volume
       % Liq/Sat (Vliq/Vsat) | relative_oil_volume

       Note: relative_oil_volume always null BEFORE the saturation_pressure=True

       - You must stick to the following units

        Variable | Unit
        --------|-----------
        relative_total_volume_unit | Vtot/Vsat

       Example JSON:


{
    "page" : ...,
    "sample_name": ...,
    "experiments": [
        {
            "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
            "sample_name": 1184,
            "name": "Constant Composition Expansion",
            "type": "CCE",
            "temperature": 106.0,
            "temperature_unit": "C",
            "pressure_unit": "psia",
            "relative_oil_volume_unit": "Vo/Vsat (%)",
            "single_phase_density_unit": "g/cm3",
            "relative_total_volume_unit": "Vtot/Vsat",
            "stages": [
                {
                    "pressure": 9000.0,
                    "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                    "relative_oil_volume": null,
                    "relative_total_volume": 0.79,
                    "single_phase_density": 0.422,
                    "z_factor": 1.407
                },
                // Other stages ...
                {
                    "pressure": 3011.0,
                    "is_saturation_pressure": false,
                    "relative_oil_volume": 14.37,
                    "relative_total_volume": 1.315,
                    "single_phase_density": null,
                    "z_factor": null
                }
            ]
        }
    ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) COMPOSITION:
       - You put the page in this category if you see keywords "Constant Volume Depletion" and chemical component
       - Please Read the WHOLE COLUMNS of TABLE
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true

       - If the columns like this: 2600 psia, 2010 psia, 1000 psia, Residual Oil
          - Put the pressures columns inside Liberated Gas schema
          - Put the Residual Oil column inside Final Stage Oil schema

       - Liberated Gas structure:
          - Put each of the "pressure" inside "stages" key
          - Put ALL the "components" and its "molar_amount" inside each "pressure" which it refers to

        Structure:

{
  "sample_name": null,
  "experiments": [
    {
      "sample_name": null,
      "continued": false,
      "saturation_pressure_type": "Dewpoint",
      "name": "Constant Volume Depletion",
      "type": "CVD",
      "temperature": 106.0,
      "temperature_unit": "C",

      # First type
      "liberated_gas_compositions": {
        "components": [
          {
            "input_name": "CO2",
            "mw": 44.01
          },
          {
            "input_name": "Other",
            "mw": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0
          }
        ],
        "stages": [
          {
            "pressure": 2600,
            "composition": [
              {
                "component_name": "CO2",
                "molar_amount": 0.305
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "C30+",
                "molar_amount": 0.087
              }
            ]
          },
          {
            "pressure": 1300,
            "composition": [
              {
                "component_name": "2M-C6",
                "molar_amount": 0.123
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "Toluene",
                "molar_amount": 0.037
              }
            ]
          }
        ]
      },

       - Residual Oil structure:
          - Put ALL the "components" and its "molar_amount" inside "composition" key
          - Get the "final_stage_oil_mw" from the last row of table if mentioning "MW"

        Structure:

      # Second type
      "final_stage_oil_mw": 100.14,
      "final_stage_oil_density": 630.0,
      "final_stage_oil_density_unit": "kg/m3",
      "stock_tank_oil_density": 630.0,
      "stock_tank_oil_density_unit": "kg/m3",
      "final_stage_oil_composition": {
        "components": [
          {
            "input_name": "CO2",
            "mw": null,
            "molar_amount": 0.213,
            "mass_amount": null
          },
          {
            "input_name": "Other",
            "mw": null,
            "molar_amount": null,
            "mass_amount": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0,
            "molar_amount": 0.553,
            "mass_amount": null
          }
        ]
      }
    }
  ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) PROPERTIES table:
       - You put into this category If you see Pressure as row and Physical Properties as column (No composition)
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column Name | Key
       --------|-----------
       Total Recovery (mole %) | cumulative_moles_removed
       Liq. Density (g/cc) | oil_density

        Example JSON:

      {
          "sample_name": ..., # Put sample ID here
          "experiments": [
              {
                  "sample_name": ...,
                  "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                  "name": "Constant Volume Depletion",
                  "type": "CVD",
                  "temperature": 106.0,
                  "temperature_unit": "C",
                  "pressure_unit": "psia",
                  "oil_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_viscosity_unit": "...", # "cP"
                  "relative_oil_volume_unit": "...", # "%"
                  "incremental_moles_removed_unit": "...", # "%"
                  "cumulative_moles_removed_unit": "...", # "%"

                  # Properties data
                  "stages": [
                      # Fill here if the table displays properties as row and pressure as column, or otherwise
                      {
                          "pressure": 4661.0,
                          "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                          "relative_oil_volume": 0.0,
                          "incremental_moles_removed": null, # "%"
                          "cumulative_moles_removed": 0.0,
                          "oil_density": null,
                          "gas_z_factor": 0.922,
                          "gas_specific_gravity": null,
                          "gas_density": 0.339,
                          "gas_viscosity": 0.042,
                          "gas_plus_fraction_mw": null,
                      },
                      {
                          // Other stages ...
                      }
                      {
                          "pressure": 1300.0,
                          "is_saturation_pressure": false,
                          "relative_oil_volume": 13.18,
                          "incremental_moles_removed": null,
                          "cumulative_moles_removed": 67.06,
                          "oil_density": 0.63,
                          "gas_z_factor": 0.874,
                          "gas_specific_gravity": null,
                          "gas_density": 0.075,
                          "gas_viscosity": 0.015,
                          "gas_plus_fraction_mw": null,
                      }
                  ]
              }
          ]
      }

     - 1.4.5 If the page contains a Multi-Stage Separator (MSS) or Three Stage Separator table:
       - If you see "Two Stage", "Three Stage", "Four Stage" Separator, it is MSS. But, "Single Stage" is NOT MSS
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Stock tank oil data: If the title mention stock tank or tank oil
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If you see "Pressure Atm. bara", it means "pressure": 1 (atmospheric pressure means 1 bara)
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON

        Exception:
       - If you find page with title "Bo and GOR from Three Stage Separator test during depletion using the results from Differential Liberation ...", DO NOT extract the data.

        Example JSON:
{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                    "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                    "name": "Multi-stage Separator",
                    "type": "MSS",
                    "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "Dodecanes Plus",
                            "mw": null
                        }
                    ],
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.7579
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0024
                                }
                            ]
                        },
                        {
                            "stage_number": 1,
                            "composition": [
                                {
                                    "stage_number": 1,
                                    "component_name": "C1",
                                    "molar_amount": 0.6791
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 1,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0022
                                }
                            ]
                        },
                        {
                            "stage_number": 2,
                            "composition": [
                                {
                                    "stage_number": 2,
                                    "component_name": "C1",
                                    "molar_amount": 0.1999
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 2,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.019
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Stock tank oil
                "stock_tank_oil_molecular_weight": 145.78,
                "stock_tank_oil_density": 0.7843,
                "stock_tank_oil_density_unit": "g/cm3",
                "stock_tank_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.013,
                            "mass_amount": 0.0107
                        }
                    ]
                },
                "pressure_unit": "psia",
                "temperature_unit": "F",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",

                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 3724.0,
                        "is_saturation_pressure": true,
                        "temperature": 230.0,
                        "gor": 1802.83,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.1783,
                        "oil_density": 0.5016,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "temperature": 60.0,
                        "gor": 0.0,
                        "liberated_gas": 1802.83,
                        "oil_fvf": 1.0,
                        "oil_density": 0.7843,
                        "gas_z_factor": 0.9892,
                        "gas_specific_gravity": 1.316,
                        "gas_density": null,
                        "gas_viscosity": null
                    }
                ]
            }
    ]
}


     - 1.4.6 If the page contains a Differential Liberation (DLE) or Differential Vaporization (DV) table:
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Residual oil data: If mention residual oil or final stage
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity
       gas-oil ratio solution** | gor

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON
       ** in "Gas-Oil Ratio" column if you find "solution" and "liberated", take the "solution" and put to "gor" key in JSON

        Example JSON:

{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                "name": "Differential Liberation Expansion",
                "type": "DLE",
                "temperature": 229.7,
                "temperature_unit": "F",
                "dle_experiment_type": "Standard DLE Experiment",

                # // First part, Liberated gas
                "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "N2",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "C7+",
                            "mw": 114.01
                        }
                    ],
                    # Fill here if the table displays component as row and pressure as column, or otherwise
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.6859 # Composition in mole percent
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0085
                                }
                            ]
                        },
                        {
                            // Other stages ...
                        },
                        {
                            "stage_number": 9,
                            "composition": [
                                {
                                    "stage_number": 9,
                                    "component_name": "C1",
                                    "molar_amount": 0.1309
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 9,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0629
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Residual oil
                "evolved_gas_specific_gravity": null,
                "evolved_gas_composition_id": null,
                "evolved_gas_composition": null,
                "average_residual_oil_mw": 179.43,
                "average_residual_oil_density": 0.8128,
                "average_residual_oil_density_unit": "g/cm3",
                "residual_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.019,
                            "mass_amount": 0.0127
                        }
                    ]
                },
                "pressure_unit": "psia",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",
                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 8513.0,
                        "is_saturation_pressure": true,
                        "gor": 2847.67,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.5407,
                        "oil_density": 0.5714,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "gor": 0.0,
                        "liberated_gas": 2847.67,
                        "oil_fvf": 1.0975,
                        "oil_density": 0.7471,
                        "gas_z_factor": 0.9887,
                        "gas_specific_gravity": 2.1686,
                        "gas_density": null,
                        "gas_viscosity": 0.00925
                    }
                ]
            }
    ]
}

     - 1.4.7 If the page contains a Viscosity experiment (VISCO) table:
       - Identify measurement units for parameters.
       - Viscosity table has pressure as y-axis and viscosities as x-axis
       - Extract viscosity data and structure into "experiments".
       - Never come up with new structures or keys, just fill up in the specified JSON schema.

        Example JSON:

{
    "page": ...,
    "sample_name": ...,
    "experiments": [
        {
            "name": "Oil Viscosity",
            "type": "VISCO",
            "temperature": 229.7,
            "temperature_unit": "F",
            "pressure_unit": "psia",
            "oil_viscosity_unit": "cP",
            "gas_viscosity_unit": "cP",
            "stages": [
                {
                    "visco_id": 1018,
                    "pressure": 5413.0,
                    "oil_viscosity": 0.088,
                    "gas_viscosity": null
                },
                {
                    // Other stages ...
                },
                {
                    "visco_id": 1018,
                    "pressure": 13.0,
                    "oil_viscosity": 0.749,
                    "gas_viscosity": 0.00925
                }
            ]
        }
    ]
}

2. If any summary data or descriptive information is found:
   - Include it as key "Other_information", outside the "experiments" key in JSON.

   Example JSON:
   {
       "solution_gas_oil_ratio": 100,
       "separator_volume_factor": 300,
       "solution_gas_oil_ratio_unit": "scf/stb",
       "separator_volume_factor_unit": "bbl",
       ......
   }

3. Finally, you must stick to the following units

Unit shown | Unit in JSON
--------|-----------
g/cc | g/cm3
mole% | %
Vol/Vol | Sm3/Sm3
scf/sep bbl | scf/bbl
kg/Sm3 | kg/m3
psi | psia
Air=1 | SG

4. If you find Figure in the page, DO NOT extract any data from it. Just extract the title into json.

  {
    "figure_title": "Plot of dewpoint pressure"
  }

5. Dealing with Paraffinic-Naphtenes-Aromatics (PNA) composition

In some cases, PNA can be reported in compositional table, DLE liberated gas, or MSS liberated gas.

For example:

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| n-Hexane          | 0.086   | 0.351     | 86.2  |
| iso-Paraffins     | 0.154   | 0.627     | 86.2  |
| Naphthenes        | 0.033   | 0.109     | 70.1  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |
| n-Heptane         | 0.014   | 0.067     | 100.2 |
| iso-Paraffins     | 0.038   | 0.181     | 100.2 |
| Naphthenes        | 0.116   | 0.476     | 86.6  |
| Aromatics         | 0.030   | 0.112     | 78.1  |

You see for every C6 total and C7 total, there are iso-Paraffins (P), Naphthenes (N), and Aromatics (A).

Remove these PNA, so you just have C6 total and C7 total.

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |

From here, you just extract into corresponding JSON schema as defined in instructions 1 until 4
"
            }
          ]
        },
        {
          "role":"model",
          "parts":[
            {
              "text":"{
    "page": "20 of 95",
    "sample_name": "SR-02623",
    "sampling_depth": 1726.04,
    "sampling_depth_unit": "m MD",
    "sep_temperature": 70.0,
    "sep_temperature_unit": "C",
    "sep_pressure": 300.0,
    "sep_pressure_unit": "bara",
    "flashed_oil_temperature": 19.7,
    "flashed_oil_temperature_unit": "C",
    "flashed_oil_pressure": 1.0,
    "flashed_oil_pressure_unit": "atm",
    "recombined_fluid_gor": 122.1,
    "recombined_fluid_gor_unit": "Sm3/Sm3",
    "flashed_oil_density": 837.9,
    "flashed_oil_density_unit": "kg/m3",
    "flashed_gas_specific_gravity": 0.83,
    "flashed_gas_specific_gravity_unit": "SG",
    "flashed_oil_mw": 185.2,
    "flashed_oil_mw_unit": "g/mol",
    "flashed_oil_c7_plus_mw": 199.0,
    "flashed_oil_c7_plus_mw_unit": "g/mol",
    "flashed_oil_c7_plus_density": 851.0,
    "flashed_oil_c7_plus_density_unit": "kg/m3",
    "flashed_oil_c10_plus_mw": 251.0,
    "flashed_oil_c10_plus_mw_unit": "g/mol",
    "flashed_oil_c10_plus_density": 871.0,
    "flashed_oil_c10_plus_density_unit": "kg/m3",
    "standard_gas_temperature": 15.0,
    "standard_gas_temperature_unit": "C",
    "standard_gas_pressure": 1.01325,
    "standard_gas_pressure_unit": "bara",
    "standard_oil_temperature": 15.0,
    "standard_oil_temperature_unit": "C",
    "standard_oil_pressure": 1.0,
    "standard_oil_pressure_unit": "atm",
    "Other_information": {
        "notes": [
            "m\u00b3 gas at standard conditions per Sm\u00b3 stock tank oil",
            "Stock tank oil"
        ]
    }
}"
            }
          ]
        }
    ]}
{"contents":[
        {
          "role":"user",
          "parts":[
            {
              "fileData":{
                "mimeType":"image/jpeg",
                "fileUri":"https://github.com/yohanesnuwara/sft-finetune-gemini/blob/main/images/RS-112408%20Final%20Report%20Realgrunnen_page-0023.jpg"
              }
            },
            {
              "text":"OCR the following page into complete JSON.

Your task is to parse and extract as many infomation as possible from the page and put into JSON like specified

Never come up with new structures or keys, just fill up in the specified JSON schema.

Page can be either full texts, full table, or texts with table.

1. Identify the type of page:
   - 1.1 If the page consists only of texts:

      Parse sentences into JSON and do not give full sentence or summary

      Example sentence:

      "Two sets of sample (CL01 & CL02) is transferred at 15 deg C and pressure 1 atm" (page A.1)

      JSON response

      {
          "page": "A.1",
          "conditioning": {
              "samples": ["CL01", "CL02"],
              "transfer_temp": 15,
              "transfer_temp_unit": "C",
              "transfer_pressure": 1,
              "transfer_pressure_unit": "atm"
              // ...
          }
      }

      Try to find these parameters inferred from "flash" keyword
      {
        "sep_pressure": ...,
        "sep_pressure_unit": ...,
        "sep_temperature": ...,
        "sep_temperature_unit": ...,
      }



   - 1.2 If the page consists of table of contents
     - Put each table title from the list in key "table_title"
     - Identify the "keyword" in the table title, into these categories
        - If mention composition then "composition"
        - If mention constant composition expansion or constant mass expansion then "CCE"
        - If mention constant volume depletion then "CVD"
        - If mention differential liberation expansion then "DLE"
        - If mention multistage separator then "MSS"
        - If mention viscosity then "VISCO"
     - Identify the "sample_name" from keywords like Cylinder, Sample, Chamber number, or if it is sample pair
     - Identify the "page_number"

    JSON response:

    {
        "page": "....",
        "list_content": [
            {
                "title": "...",
                "keyword": "composition",
                "sample_name": null,
                "page_number": 1
            },
            {
                "title": "...",
                "keyword": "CCE"
                "sample_name": "A01",
                "page_number": 2
            },
            {
                "title": "...",
                "keyword": "CVD",
                "sample_name": "A01+A02",
                "page_number": 3
            }
        ]
    }

   - 1.3 If the page consists of texts with table:
     - 1.3.1 If the page displays "sample inventory" or "sample summary" table:
       - This type of page can be recognized by structure of the table. If the table has Sample ID/name or Bottle no in the y-axis, and properties in the x-axis
       - Properties reported in this summary table such as sampling depth, GOR, density, molecular weight, reservoir temperature, reservoir pressure (Pres), viscosity
       - Do not confuse this table with experiment table
       - Extract data into the "sample_inventory" JSON schema.
       - Extract other relevant information into "Other_information".
       - If you do not find any of the keys, DO NOT create the key
       - Identify title of each table and decide the "type"
            - If mention MDT oil, then "type": "OFT"
            - If mention MDT water, then "type": "WATER"

       Example JSON:
        {
          "page": "...",
          "sample_inventory": {
            "data": [
              {
                "sample_name": "1.01",
                "type": "OFT", # put "OFT" if mention MDT oil, "WATER" if mention MDT water
                "sampling_date": "2023-04-26", # If mention Transfer Date
                "well_id": "23/1", # Well name
                "basin_id": null,
                "sub_basin_id": null,
                "field_id": "Volve", # Field name
                "field_segment_id": null,
                "formation_id": "Realgrunnen", # Formation name
                "formation_zone_id": null,
                "reservoir_pressure": 182.0,
                "reservoir_pressure_unit": "bara",
                "reservoir_temperature": 69.8,
                "reservoir_temperature_unit": "C",
                "true_vertical_depth": 1929.0, # If mention sampling depth m TVDSS (true vertical depth sub sea)
                "true_vertical_depth_unit": "m",
                "measured_depth": 1984.5, # If mention sampling depth m MD (measured depth)
                "measured_depth_unit": "m",
                "pressure_at_lab": 400.0,
                "pressure_at_lab_unit": "bara",
                "temperature_at_lab": 80.0,
                "temperature_at_lab_unit": "C",
                "pressure_when_sampled": 100,
                "pressure_when_sampled_unit": "bara",
                "temperature_when_sampled": 23,
                "temperature_when_sampled_unit": "C",
                "top_perforation_depth": 2000,
                "top_perforation_depth_unit": "m",
                "bottom_perforation_depth": 3000,
                "bottom_perforation_depth_unit": "m",
                "transfer_pressure": 450.0,
                "transfer_pressure_unit": "bara",
                "transfer_temperature": 80.0,
                "transfer_temperature_unit": "C",
                "drawdown_pressure": 100,
                "drawdown_pressure_unit": "bara",
                "flashed_oil_contamination": 2.0, # If mention Mud filtrate contamination in STO
                "flashed_oil_contamination": "mass%", # If the unit mentioned is Wt%
                "fluid_type": "Oil",
                "mud_base": "Oil", # put "Oil" if mention OBM, or "Water" if mention WBM
                //... # Other parameters
              },
              {
                "Sample Type": "REC", # If mention Recombined
                # Same as above
                //...
              }
            ]
          },
          "Other_information": {
            "remarks": "Additional details can be provided here."
          }
        }

   - 1.4 If the page consists of a table:
     - 1.4.1 If the page consists of an Information table or descriptions:
       - Extract physical parameters and values into a structured JSON format.
       - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
         - If found, set "sample_name" accordingly.
         - If not found, set "sample_name" to null.

       Important data:

       - If you find "density of stock tank oil", put into key "flashed_oil_density", then fill "flashed_oil_density_unit"
       - If you see gas oil ratio (GOR), put into key "recombined_fluid_gor", then fill "recombined_fluid_gor_unit

       Getting 'flashed_oil_temperature':
       If you see the following

        ```
        Separation conditions:    From:  80.0 °C and   400 bara
                                  To:    25.5 °C and   atm. pressure
        ```

       In this case, "flashed_oil_temperature": 25.5, "flashed_oil_temperature_unit": "C"
       Pick the number after "To:   " before "and atm.pressure"

       Example JSON:
        {
            "page": "...",
            "sample_name": "...",
            "parameter1": "...",
            "parameter1_unit": "...",
            "parameter2": "...",
            "parameter2_unit": "...",
            "parameter3": "...",
            "parameter4_unit": "...",

            # Important data
            "flashed_oil_density": ...,
            "flashed_oil_density_unit": "...",
            "flashed_oil_temperature": 20.5,
            "flashed_oil_temperature_unit": "C",
            "recombined_fluid_gor": ...,
            "recombined_fluid_gor_unit": "...",
            et cetera ...
        }

     - 1.4.2 If the page contains a Composition table :

        - Dynamically identify each fluid-type group by reading the top header row(s), matching these synonyms:
          - flashed_oil ↔ "Stock tank oil", "Flashed Liquid", "Stock tank oil"
          - flashed_gas ↔ "Stock tank gas", "Flashed gas"
          - recombined_fluid ↔ "Monophasic fluid", "Reservoir fluid"
        - Under each fluid-type header, locate its two sub-columns: one labeled "Mole %" → molar_amount, the other "Weight %" → mass_amount.
        - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
            - If found, set "sample_name" accordingly.
            - Sample name is just like ID consist of letter and number, without C10+ or C36+
            - If not found, set "sample_name" to null.
        - If the table title says "uncorrected" or "corrected", set "uncorrected": true/false.
        - Identify "last_component" from the final row label (e.g. "C36+"), include units on every top-level number, and fill only the keys in the prescribed schema—do not invent new ones.

        IMPORTANT!!!
        - In case there is blank cell in the table (value not reported)
        - If you do not find BOTH molar amount and mass amount of a component, do not extract it into JSON

        Example table with blanks:

      |Component         | Stock tank gas    | Stock tank oil    |  Reservoir fluid   | Mol weight  |
      |Mole%             | Weight% | Mole%   | Weight% | Mole%   |  Mole%   | Weight% |             |
      |Nitrogen          | 0.157   | 0.183   |         |         |  0.084   | 0.024   | 28.02       |
      |Carbon Dioxide    | 6.582   | 12.048  |         |         |  3.509   | 1.555   | 44.01       |
      |Hydrogen Sulphide | 0       | 0       |         |         |  0       | 0       | 34.08       |
      |Methane           | 73.927  | 49.324  | 0.115   | 0.01    |  39.466  | 6.376   | 16.04       |
      |Ethane            | 8.997   | 11.251  | 0.222   | 0.036   |  4.9     | 1.484   | 30.07       |


        Result JSON (referring to the table):

{
    "page": ...,
    "sample_name": "A001", # The name of sample
    "uncorrected": true, # false or null
    "last_component": "C10+",
    "flashed_oil_mw": 151.9, # oil molecular weight or MW
    "flashed_oil_density": 0.777, # oil density at stock-tank condition 15 degC
    "flashed_oil_density_unit": "g/cm3", # g/cm3, kg/m3
    "flashed_oil_temperature": 60.0, # temperature at flash
    "flashed_oil_temperature_unit": "F", # F, C, K, R
    "flashed_oil_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide molar_amount and mass_amount is null, so no need to extract
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 0.115,
                "mass_amount": 0.01
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 0.222,
                "mass_amount": 0.036
            }
        ]
    },
    "flashed_gas_mw": 23.4, # gas molecular weight or MW
    "flashed_gas_specific_gravity": 0.808, # also called relative density or ideal
    "flashed_gas_specific_gravity_unit": "SG", # if unit not mentioned then most likely SG
    "flashed_gas_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide has molar_amount and mass_amount, so extract it
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.157,
                "mass_amount": 0.183
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 6.582,
                "mass_amount": 12.048
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 73.997,
                "mass_amount": 49.324
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 8.997,
                "mass_amount": 11.251
            }
        ]
    },

    # Recombined is sometimes called as Reservoir Fluid or Monophasic
    "recombined_fluid_mw": 30.2, # reservoir fluid MW
    "recombined_fluid_gor": 12200.8, # Gas oil ratio or gas liquid ratio (GLR) or Rs
    "recombined_fluid_gor_unit": "scf/STB", # scf/STB, Sm3/Sm3, Sm3/m3, scf/bbl
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.084,
                "mass_amount": 0.024
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 3.509,
                "mass_amount": 1.555
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 39.466,
                "mass_amount": 6.376
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 4.9,
                "mass_amount": 1.484
            }
        ]
    }
}
     - 1.4.3 If the page contains a Constant Composition Expansion (CCE) or Constant Mass Expansion (CME) table:
       - Identify measurement units for parameters.
       - Always put as "CCE" not "CME"
       - Extract data and structure into the "experiments" JSON key.
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Stages 'order' key must always start from 0
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column name | Key
       --------|-----------
       Relative Volume (column) | relative_total_volume
       Relative Volumes (Vs/Vs,BP) | relative_total_volume
       RLD (column) | relative_oil_volume
       % Liq/Sat (Vliq/Vsat) | relative_oil_volume

       Note: relative_oil_volume always null BEFORE the saturation_pressure=True

       - You must stick to the following units

        Variable | Unit
        --------|-----------
        relative_total_volume_unit | Vtot/Vsat

       Example JSON:


{
    "page" : ...,
    "sample_name": ...,
    "experiments": [
        {
            "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
            "sample_name": 1184,
            "name": "Constant Composition Expansion",
            "type": "CCE",
            "temperature": 106.0,
            "temperature_unit": "C",
            "pressure_unit": "psia",
            "relative_oil_volume_unit": "Vo/Vsat (%)",
            "single_phase_density_unit": "g/cm3",
            "relative_total_volume_unit": "Vtot/Vsat",
            "stages": [
                {
                    "pressure": 9000.0,
                    "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                    "relative_oil_volume": null,
                    "relative_total_volume": 0.79,
                    "single_phase_density": 0.422,
                    "z_factor": 1.407
                },
                // Other stages ...
                {
                    "pressure": 3011.0,
                    "is_saturation_pressure": false,
                    "relative_oil_volume": 14.37,
                    "relative_total_volume": 1.315,
                    "single_phase_density": null,
                    "z_factor": null
                }
            ]
        }
    ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) COMPOSITION:
       - You put the page in this category if you see keywords "Constant Volume Depletion" and chemical component
       - Please Read the WHOLE COLUMNS of TABLE
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true

       - If the columns like this: 2600 psia, 2010 psia, 1000 psia, Residual Oil
          - Put the pressures columns inside Liberated Gas schema
          - Put the Residual Oil column inside Final Stage Oil schema

       - Liberated Gas structure:
          - Put each of the "pressure" inside "stages" key
          - Put ALL the "components" and its "molar_amount" inside each "pressure" which it refers to

        Structure:

{
  "sample_name": null,
  "experiments": [
    {
      "sample_name": null,
      "continued": false,
      "saturation_pressure_type": "Dewpoint",
      "name": "Constant Volume Depletion",
      "type": "CVD",
      "temperature": 106.0,
      "temperature_unit": "C",

      # First type
      "liberated_gas_compositions": {
        "components": [
          {
            "input_name": "CO2",
            "mw": 44.01
          },
          {
            "input_name": "Other",
            "mw": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0
          }
        ],
        "stages": [
          {
            "pressure": 2600,
            "composition": [
              {
                "component_name": "CO2",
                "molar_amount": 0.305
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "C30+",
                "molar_amount": 0.087
              }
            ]
          },
          {
            "pressure": 1300,
            "composition": [
              {
                "component_name": "2M-C6",
                "molar_amount": 0.123
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "Toluene",
                "molar_amount": 0.037
              }
            ]
          }
        ]
      },

       - Residual Oil structure:
          - Put ALL the "components" and its "molar_amount" inside "composition" key
          - Get the "final_stage_oil_mw" from the last row of table if mentioning "MW"

        Structure:

      # Second type
      "final_stage_oil_mw": 100.14,
      "final_stage_oil_density": 630.0,
      "final_stage_oil_density_unit": "kg/m3",
      "stock_tank_oil_density": 630.0,
      "stock_tank_oil_density_unit": "kg/m3",
      "final_stage_oil_composition": {
        "components": [
          {
            "input_name": "CO2",
            "mw": null,
            "molar_amount": 0.213,
            "mass_amount": null
          },
          {
            "input_name": "Other",
            "mw": null,
            "molar_amount": null,
            "mass_amount": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0,
            "molar_amount": 0.553,
            "mass_amount": null
          }
        ]
      }
    }
  ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) PROPERTIES table:
       - You put into this category If you see Pressure as row and Physical Properties as column (No composition)
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column Name | Key
       --------|-----------
       Total Recovery (mole %) | cumulative_moles_removed
       Liq. Density (g/cc) | oil_density

        Example JSON:

      {
          "sample_name": ..., # Put sample ID here
          "experiments": [
              {
                  "sample_name": ...,
                  "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                  "name": "Constant Volume Depletion",
                  "type": "CVD",
                  "temperature": 106.0,
                  "temperature_unit": "C",
                  "pressure_unit": "psia",
                  "oil_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_viscosity_unit": "...", # "cP"
                  "relative_oil_volume_unit": "...", # "%"
                  "incremental_moles_removed_unit": "...", # "%"
                  "cumulative_moles_removed_unit": "...", # "%"

                  # Properties data
                  "stages": [
                      # Fill here if the table displays properties as row and pressure as column, or otherwise
                      {
                          "pressure": 4661.0,
                          "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                          "relative_oil_volume": 0.0,
                          "incremental_moles_removed": null, # "%"
                          "cumulative_moles_removed": 0.0,
                          "oil_density": null,
                          "gas_z_factor": 0.922,
                          "gas_specific_gravity": null,
                          "gas_density": 0.339,
                          "gas_viscosity": 0.042,
                          "gas_plus_fraction_mw": null,
                      },
                      {
                          // Other stages ...
                      }
                      {
                          "pressure": 1300.0,
                          "is_saturation_pressure": false,
                          "relative_oil_volume": 13.18,
                          "incremental_moles_removed": null,
                          "cumulative_moles_removed": 67.06,
                          "oil_density": 0.63,
                          "gas_z_factor": 0.874,
                          "gas_specific_gravity": null,
                          "gas_density": 0.075,
                          "gas_viscosity": 0.015,
                          "gas_plus_fraction_mw": null,
                      }
                  ]
              }
          ]
      }

     - 1.4.5 If the page contains a Multi-Stage Separator (MSS) or Three Stage Separator table:
       - If you see "Two Stage", "Three Stage", "Four Stage" Separator, it is MSS. But, "Single Stage" is NOT MSS
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Stock tank oil data: If the title mention stock tank or tank oil
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If you see "Pressure Atm. bara", it means "pressure": 1 (atmospheric pressure means 1 bara)
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON

        Exception:
       - If you find page with title "Bo and GOR from Three Stage Separator test during depletion using the results from Differential Liberation ...", DO NOT extract the data.

        Example JSON:
{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                    "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                    "name": "Multi-stage Separator",
                    "type": "MSS",
                    "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "Dodecanes Plus",
                            "mw": null
                        }
                    ],
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.7579
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0024
                                }
                            ]
                        },
                        {
                            "stage_number": 1,
                            "composition": [
                                {
                                    "stage_number": 1,
                                    "component_name": "C1",
                                    "molar_amount": 0.6791
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 1,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0022
                                }
                            ]
                        },
                        {
                            "stage_number": 2,
                            "composition": [
                                {
                                    "stage_number": 2,
                                    "component_name": "C1",
                                    "molar_amount": 0.1999
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 2,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.019
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Stock tank oil
                "stock_tank_oil_molecular_weight": 145.78,
                "stock_tank_oil_density": 0.7843,
                "stock_tank_oil_density_unit": "g/cm3",
                "stock_tank_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.013,
                            "mass_amount": 0.0107
                        }
                    ]
                },
                "pressure_unit": "psia",
                "temperature_unit": "F",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",

                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 3724.0,
                        "is_saturation_pressure": true,
                        "temperature": 230.0,
                        "gor": 1802.83,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.1783,
                        "oil_density": 0.5016,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "temperature": 60.0,
                        "gor": 0.0,
                        "liberated_gas": 1802.83,
                        "oil_fvf": 1.0,
                        "oil_density": 0.7843,
                        "gas_z_factor": 0.9892,
                        "gas_specific_gravity": 1.316,
                        "gas_density": null,
                        "gas_viscosity": null
                    }
                ]
            }
    ]
}


     - 1.4.6 If the page contains a Differential Liberation (DLE) or Differential Vaporization (DV) table:
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Residual oil data: If mention residual oil or final stage
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity
       gas-oil ratio solution** | gor

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON
       ** in "Gas-Oil Ratio" column if you find "solution" and "liberated", take the "solution" and put to "gor" key in JSON

        Example JSON:

{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                "name": "Differential Liberation Expansion",
                "type": "DLE",
                "temperature": 229.7,
                "temperature_unit": "F",
                "dle_experiment_type": "Standard DLE Experiment",

                # // First part, Liberated gas
                "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "N2",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "C7+",
                            "mw": 114.01
                        }
                    ],
                    # Fill here if the table displays component as row and pressure as column, or otherwise
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.6859 # Composition in mole percent
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0085
                                }
                            ]
                        },
                        {
                            // Other stages ...
                        },
                        {
                            "stage_number": 9,
                            "composition": [
                                {
                                    "stage_number": 9,
                                    "component_name": "C1",
                                    "molar_amount": 0.1309
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 9,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0629
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Residual oil
                "evolved_gas_specific_gravity": null,
                "evolved_gas_composition_id": null,
                "evolved_gas_composition": null,
                "average_residual_oil_mw": 179.43,
                "average_residual_oil_density": 0.8128,
                "average_residual_oil_density_unit": "g/cm3",
                "residual_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.019,
                            "mass_amount": 0.0127
                        }
                    ]
                },
                "pressure_unit": "psia",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",
                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 8513.0,
                        "is_saturation_pressure": true,
                        "gor": 2847.67,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.5407,
                        "oil_density": 0.5714,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "gor": 0.0,
                        "liberated_gas": 2847.67,
                        "oil_fvf": 1.0975,
                        "oil_density": 0.7471,
                        "gas_z_factor": 0.9887,
                        "gas_specific_gravity": 2.1686,
                        "gas_density": null,
                        "gas_viscosity": 0.00925
                    }
                ]
            }
    ]
}

     - 1.4.7 If the page contains a Viscosity experiment (VISCO) table:
       - Identify measurement units for parameters.
       - Viscosity table has pressure as y-axis and viscosities as x-axis
       - Extract viscosity data and structure into "experiments".
       - Never come up with new structures or keys, just fill up in the specified JSON schema.

        Example JSON:

{
    "page": ...,
    "sample_name": ...,
    "experiments": [
        {
            "name": "Oil Viscosity",
            "type": "VISCO",
            "temperature": 229.7,
            "temperature_unit": "F",
            "pressure_unit": "psia",
            "oil_viscosity_unit": "cP",
            "gas_viscosity_unit": "cP",
            "stages": [
                {
                    "visco_id": 1018,
                    "pressure": 5413.0,
                    "oil_viscosity": 0.088,
                    "gas_viscosity": null
                },
                {
                    // Other stages ...
                },
                {
                    "visco_id": 1018,
                    "pressure": 13.0,
                    "oil_viscosity": 0.749,
                    "gas_viscosity": 0.00925
                }
            ]
        }
    ]
}

2. If any summary data or descriptive information is found:
   - Include it as key "Other_information", outside the "experiments" key in JSON.

   Example JSON:
   {
       "solution_gas_oil_ratio": 100,
       "separator_volume_factor": 300,
       "solution_gas_oil_ratio_unit": "scf/stb",
       "separator_volume_factor_unit": "bbl",
       ......
   }

3. Finally, you must stick to the following units

Unit shown | Unit in JSON
--------|-----------
g/cc | g/cm3
mole% | %
Vol/Vol | Sm3/Sm3
scf/sep bbl | scf/bbl
kg/Sm3 | kg/m3
psi | psia
Air=1 | SG

4. If you find Figure in the page, DO NOT extract any data from it. Just extract the title into json.

  {
    "figure_title": "Plot of dewpoint pressure"
  }

5. Dealing with Paraffinic-Naphtenes-Aromatics (PNA) composition

In some cases, PNA can be reported in compositional table, DLE liberated gas, or MSS liberated gas.

For example:

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| n-Hexane          | 0.086   | 0.351     | 86.2  |
| iso-Paraffins     | 0.154   | 0.627     | 86.2  |
| Naphthenes        | 0.033   | 0.109     | 70.1  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |
| n-Heptane         | 0.014   | 0.067     | 100.2 |
| iso-Paraffins     | 0.038   | 0.181     | 100.2 |
| Naphthenes        | 0.116   | 0.476     | 86.6  |
| Aromatics         | 0.030   | 0.112     | 78.1  |

You see for every C6 total and C7 total, there are iso-Paraffins (P), Naphthenes (N), and Aromatics (A).

Remove these PNA, so you just have C6 total and C7 total.

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |

From here, you just extract into corresponding JSON schema as defined in instructions 1 until 4
"
            }
          ]
        },
        {
          "role":"model",
          "parts":[
            {
              "text":"{
    "page": "23 of 95",
    "sample_name": "SR-02623",
    "uncorrected": true,
    "last_component": "C36+",
    "flashed_oil_mw": 185.2,
    "flashed_oil_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 0.115,
                "mass_amount": 0.01
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 0.222,
                "mass_amount": 0.036
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 0.277,
                "mass_amount": 0.066
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 0.599,
                "mass_amount": 0.188
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 0.653,
                "mass_amount": 0.205
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.015,
                "mass_amount": 0.006
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 2.347,
                "mass_amount": 0.914
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 1.494,
                "mass_amount": 0.582
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 5.485,
                "mass_amount": 2.508
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 10.635,
                "mass_amount": 5.203
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 12.386,
                "mass_amount": 6.91
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 8.045,
                "mass_amount": 5.11
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 6.44,
                "mass_amount": 4.659
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 5.048,
                "mass_amount": 4.006
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 4.494,
                "mass_amount": 3.906
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 4.903,
                "mass_amount": 4.632
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 4.244,
                "mass_amount": 4.353
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 4.163,
                "mass_amount": 4.63
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 3.326,
                "mass_amount": 3.986
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 2.928,
                "mass_amount": 3.747
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 2.714,
                "mass_amount": 3.678
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 2.328,
                "mass_amount": 3.306
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 1.738,
                "mass_amount": 2.581
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 1.533,
                "mass_amount": 2.409
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 1.342,
                "mass_amount": 2.174
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 1.167,
                "mass_amount": 1.965
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 1.032,
                "mass_amount": 1.806
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 0.891,
                "mass_amount": 1.621
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 0.836,
                "mass_amount": 1.575
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 0.747,
                "mass_amount": 1.452
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 0.682,
                "mass_amount": 1.369
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 0.639,
                "mass_amount": 1.317
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 0.593,
                "mass_amount": 1.261
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 0.526,
                "mass_amount": 1.148
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 0.464,
                "mass_amount": 1.04
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 0.414,
                "mass_amount": 0.952
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 0.367,
                "mass_amount": 0.867
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 0.35,
                "mass_amount": 0.842
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 3.816,
                "mass_amount": 12.98
            }
        ]
    },
    "flashed_gas_mw": 24.04,
    "flashed_gas_specific_gravity": 0.83,
    "flashed_gas_specific_gravity_unit": "SG",
    "flashed_gas_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": 0.157,
                "mass_amount": 0.183
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": 6.582,
                "mass_amount": 12.048
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 73.927,
                "mass_amount": 49.324
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 8.997,
                "mass_amount": 11.251
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 2.63,
                "mass_amount": 4.824
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 2.145,
                "mass_amount": 5.185
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 1.405,
                "mass_amount": 3.397
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.033,
                "mass_amount": 0.098
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 1.544,
                "mass_amount": 4.632
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 0.756,
                "mass_amount": 2.268
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 0.821,
                "mass_amount": 2.871
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 0.705,
                "mass_amount": 2.608
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 0.241,
                "mass_amount": 1.019
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 0.041,
                "mass_amount": 0.2
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 0.013,
                "mass_amount": 0.072
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 0.003,
                "mass_amount": 0.019
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.002
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            }
        ]
    },
    "recombined_fluid_mw": 99.3,
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": 0.084,
                "mass_amount": 0.024
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": 3.509,
                "mass_amount": 1.555
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 39.466,
                "mass_amount": 6.376
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 4.9,
                "mass_amount": 1.484
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 1.532,
                "mass_amount": 0.68
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 1.423,
                "mass_amount": 0.833
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 1.054,
                "mass_amount": 0.617
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.025,
                "mass_amount": 0.018
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 1.918,
                "mass_amount": 1.394
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 1.101,
                "mass_amount": 0.8
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 2.999,
                "mass_amount": 2.555
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 5.341,
                "mass_amount": 4.868
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 5.912,
                "mass_amount": 6.15
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 3.778,
                "mass_amount": 4.476
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 3.014,
                "mass_amount": 4.067
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 2.358,
                "mass_amount": 3.491
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 2.098,
                "mass_amount": 3.402
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 2.289,
                "mass_amount": 4.034
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 1.981,
                "mass_amount": 3.791
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 1.944,
                "mass_amount": 4.032
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 1.553,
                "mass_amount": 3.471
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 1.367,
                "mass_amount": 3.263
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 1.267,
                "mass_amount": 3.203
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 1.087,
                "mass_amount": 2.879
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 0.812,
                "mass_amount": 2.248
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 0.716,
                "mass_amount": 2.098
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 0.627,
                "mass_amount": 1.893
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 0.545,
                "mass_amount": 1.711
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 0.482,
                "mass_amount": 1.573
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 0.416,
                "mass_amount": 1.412
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 0.39,
                "mass_amount": 1.372
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 0.349,
                "mass_amount": 1.265
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 0.318,
                "mass_amount": 1.192
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 0.298,
                "mass_amount": 1.147
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 0.277,
                "mass_amount": 1.098
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 0.246,
                "mass_amount": 1.0
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 0.217,
                "mass_amount": 0.906
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 0.193,
                "mass_amount": 0.829
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 0.172,
                "mass_amount": 0.755
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 0.164,
                "mass_amount": 0.733
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 1.782,
                "mass_amount": 11.304
            }
        ]
    }
}"
            }
          ]
        }
    ]}
{"contents":[
        {
          "role":"user",
          "parts":[
            {
              "fileData":{
                "mimeType":"image/jpeg",
                "fileUri":"https://github.com/yohanesnuwara/sft-finetune-gemini/blob/main/images/RS-112408%20Final%20Report%20Realgrunnen_page-0028.jpg"
              }
            },
            {
              "text":"OCR the following page into complete JSON.

Your task is to parse and extract as many infomation as possible from the page and put into JSON like specified

Never come up with new structures or keys, just fill up in the specified JSON schema.

Page can be either full texts, full table, or texts with table.

1. Identify the type of page:
   - 1.1 If the page consists only of texts:

      Parse sentences into JSON and do not give full sentence or summary

      Example sentence:

      "Two sets of sample (CL01 & CL02) is transferred at 15 deg C and pressure 1 atm" (page A.1)

      JSON response

      {
          "page": "A.1",
          "conditioning": {
              "samples": ["CL01", "CL02"],
              "transfer_temp": 15,
              "transfer_temp_unit": "C",
              "transfer_pressure": 1,
              "transfer_pressure_unit": "atm"
              // ...
          }
      }

      Try to find these parameters inferred from "flash" keyword
      {
        "sep_pressure": ...,
        "sep_pressure_unit": ...,
        "sep_temperature": ...,
        "sep_temperature_unit": ...,
      }



   - 1.2 If the page consists of table of contents
     - Put each table title from the list in key "table_title"
     - Identify the "keyword" in the table title, into these categories
        - If mention composition then "composition"
        - If mention constant composition expansion or constant mass expansion then "CCE"
        - If mention constant volume depletion then "CVD"
        - If mention differential liberation expansion then "DLE"
        - If mention multistage separator then "MSS"
        - If mention viscosity then "VISCO"
     - Identify the "sample_name" from keywords like Cylinder, Sample, Chamber number, or if it is sample pair
     - Identify the "page_number"

    JSON response:

    {
        "page": "....",
        "list_content": [
            {
                "title": "...",
                "keyword": "composition",
                "sample_name": null,
                "page_number": 1
            },
            {
                "title": "...",
                "keyword": "CCE"
                "sample_name": "A01",
                "page_number": 2
            },
            {
                "title": "...",
                "keyword": "CVD",
                "sample_name": "A01+A02",
                "page_number": 3
            }
        ]
    }

   - 1.3 If the page consists of texts with table:
     - 1.3.1 If the page displays "sample inventory" or "sample summary" table:
       - This type of page can be recognized by structure of the table. If the table has Sample ID/name or Bottle no in the y-axis, and properties in the x-axis
       - Properties reported in this summary table such as sampling depth, GOR, density, molecular weight, reservoir temperature, reservoir pressure (Pres), viscosity
       - Do not confuse this table with experiment table
       - Extract data into the "sample_inventory" JSON schema.
       - Extract other relevant information into "Other_information".
       - If you do not find any of the keys, DO NOT create the key
       - Identify title of each table and decide the "type"
            - If mention MDT oil, then "type": "OFT"
            - If mention MDT water, then "type": "WATER"

       Example JSON:
        {
          "page": "...",
          "sample_inventory": {
            "data": [
              {
                "sample_name": "1.01",
                "type": "OFT", # put "OFT" if mention MDT oil, "WATER" if mention MDT water
                "sampling_date": "2023-04-26", # If mention Transfer Date
                "well_id": "23/1", # Well name
                "basin_id": null,
                "sub_basin_id": null,
                "field_id": "Volve", # Field name
                "field_segment_id": null,
                "formation_id": "Realgrunnen", # Formation name
                "formation_zone_id": null,
                "reservoir_pressure": 182.0,
                "reservoir_pressure_unit": "bara",
                "reservoir_temperature": 69.8,
                "reservoir_temperature_unit": "C",
                "true_vertical_depth": 1929.0, # If mention sampling depth m TVDSS (true vertical depth sub sea)
                "true_vertical_depth_unit": "m",
                "measured_depth": 1984.5, # If mention sampling depth m MD (measured depth)
                "measured_depth_unit": "m",
                "pressure_at_lab": 400.0,
                "pressure_at_lab_unit": "bara",
                "temperature_at_lab": 80.0,
                "temperature_at_lab_unit": "C",
                "pressure_when_sampled": 100,
                "pressure_when_sampled_unit": "bara",
                "temperature_when_sampled": 23,
                "temperature_when_sampled_unit": "C",
                "top_perforation_depth": 2000,
                "top_perforation_depth_unit": "m",
                "bottom_perforation_depth": 3000,
                "bottom_perforation_depth_unit": "m",
                "transfer_pressure": 450.0,
                "transfer_pressure_unit": "bara",
                "transfer_temperature": 80.0,
                "transfer_temperature_unit": "C",
                "drawdown_pressure": 100,
                "drawdown_pressure_unit": "bara",
                "flashed_oil_contamination": 2.0, # If mention Mud filtrate contamination in STO
                "flashed_oil_contamination": "mass%", # If the unit mentioned is Wt%
                "fluid_type": "Oil",
                "mud_base": "Oil", # put "Oil" if mention OBM, or "Water" if mention WBM
                //... # Other parameters
              },
              {
                "Sample Type": "REC", # If mention Recombined
                # Same as above
                //...
              }
            ]
          },
          "Other_information": {
            "remarks": "Additional details can be provided here."
          }
        }

   - 1.4 If the page consists of a table:
     - 1.4.1 If the page consists of an Information table or descriptions:
       - Extract physical parameters and values into a structured JSON format.
       - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
         - If found, set "sample_name" accordingly.
         - If not found, set "sample_name" to null.

       Important data:

       - If you find "density of stock tank oil", put into key "flashed_oil_density", then fill "flashed_oil_density_unit"
       - If you see gas oil ratio (GOR), put into key "recombined_fluid_gor", then fill "recombined_fluid_gor_unit

       Getting 'flashed_oil_temperature':
       If you see the following

        ```
        Separation conditions:    From:  80.0 °C and   400 bara
                                  To:    25.5 °C and   atm. pressure
        ```

       In this case, "flashed_oil_temperature": 25.5, "flashed_oil_temperature_unit": "C"
       Pick the number after "To:   " before "and atm.pressure"

       Example JSON:
        {
            "page": "...",
            "sample_name": "...",
            "parameter1": "...",
            "parameter1_unit": "...",
            "parameter2": "...",
            "parameter2_unit": "...",
            "parameter3": "...",
            "parameter4_unit": "...",

            # Important data
            "flashed_oil_density": ...,
            "flashed_oil_density_unit": "...",
            "flashed_oil_temperature": 20.5,
            "flashed_oil_temperature_unit": "C",
            "recombined_fluid_gor": ...,
            "recombined_fluid_gor_unit": "...",
            et cetera ...
        }

     - 1.4.2 If the page contains a Composition table :

        - Dynamically identify each fluid-type group by reading the top header row(s), matching these synonyms:
          - flashed_oil ↔ "Stock tank oil", "Flashed Liquid", "Stock tank oil"
          - flashed_gas ↔ "Stock tank gas", "Flashed gas"
          - recombined_fluid ↔ "Monophasic fluid", "Reservoir fluid"
        - Under each fluid-type header, locate its two sub-columns: one labeled "Mole %" → molar_amount, the other "Weight %" → mass_amount.
        - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
            - If found, set "sample_name" accordingly.
            - Sample name is just like ID consist of letter and number, without C10+ or C36+
            - If not found, set "sample_name" to null.
        - If the table title says "uncorrected" or "corrected", set "uncorrected": true/false.
        - Identify "last_component" from the final row label (e.g. "C36+"), include units on every top-level number, and fill only the keys in the prescribed schema—do not invent new ones.

        IMPORTANT!!!
        - In case there is blank cell in the table (value not reported)
        - If you do not find BOTH molar amount and mass amount of a component, do not extract it into JSON

        Example table with blanks:

      |Component         | Stock tank gas    | Stock tank oil    |  Reservoir fluid   | Mol weight  |
      |Mole%             | Weight% | Mole%   | Weight% | Mole%   |  Mole%   | Weight% |             |
      |Nitrogen          | 0.157   | 0.183   |         |         |  0.084   | 0.024   | 28.02       |
      |Carbon Dioxide    | 6.582   | 12.048  |         |         |  3.509   | 1.555   | 44.01       |
      |Hydrogen Sulphide | 0       | 0       |         |         |  0       | 0       | 34.08       |
      |Methane           | 73.927  | 49.324  | 0.115   | 0.01    |  39.466  | 6.376   | 16.04       |
      |Ethane            | 8.997   | 11.251  | 0.222   | 0.036   |  4.9     | 1.484   | 30.07       |


        Result JSON (referring to the table):

{
    "page": ...,
    "sample_name": "A001", # The name of sample
    "uncorrected": true, # false or null
    "last_component": "C10+",
    "flashed_oil_mw": 151.9, # oil molecular weight or MW
    "flashed_oil_density": 0.777, # oil density at stock-tank condition 15 degC
    "flashed_oil_density_unit": "g/cm3", # g/cm3, kg/m3
    "flashed_oil_temperature": 60.0, # temperature at flash
    "flashed_oil_temperature_unit": "F", # F, C, K, R
    "flashed_oil_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide molar_amount and mass_amount is null, so no need to extract
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 0.115,
                "mass_amount": 0.01
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 0.222,
                "mass_amount": 0.036
            }
        ]
    },
    "flashed_gas_mw": 23.4, # gas molecular weight or MW
    "flashed_gas_specific_gravity": 0.808, # also called relative density or ideal
    "flashed_gas_specific_gravity_unit": "SG", # if unit not mentioned then most likely SG
    "flashed_gas_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide has molar_amount and mass_amount, so extract it
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.157,
                "mass_amount": 0.183
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 6.582,
                "mass_amount": 12.048
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 73.997,
                "mass_amount": 49.324
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 8.997,
                "mass_amount": 11.251
            }
        ]
    },

    # Recombined is sometimes called as Reservoir Fluid or Monophasic
    "recombined_fluid_mw": 30.2, # reservoir fluid MW
    "recombined_fluid_gor": 12200.8, # Gas oil ratio or gas liquid ratio (GLR) or Rs
    "recombined_fluid_gor_unit": "scf/STB", # scf/STB, Sm3/Sm3, Sm3/m3, scf/bbl
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.084,
                "mass_amount": 0.024
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 3.509,
                "mass_amount": 1.555
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 39.466,
                "mass_amount": 6.376
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 4.9,
                "mass_amount": 1.484
            }
        ]
    }
}
     - 1.4.3 If the page contains a Constant Composition Expansion (CCE) or Constant Mass Expansion (CME) table:
       - Identify measurement units for parameters.
       - Always put as "CCE" not "CME"
       - Extract data and structure into the "experiments" JSON key.
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Stages 'order' key must always start from 0
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column name | Key
       --------|-----------
       Relative Volume (column) | relative_total_volume
       Relative Volumes (Vs/Vs,BP) | relative_total_volume
       RLD (column) | relative_oil_volume
       % Liq/Sat (Vliq/Vsat) | relative_oil_volume

       Note: relative_oil_volume always null BEFORE the saturation_pressure=True

       - You must stick to the following units

        Variable | Unit
        --------|-----------
        relative_total_volume_unit | Vtot/Vsat

       Example JSON:


{
    "page" : ...,
    "sample_name": ...,
    "experiments": [
        {
            "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
            "sample_name": 1184,
            "name": "Constant Composition Expansion",
            "type": "CCE",
            "temperature": 106.0,
            "temperature_unit": "C",
            "pressure_unit": "psia",
            "relative_oil_volume_unit": "Vo/Vsat (%)",
            "single_phase_density_unit": "g/cm3",
            "relative_total_volume_unit": "Vtot/Vsat",
            "stages": [
                {
                    "pressure": 9000.0,
                    "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                    "relative_oil_volume": null,
                    "relative_total_volume": 0.79,
                    "single_phase_density": 0.422,
                    "z_factor": 1.407
                },
                // Other stages ...
                {
                    "pressure": 3011.0,
                    "is_saturation_pressure": false,
                    "relative_oil_volume": 14.37,
                    "relative_total_volume": 1.315,
                    "single_phase_density": null,
                    "z_factor": null
                }
            ]
        }
    ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) COMPOSITION:
       - You put the page in this category if you see keywords "Constant Volume Depletion" and chemical component
       - Please Read the WHOLE COLUMNS of TABLE
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true

       - If the columns like this: 2600 psia, 2010 psia, 1000 psia, Residual Oil
          - Put the pressures columns inside Liberated Gas schema
          - Put the Residual Oil column inside Final Stage Oil schema

       - Liberated Gas structure:
          - Put each of the "pressure" inside "stages" key
          - Put ALL the "components" and its "molar_amount" inside each "pressure" which it refers to

        Structure:

{
  "sample_name": null,
  "experiments": [
    {
      "sample_name": null,
      "continued": false,
      "saturation_pressure_type": "Dewpoint",
      "name": "Constant Volume Depletion",
      "type": "CVD",
      "temperature": 106.0,
      "temperature_unit": "C",

      # First type
      "liberated_gas_compositions": {
        "components": [
          {
            "input_name": "CO2",
            "mw": 44.01
          },
          {
            "input_name": "Other",
            "mw": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0
          }
        ],
        "stages": [
          {
            "pressure": 2600,
            "composition": [
              {
                "component_name": "CO2",
                "molar_amount": 0.305
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "C30+",
                "molar_amount": 0.087
              }
            ]
          },
          {
            "pressure": 1300,
            "composition": [
              {
                "component_name": "2M-C6",
                "molar_amount": 0.123
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "Toluene",
                "molar_amount": 0.037
              }
            ]
          }
        ]
      },

       - Residual Oil structure:
          - Put ALL the "components" and its "molar_amount" inside "composition" key
          - Get the "final_stage_oil_mw" from the last row of table if mentioning "MW"

        Structure:

      # Second type
      "final_stage_oil_mw": 100.14,
      "final_stage_oil_density": 630.0,
      "final_stage_oil_density_unit": "kg/m3",
      "stock_tank_oil_density": 630.0,
      "stock_tank_oil_density_unit": "kg/m3",
      "final_stage_oil_composition": {
        "components": [
          {
            "input_name": "CO2",
            "mw": null,
            "molar_amount": 0.213,
            "mass_amount": null
          },
          {
            "input_name": "Other",
            "mw": null,
            "molar_amount": null,
            "mass_amount": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0,
            "molar_amount": 0.553,
            "mass_amount": null
          }
        ]
      }
    }
  ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) PROPERTIES table:
       - You put into this category If you see Pressure as row and Physical Properties as column (No composition)
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column Name | Key
       --------|-----------
       Total Recovery (mole %) | cumulative_moles_removed
       Liq. Density (g/cc) | oil_density

        Example JSON:

      {
          "sample_name": ..., # Put sample ID here
          "experiments": [
              {
                  "sample_name": ...,
                  "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                  "name": "Constant Volume Depletion",
                  "type": "CVD",
                  "temperature": 106.0,
                  "temperature_unit": "C",
                  "pressure_unit": "psia",
                  "oil_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_viscosity_unit": "...", # "cP"
                  "relative_oil_volume_unit": "...", # "%"
                  "incremental_moles_removed_unit": "...", # "%"
                  "cumulative_moles_removed_unit": "...", # "%"

                  # Properties data
                  "stages": [
                      # Fill here if the table displays properties as row and pressure as column, or otherwise
                      {
                          "pressure": 4661.0,
                          "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                          "relative_oil_volume": 0.0,
                          "incremental_moles_removed": null, # "%"
                          "cumulative_moles_removed": 0.0,
                          "oil_density": null,
                          "gas_z_factor": 0.922,
                          "gas_specific_gravity": null,
                          "gas_density": 0.339,
                          "gas_viscosity": 0.042,
                          "gas_plus_fraction_mw": null,
                      },
                      {
                          // Other stages ...
                      }
                      {
                          "pressure": 1300.0,
                          "is_saturation_pressure": false,
                          "relative_oil_volume": 13.18,
                          "incremental_moles_removed": null,
                          "cumulative_moles_removed": 67.06,
                          "oil_density": 0.63,
                          "gas_z_factor": 0.874,
                          "gas_specific_gravity": null,
                          "gas_density": 0.075,
                          "gas_viscosity": 0.015,
                          "gas_plus_fraction_mw": null,
                      }
                  ]
              }
          ]
      }

     - 1.4.5 If the page contains a Multi-Stage Separator (MSS) or Three Stage Separator table:
       - If you see "Two Stage", "Three Stage", "Four Stage" Separator, it is MSS. But, "Single Stage" is NOT MSS
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Stock tank oil data: If the title mention stock tank or tank oil
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If you see "Pressure Atm. bara", it means "pressure": 1 (atmospheric pressure means 1 bara)
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON

        Exception:
       - If you find page with title "Bo and GOR from Three Stage Separator test during depletion using the results from Differential Liberation ...", DO NOT extract the data.

        Example JSON:
{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                    "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                    "name": "Multi-stage Separator",
                    "type": "MSS",
                    "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "Dodecanes Plus",
                            "mw": null
                        }
                    ],
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.7579
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0024
                                }
                            ]
                        },
                        {
                            "stage_number": 1,
                            "composition": [
                                {
                                    "stage_number": 1,
                                    "component_name": "C1",
                                    "molar_amount": 0.6791
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 1,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0022
                                }
                            ]
                        },
                        {
                            "stage_number": 2,
                            "composition": [
                                {
                                    "stage_number": 2,
                                    "component_name": "C1",
                                    "molar_amount": 0.1999
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 2,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.019
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Stock tank oil
                "stock_tank_oil_molecular_weight": 145.78,
                "stock_tank_oil_density": 0.7843,
                "stock_tank_oil_density_unit": "g/cm3",
                "stock_tank_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.013,
                            "mass_amount": 0.0107
                        }
                    ]
                },
                "pressure_unit": "psia",
                "temperature_unit": "F",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",

                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 3724.0,
                        "is_saturation_pressure": true,
                        "temperature": 230.0,
                        "gor": 1802.83,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.1783,
                        "oil_density": 0.5016,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "temperature": 60.0,
                        "gor": 0.0,
                        "liberated_gas": 1802.83,
                        "oil_fvf": 1.0,
                        "oil_density": 0.7843,
                        "gas_z_factor": 0.9892,
                        "gas_specific_gravity": 1.316,
                        "gas_density": null,
                        "gas_viscosity": null
                    }
                ]
            }
    ]
}


     - 1.4.6 If the page contains a Differential Liberation (DLE) or Differential Vaporization (DV) table:
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Residual oil data: If mention residual oil or final stage
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity
       gas-oil ratio solution** | gor

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON
       ** in "Gas-Oil Ratio" column if you find "solution" and "liberated", take the "solution" and put to "gor" key in JSON

        Example JSON:

{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                "name": "Differential Liberation Expansion",
                "type": "DLE",
                "temperature": 229.7,
                "temperature_unit": "F",
                "dle_experiment_type": "Standard DLE Experiment",

                # // First part, Liberated gas
                "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "N2",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "C7+",
                            "mw": 114.01
                        }
                    ],
                    # Fill here if the table displays component as row and pressure as column, or otherwise
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.6859 # Composition in mole percent
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0085
                                }
                            ]
                        },
                        {
                            // Other stages ...
                        },
                        {
                            "stage_number": 9,
                            "composition": [
                                {
                                    "stage_number": 9,
                                    "component_name": "C1",
                                    "molar_amount": 0.1309
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 9,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0629
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Residual oil
                "evolved_gas_specific_gravity": null,
                "evolved_gas_composition_id": null,
                "evolved_gas_composition": null,
                "average_residual_oil_mw": 179.43,
                "average_residual_oil_density": 0.8128,
                "average_residual_oil_density_unit": "g/cm3",
                "residual_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.019,
                            "mass_amount": 0.0127
                        }
                    ]
                },
                "pressure_unit": "psia",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",
                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 8513.0,
                        "is_saturation_pressure": true,
                        "gor": 2847.67,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.5407,
                        "oil_density": 0.5714,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "gor": 0.0,
                        "liberated_gas": 2847.67,
                        "oil_fvf": 1.0975,
                        "oil_density": 0.7471,
                        "gas_z_factor": 0.9887,
                        "gas_specific_gravity": 2.1686,
                        "gas_density": null,
                        "gas_viscosity": 0.00925
                    }
                ]
            }
    ]
}

     - 1.4.7 If the page contains a Viscosity experiment (VISCO) table:
       - Identify measurement units for parameters.
       - Viscosity table has pressure as y-axis and viscosities as x-axis
       - Extract viscosity data and structure into "experiments".
       - Never come up with new structures or keys, just fill up in the specified JSON schema.

        Example JSON:

{
    "page": ...,
    "sample_name": ...,
    "experiments": [
        {
            "name": "Oil Viscosity",
            "type": "VISCO",
            "temperature": 229.7,
            "temperature_unit": "F",
            "pressure_unit": "psia",
            "oil_viscosity_unit": "cP",
            "gas_viscosity_unit": "cP",
            "stages": [
                {
                    "visco_id": 1018,
                    "pressure": 5413.0,
                    "oil_viscosity": 0.088,
                    "gas_viscosity": null
                },
                {
                    // Other stages ...
                },
                {
                    "visco_id": 1018,
                    "pressure": 13.0,
                    "oil_viscosity": 0.749,
                    "gas_viscosity": 0.00925
                }
            ]
        }
    ]
}

2. If any summary data or descriptive information is found:
   - Include it as key "Other_information", outside the "experiments" key in JSON.

   Example JSON:
   {
       "solution_gas_oil_ratio": 100,
       "separator_volume_factor": 300,
       "solution_gas_oil_ratio_unit": "scf/stb",
       "separator_volume_factor_unit": "bbl",
       ......
   }

3. Finally, you must stick to the following units

Unit shown | Unit in JSON
--------|-----------
g/cc | g/cm3
mole% | %
Vol/Vol | Sm3/Sm3
scf/sep bbl | scf/bbl
kg/Sm3 | kg/m3
psi | psia
Air=1 | SG

4. If you find Figure in the page, DO NOT extract any data from it. Just extract the title into json.

  {
    "figure_title": "Plot of dewpoint pressure"
  }

5. Dealing with Paraffinic-Naphtenes-Aromatics (PNA) composition

In some cases, PNA can be reported in compositional table, DLE liberated gas, or MSS liberated gas.

For example:

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| n-Hexane          | 0.086   | 0.351     | 86.2  |
| iso-Paraffins     | 0.154   | 0.627     | 86.2  |
| Naphthenes        | 0.033   | 0.109     | 70.1  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |
| n-Heptane         | 0.014   | 0.067     | 100.2 |
| iso-Paraffins     | 0.038   | 0.181     | 100.2 |
| Naphthenes        | 0.116   | 0.476     | 86.6  |
| Aromatics         | 0.030   | 0.112     | 78.1  |

You see for every C6 total and C7 total, there are iso-Paraffins (P), Naphthenes (N), and Aromatics (A).

Remove these PNA, so you just have C6 total and C7 total.

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |

From here, you just extract into corresponding JSON schema as defined in instructions 1 until 4
"
            }
          ]
        },
        {
          "role":"model",
          "parts":[
            {
              "text":"{
    "page": "28",
    "sample_name": "WFL-01645",
    "recombined_fluid_gor": 123.4,
    "recombined_fluid_gor_unit": "Sm3/Sm3",
    "flashed_oil_density": 837.8,
    "flashed_oil_density_unit": "kg/m3",
    "flashed_oil_temperature": 15.0,
    "flashed_oil_temperature_unit": "C",
    "flashed_gas_specific_gravity": 0.825,
    "flashed_gas_specific_gravity_unit": "SG",
    "flashed_oil_mw": 185.5,
    "flashed_oil_mw_unit": "g/mol",
    "flashed_oil_c7_plus_mw": 199.0,
    "flashed_oil_c7_plus_mw_unit": "g/mol",
    "flashed_oil_c7_plus_density": 851.0,
    "flashed_oil_c7_plus_density_unit": "kg/m3",
    "flashed_oil_c10_plus_mw": 252.0,
    "flashed_oil_c10_plus_mw_unit": "g/mol",
    "flashed_oil_c10_plus_density": 871.0,
    "flashed_oil_c10_plus_density_unit": "kg/m3",
    "sampling_depth": 1726.04,
    "sampling_depth_unit": "m MD",
    "sep_temperature": 18.9,
    "sep_temperature_unit": "C",
    "sep_pressure": 1.0,
    "sep_pressure_unit": "atm",
    "Other_information": {
        "remarks": "uncorrected for mud filtrate contamination",
        "standard_conditions_gas_temperature": 15.0,
        "standard_conditions_gas_temperature_unit": "C",
        "standard_conditions_gas_pressure": 1.01325,
        "standard_conditions_gas_pressure_unit": "bara",
        "standard_conditions_oil_temperature": 15.0,
        "standard_conditions_oil_temperature_unit": "C",
        "standard_conditions_oil_pressure": 1.0,
        "standard_conditions_oil_pressure_unit": "atm"
    }
}"
            }
          ]
        }
    ]}
{"contents":[
        {
          "role":"user",
          "parts":[
            {
              "fileData":{
                "mimeType":"image/jpeg",
                "fileUri":"https://github.com/yohanesnuwara/sft-finetune-gemini/blob/main/images/RS-112408%20Final%20Report%20Realgrunnen_page-0031.jpg"
              }
            },
            {
              "text":"OCR the following page into complete JSON.

Your task is to parse and extract as many infomation as possible from the page and put into JSON like specified

Never come up with new structures or keys, just fill up in the specified JSON schema.

Page can be either full texts, full table, or texts with table.

1. Identify the type of page:
   - 1.1 If the page consists only of texts:

      Parse sentences into JSON and do not give full sentence or summary

      Example sentence:

      "Two sets of sample (CL01 & CL02) is transferred at 15 deg C and pressure 1 atm" (page A.1)

      JSON response

      {
          "page": "A.1",
          "conditioning": {
              "samples": ["CL01", "CL02"],
              "transfer_temp": 15,
              "transfer_temp_unit": "C",
              "transfer_pressure": 1,
              "transfer_pressure_unit": "atm"
              // ...
          }
      }

      Try to find these parameters inferred from "flash" keyword
      {
        "sep_pressure": ...,
        "sep_pressure_unit": ...,
        "sep_temperature": ...,
        "sep_temperature_unit": ...,
      }



   - 1.2 If the page consists of table of contents
     - Put each table title from the list in key "table_title"
     - Identify the "keyword" in the table title, into these categories
        - If mention composition then "composition"
        - If mention constant composition expansion or constant mass expansion then "CCE"
        - If mention constant volume depletion then "CVD"
        - If mention differential liberation expansion then "DLE"
        - If mention multistage separator then "MSS"
        - If mention viscosity then "VISCO"
     - Identify the "sample_name" from keywords like Cylinder, Sample, Chamber number, or if it is sample pair
     - Identify the "page_number"

    JSON response:

    {
        "page": "....",
        "list_content": [
            {
                "title": "...",
                "keyword": "composition",
                "sample_name": null,
                "page_number": 1
            },
            {
                "title": "...",
                "keyword": "CCE"
                "sample_name": "A01",
                "page_number": 2
            },
            {
                "title": "...",
                "keyword": "CVD",
                "sample_name": "A01+A02",
                "page_number": 3
            }
        ]
    }

   - 1.3 If the page consists of texts with table:
     - 1.3.1 If the page displays "sample inventory" or "sample summary" table:
       - This type of page can be recognized by structure of the table. If the table has Sample ID/name or Bottle no in the y-axis, and properties in the x-axis
       - Properties reported in this summary table such as sampling depth, GOR, density, molecular weight, reservoir temperature, reservoir pressure (Pres), viscosity
       - Do not confuse this table with experiment table
       - Extract data into the "sample_inventory" JSON schema.
       - Extract other relevant information into "Other_information".
       - If you do not find any of the keys, DO NOT create the key
       - Identify title of each table and decide the "type"
            - If mention MDT oil, then "type": "OFT"
            - If mention MDT water, then "type": "WATER"

       Example JSON:
        {
          "page": "...",
          "sample_inventory": {
            "data": [
              {
                "sample_name": "1.01",
                "type": "OFT", # put "OFT" if mention MDT oil, "WATER" if mention MDT water
                "sampling_date": "2023-04-26", # If mention Transfer Date
                "well_id": "23/1", # Well name
                "basin_id": null,
                "sub_basin_id": null,
                "field_id": "Volve", # Field name
                "field_segment_id": null,
                "formation_id": "Realgrunnen", # Formation name
                "formation_zone_id": null,
                "reservoir_pressure": 182.0,
                "reservoir_pressure_unit": "bara",
                "reservoir_temperature": 69.8,
                "reservoir_temperature_unit": "C",
                "true_vertical_depth": 1929.0, # If mention sampling depth m TVDSS (true vertical depth sub sea)
                "true_vertical_depth_unit": "m",
                "measured_depth": 1984.5, # If mention sampling depth m MD (measured depth)
                "measured_depth_unit": "m",
                "pressure_at_lab": 400.0,
                "pressure_at_lab_unit": "bara",
                "temperature_at_lab": 80.0,
                "temperature_at_lab_unit": "C",
                "pressure_when_sampled": 100,
                "pressure_when_sampled_unit": "bara",
                "temperature_when_sampled": 23,
                "temperature_when_sampled_unit": "C",
                "top_perforation_depth": 2000,
                "top_perforation_depth_unit": "m",
                "bottom_perforation_depth": 3000,
                "bottom_perforation_depth_unit": "m",
                "transfer_pressure": 450.0,
                "transfer_pressure_unit": "bara",
                "transfer_temperature": 80.0,
                "transfer_temperature_unit": "C",
                "drawdown_pressure": 100,
                "drawdown_pressure_unit": "bara",
                "flashed_oil_contamination": 2.0, # If mention Mud filtrate contamination in STO
                "flashed_oil_contamination": "mass%", # If the unit mentioned is Wt%
                "fluid_type": "Oil",
                "mud_base": "Oil", # put "Oil" if mention OBM, or "Water" if mention WBM
                //... # Other parameters
              },
              {
                "Sample Type": "REC", # If mention Recombined
                # Same as above
                //...
              }
            ]
          },
          "Other_information": {
            "remarks": "Additional details can be provided here."
          }
        }

   - 1.4 If the page consists of a table:
     - 1.4.1 If the page consists of an Information table or descriptions:
       - Extract physical parameters and values into a structured JSON format.
       - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
         - If found, set "sample_name" accordingly.
         - If not found, set "sample_name" to null.

       Important data:

       - If you find "density of stock tank oil", put into key "flashed_oil_density", then fill "flashed_oil_density_unit"
       - If you see gas oil ratio (GOR), put into key "recombined_fluid_gor", then fill "recombined_fluid_gor_unit

       Getting 'flashed_oil_temperature':
       If you see the following

        ```
        Separation conditions:    From:  80.0 °C and   400 bara
                                  To:    25.5 °C and   atm. pressure
        ```

       In this case, "flashed_oil_temperature": 25.5, "flashed_oil_temperature_unit": "C"
       Pick the number after "To:   " before "and atm.pressure"

       Example JSON:
        {
            "page": "...",
            "sample_name": "...",
            "parameter1": "...",
            "parameter1_unit": "...",
            "parameter2": "...",
            "parameter2_unit": "...",
            "parameter3": "...",
            "parameter4_unit": "...",

            # Important data
            "flashed_oil_density": ...,
            "flashed_oil_density_unit": "...",
            "flashed_oil_temperature": 20.5,
            "flashed_oil_temperature_unit": "C",
            "recombined_fluid_gor": ...,
            "recombined_fluid_gor_unit": "...",
            et cetera ...
        }

     - 1.4.2 If the page contains a Composition table :

        - Dynamically identify each fluid-type group by reading the top header row(s), matching these synonyms:
          - flashed_oil ↔ "Stock tank oil", "Flashed Liquid", "Stock tank oil"
          - flashed_gas ↔ "Stock tank gas", "Flashed gas"
          - recombined_fluid ↔ "Monophasic fluid", "Reservoir fluid"
        - Under each fluid-type header, locate its two sub-columns: one labeled "Mole %" → molar_amount, the other "Weight %" → mass_amount.
        - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
            - If found, set "sample_name" accordingly.
            - Sample name is just like ID consist of letter and number, without C10+ or C36+
            - If not found, set "sample_name" to null.
        - If the table title says "uncorrected" or "corrected", set "uncorrected": true/false.
        - Identify "last_component" from the final row label (e.g. "C36+"), include units on every top-level number, and fill only the keys in the prescribed schema—do not invent new ones.

        IMPORTANT!!!
        - In case there is blank cell in the table (value not reported)
        - If you do not find BOTH molar amount and mass amount of a component, do not extract it into JSON

        Example table with blanks:

      |Component         | Stock tank gas    | Stock tank oil    |  Reservoir fluid   | Mol weight  |
      |Mole%             | Weight% | Mole%   | Weight% | Mole%   |  Mole%   | Weight% |             |
      |Nitrogen          | 0.157   | 0.183   |         |         |  0.084   | 0.024   | 28.02       |
      |Carbon Dioxide    | 6.582   | 12.048  |         |         |  3.509   | 1.555   | 44.01       |
      |Hydrogen Sulphide | 0       | 0       |         |         |  0       | 0       | 34.08       |
      |Methane           | 73.927  | 49.324  | 0.115   | 0.01    |  39.466  | 6.376   | 16.04       |
      |Ethane            | 8.997   | 11.251  | 0.222   | 0.036   |  4.9     | 1.484   | 30.07       |


        Result JSON (referring to the table):

{
    "page": ...,
    "sample_name": "A001", # The name of sample
    "uncorrected": true, # false or null
    "last_component": "C10+",
    "flashed_oil_mw": 151.9, # oil molecular weight or MW
    "flashed_oil_density": 0.777, # oil density at stock-tank condition 15 degC
    "flashed_oil_density_unit": "g/cm3", # g/cm3, kg/m3
    "flashed_oil_temperature": 60.0, # temperature at flash
    "flashed_oil_temperature_unit": "F", # F, C, K, R
    "flashed_oil_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide molar_amount and mass_amount is null, so no need to extract
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 0.115,
                "mass_amount": 0.01
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 0.222,
                "mass_amount": 0.036
            }
        ]
    },
    "flashed_gas_mw": 23.4, # gas molecular weight or MW
    "flashed_gas_specific_gravity": 0.808, # also called relative density or ideal
    "flashed_gas_specific_gravity_unit": "SG", # if unit not mentioned then most likely SG
    "flashed_gas_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide has molar_amount and mass_amount, so extract it
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.157,
                "mass_amount": 0.183
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 6.582,
                "mass_amount": 12.048
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 73.997,
                "mass_amount": 49.324
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 8.997,
                "mass_amount": 11.251
            }
        ]
    },

    # Recombined is sometimes called as Reservoir Fluid or Monophasic
    "recombined_fluid_mw": 30.2, # reservoir fluid MW
    "recombined_fluid_gor": 12200.8, # Gas oil ratio or gas liquid ratio (GLR) or Rs
    "recombined_fluid_gor_unit": "scf/STB", # scf/STB, Sm3/Sm3, Sm3/m3, scf/bbl
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.084,
                "mass_amount": 0.024
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 3.509,
                "mass_amount": 1.555
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 39.466,
                "mass_amount": 6.376
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 4.9,
                "mass_amount": 1.484
            }
        ]
    }
}
     - 1.4.3 If the page contains a Constant Composition Expansion (CCE) or Constant Mass Expansion (CME) table:
       - Identify measurement units for parameters.
       - Always put as "CCE" not "CME"
       - Extract data and structure into the "experiments" JSON key.
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Stages 'order' key must always start from 0
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column name | Key
       --------|-----------
       Relative Volume (column) | relative_total_volume
       Relative Volumes (Vs/Vs,BP) | relative_total_volume
       RLD (column) | relative_oil_volume
       % Liq/Sat (Vliq/Vsat) | relative_oil_volume

       Note: relative_oil_volume always null BEFORE the saturation_pressure=True

       - You must stick to the following units

        Variable | Unit
        --------|-----------
        relative_total_volume_unit | Vtot/Vsat

       Example JSON:


{
    "page" : ...,
    "sample_name": ...,
    "experiments": [
        {
            "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
            "sample_name": 1184,
            "name": "Constant Composition Expansion",
            "type": "CCE",
            "temperature": 106.0,
            "temperature_unit": "C",
            "pressure_unit": "psia",
            "relative_oil_volume_unit": "Vo/Vsat (%)",
            "single_phase_density_unit": "g/cm3",
            "relative_total_volume_unit": "Vtot/Vsat",
            "stages": [
                {
                    "pressure": 9000.0,
                    "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                    "relative_oil_volume": null,
                    "relative_total_volume": 0.79,
                    "single_phase_density": 0.422,
                    "z_factor": 1.407
                },
                // Other stages ...
                {
                    "pressure": 3011.0,
                    "is_saturation_pressure": false,
                    "relative_oil_volume": 14.37,
                    "relative_total_volume": 1.315,
                    "single_phase_density": null,
                    "z_factor": null
                }
            ]
        }
    ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) COMPOSITION:
       - You put the page in this category if you see keywords "Constant Volume Depletion" and chemical component
       - Please Read the WHOLE COLUMNS of TABLE
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true

       - If the columns like this: 2600 psia, 2010 psia, 1000 psia, Residual Oil
          - Put the pressures columns inside Liberated Gas schema
          - Put the Residual Oil column inside Final Stage Oil schema

       - Liberated Gas structure:
          - Put each of the "pressure" inside "stages" key
          - Put ALL the "components" and its "molar_amount" inside each "pressure" which it refers to

        Structure:

{
  "sample_name": null,
  "experiments": [
    {
      "sample_name": null,
      "continued": false,
      "saturation_pressure_type": "Dewpoint",
      "name": "Constant Volume Depletion",
      "type": "CVD",
      "temperature": 106.0,
      "temperature_unit": "C",

      # First type
      "liberated_gas_compositions": {
        "components": [
          {
            "input_name": "CO2",
            "mw": 44.01
          },
          {
            "input_name": "Other",
            "mw": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0
          }
        ],
        "stages": [
          {
            "pressure": 2600,
            "composition": [
              {
                "component_name": "CO2",
                "molar_amount": 0.305
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "C30+",
                "molar_amount": 0.087
              }
            ]
          },
          {
            "pressure": 1300,
            "composition": [
              {
                "component_name": "2M-C6",
                "molar_amount": 0.123
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "Toluene",
                "molar_amount": 0.037
              }
            ]
          }
        ]
      },

       - Residual Oil structure:
          - Put ALL the "components" and its "molar_amount" inside "composition" key
          - Get the "final_stage_oil_mw" from the last row of table if mentioning "MW"

        Structure:

      # Second type
      "final_stage_oil_mw": 100.14,
      "final_stage_oil_density": 630.0,
      "final_stage_oil_density_unit": "kg/m3",
      "stock_tank_oil_density": 630.0,
      "stock_tank_oil_density_unit": "kg/m3",
      "final_stage_oil_composition": {
        "components": [
          {
            "input_name": "CO2",
            "mw": null,
            "molar_amount": 0.213,
            "mass_amount": null
          },
          {
            "input_name": "Other",
            "mw": null,
            "molar_amount": null,
            "mass_amount": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0,
            "molar_amount": 0.553,
            "mass_amount": null
          }
        ]
      }
    }
  ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) PROPERTIES table:
       - You put into this category If you see Pressure as row and Physical Properties as column (No composition)
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column Name | Key
       --------|-----------
       Total Recovery (mole %) | cumulative_moles_removed
       Liq. Density (g/cc) | oil_density

        Example JSON:

      {
          "sample_name": ..., # Put sample ID here
          "experiments": [
              {
                  "sample_name": ...,
                  "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                  "name": "Constant Volume Depletion",
                  "type": "CVD",
                  "temperature": 106.0,
                  "temperature_unit": "C",
                  "pressure_unit": "psia",
                  "oil_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_viscosity_unit": "...", # "cP"
                  "relative_oil_volume_unit": "...", # "%"
                  "incremental_moles_removed_unit": "...", # "%"
                  "cumulative_moles_removed_unit": "...", # "%"

                  # Properties data
                  "stages": [
                      # Fill here if the table displays properties as row and pressure as column, or otherwise
                      {
                          "pressure": 4661.0,
                          "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                          "relative_oil_volume": 0.0,
                          "incremental_moles_removed": null, # "%"
                          "cumulative_moles_removed": 0.0,
                          "oil_density": null,
                          "gas_z_factor": 0.922,
                          "gas_specific_gravity": null,
                          "gas_density": 0.339,
                          "gas_viscosity": 0.042,
                          "gas_plus_fraction_mw": null,
                      },
                      {
                          // Other stages ...
                      }
                      {
                          "pressure": 1300.0,
                          "is_saturation_pressure": false,
                          "relative_oil_volume": 13.18,
                          "incremental_moles_removed": null,
                          "cumulative_moles_removed": 67.06,
                          "oil_density": 0.63,
                          "gas_z_factor": 0.874,
                          "gas_specific_gravity": null,
                          "gas_density": 0.075,
                          "gas_viscosity": 0.015,
                          "gas_plus_fraction_mw": null,
                      }
                  ]
              }
          ]
      }

     - 1.4.5 If the page contains a Multi-Stage Separator (MSS) or Three Stage Separator table:
       - If you see "Two Stage", "Three Stage", "Four Stage" Separator, it is MSS. But, "Single Stage" is NOT MSS
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Stock tank oil data: If the title mention stock tank or tank oil
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If you see "Pressure Atm. bara", it means "pressure": 1 (atmospheric pressure means 1 bara)
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON

        Exception:
       - If you find page with title "Bo and GOR from Three Stage Separator test during depletion using the results from Differential Liberation ...", DO NOT extract the data.

        Example JSON:
{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                    "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                    "name": "Multi-stage Separator",
                    "type": "MSS",
                    "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "Dodecanes Plus",
                            "mw": null
                        }
                    ],
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.7579
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0024
                                }
                            ]
                        },
                        {
                            "stage_number": 1,
                            "composition": [
                                {
                                    "stage_number": 1,
                                    "component_name": "C1",
                                    "molar_amount": 0.6791
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 1,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0022
                                }
                            ]
                        },
                        {
                            "stage_number": 2,
                            "composition": [
                                {
                                    "stage_number": 2,
                                    "component_name": "C1",
                                    "molar_amount": 0.1999
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 2,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.019
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Stock tank oil
                "stock_tank_oil_molecular_weight": 145.78,
                "stock_tank_oil_density": 0.7843,
                "stock_tank_oil_density_unit": "g/cm3",
                "stock_tank_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.013,
                            "mass_amount": 0.0107
                        }
                    ]
                },
                "pressure_unit": "psia",
                "temperature_unit": "F",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",

                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 3724.0,
                        "is_saturation_pressure": true,
                        "temperature": 230.0,
                        "gor": 1802.83,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.1783,
                        "oil_density": 0.5016,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "temperature": 60.0,
                        "gor": 0.0,
                        "liberated_gas": 1802.83,
                        "oil_fvf": 1.0,
                        "oil_density": 0.7843,
                        "gas_z_factor": 0.9892,
                        "gas_specific_gravity": 1.316,
                        "gas_density": null,
                        "gas_viscosity": null
                    }
                ]
            }
    ]
}


     - 1.4.6 If the page contains a Differential Liberation (DLE) or Differential Vaporization (DV) table:
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Residual oil data: If mention residual oil or final stage
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity
       gas-oil ratio solution** | gor

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON
       ** in "Gas-Oil Ratio" column if you find "solution" and "liberated", take the "solution" and put to "gor" key in JSON

        Example JSON:

{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                "name": "Differential Liberation Expansion",
                "type": "DLE",
                "temperature": 229.7,
                "temperature_unit": "F",
                "dle_experiment_type": "Standard DLE Experiment",

                # // First part, Liberated gas
                "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "N2",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "C7+",
                            "mw": 114.01
                        }
                    ],
                    # Fill here if the table displays component as row and pressure as column, or otherwise
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.6859 # Composition in mole percent
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0085
                                }
                            ]
                        },
                        {
                            // Other stages ...
                        },
                        {
                            "stage_number": 9,
                            "composition": [
                                {
                                    "stage_number": 9,
                                    "component_name": "C1",
                                    "molar_amount": 0.1309
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 9,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0629
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Residual oil
                "evolved_gas_specific_gravity": null,
                "evolved_gas_composition_id": null,
                "evolved_gas_composition": null,
                "average_residual_oil_mw": 179.43,
                "average_residual_oil_density": 0.8128,
                "average_residual_oil_density_unit": "g/cm3",
                "residual_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.019,
                            "mass_amount": 0.0127
                        }
                    ]
                },
                "pressure_unit": "psia",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",
                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 8513.0,
                        "is_saturation_pressure": true,
                        "gor": 2847.67,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.5407,
                        "oil_density": 0.5714,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "gor": 0.0,
                        "liberated_gas": 2847.67,
                        "oil_fvf": 1.0975,
                        "oil_density": 0.7471,
                        "gas_z_factor": 0.9887,
                        "gas_specific_gravity": 2.1686,
                        "gas_density": null,
                        "gas_viscosity": 0.00925
                    }
                ]
            }
    ]
}

     - 1.4.7 If the page contains a Viscosity experiment (VISCO) table:
       - Identify measurement units for parameters.
       - Viscosity table has pressure as y-axis and viscosities as x-axis
       - Extract viscosity data and structure into "experiments".
       - Never come up with new structures or keys, just fill up in the specified JSON schema.

        Example JSON:

{
    "page": ...,
    "sample_name": ...,
    "experiments": [
        {
            "name": "Oil Viscosity",
            "type": "VISCO",
            "temperature": 229.7,
            "temperature_unit": "F",
            "pressure_unit": "psia",
            "oil_viscosity_unit": "cP",
            "gas_viscosity_unit": "cP",
            "stages": [
                {
                    "visco_id": 1018,
                    "pressure": 5413.0,
                    "oil_viscosity": 0.088,
                    "gas_viscosity": null
                },
                {
                    // Other stages ...
                },
                {
                    "visco_id": 1018,
                    "pressure": 13.0,
                    "oil_viscosity": 0.749,
                    "gas_viscosity": 0.00925
                }
            ]
        }
    ]
}

2. If any summary data or descriptive information is found:
   - Include it as key "Other_information", outside the "experiments" key in JSON.

   Example JSON:
   {
       "solution_gas_oil_ratio": 100,
       "separator_volume_factor": 300,
       "solution_gas_oil_ratio_unit": "scf/stb",
       "separator_volume_factor_unit": "bbl",
       ......
   }

3. Finally, you must stick to the following units

Unit shown | Unit in JSON
--------|-----------
g/cc | g/cm3
mole% | %
Vol/Vol | Sm3/Sm3
scf/sep bbl | scf/bbl
kg/Sm3 | kg/m3
psi | psia
Air=1 | SG

4. If you find Figure in the page, DO NOT extract any data from it. Just extract the title into json.

  {
    "figure_title": "Plot of dewpoint pressure"
  }

5. Dealing with Paraffinic-Naphtenes-Aromatics (PNA) composition

In some cases, PNA can be reported in compositional table, DLE liberated gas, or MSS liberated gas.

For example:

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| n-Hexane          | 0.086   | 0.351     | 86.2  |
| iso-Paraffins     | 0.154   | 0.627     | 86.2  |
| Naphthenes        | 0.033   | 0.109     | 70.1  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |
| n-Heptane         | 0.014   | 0.067     | 100.2 |
| iso-Paraffins     | 0.038   | 0.181     | 100.2 |
| Naphthenes        | 0.116   | 0.476     | 86.6  |
| Aromatics         | 0.030   | 0.112     | 78.1  |

You see for every C6 total and C7 total, there are iso-Paraffins (P), Naphthenes (N), and Aromatics (A).

Remove these PNA, so you just have C6 total and C7 total.

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |

From here, you just extract into corresponding JSON schema as defined in instructions 1 until 4
"
            }
          ]
        },
        {
          "role":"model",
          "parts":[
            {
              "text":"{
    "page": "31 of 95",
    "sample_name": "WFL-01645",
    "uncorrected": true,
    "last_component": "C36+",
    "flashed_oil_mw": 185.5,
    "flashed_oil_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Carbon Dioxide",
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Hydrogen Sulphide",
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Methane",
                "molar_amount": 0.081,
                "mass_amount": 0.007
            },
            {
                "input_name": "Ethane",
                "molar_amount": 0.191,
                "mass_amount": 0.031
            },
            {
                "input_name": "Propane",
                "molar_amount": 0.265,
                "mass_amount": 0.063
            },
            {
                "input_name": "iso-Butane",
                "molar_amount": 0.6,
                "mass_amount": 0.188
            },
            {
                "input_name": "n-Butane",
                "molar_amount": 0.657,
                "mass_amount": 0.206
            },
            {
                "input_name": "Neopentane",
                "molar_amount": 0.015,
                "mass_amount": 0.006
            },
            {
                "input_name": "iso-Pentane",
                "molar_amount": 2.365,
                "mass_amount": 0.92
            },
            {
                "input_name": "n-Pentane",
                "molar_amount": 1.501,
                "mass_amount": 0.584
            },
            {
                "input_name": "Hexanes",
                "molar_amount": 5.503,
                "mass_amount": 2.513
            },
            {
                "input_name": "Heptanes",
                "molar_amount": 10.632,
                "mass_amount": 5.193
            },
            {
                "input_name": "Octanes",
                "molar_amount": 12.397,
                "mass_amount": 6.906
            },
            {
                "input_name": "Nonanes",
                "molar_amount": 8.096,
                "mass_amount": 5.137
            },
            {
                "input_name": "Decanes",
                "molar_amount": 6.496,
                "mass_amount": 4.693
            },
            {
                "input_name": "Undecanes",
                "molar_amount": 5.08,
                "mass_amount": 4.026
            },
            {
                "input_name": "Dodecanes",
                "molar_amount": 4.509,
                "mass_amount": 3.914
            },
            {
                "input_name": "Tridecanes",
                "molar_amount": 4.901,
                "mass_amount": 4.624
            },
            {
                "input_name": "Tetradecanes",
                "molar_amount": 4.207,
                "mass_amount": 4.31
            },
            {
                "input_name": "Pentadecanes",
                "molar_amount": 4.112,
                "mass_amount": 4.567
            },
            {
                "input_name": "Hexadecanes",
                "molar_amount": 3.279,
                "mass_amount": 3.925
            },
            {
                "input_name": "Heptadecanes",
                "molar_amount": 2.885,
                "mass_amount": 3.687
            },
            {
                "input_name": "Octadecanes",
                "molar_amount": 2.688,
                "mass_amount": 3.637
            },
            {
                "input_name": "Nonadecanes",
                "molar_amount": 2.313,
                "mass_amount": 3.28
            },
            {
                "input_name": "Eicosanes",
                "molar_amount": 1.732,
                "mass_amount": 2.568
            },
            {
                "input_name": "C21",
                "molar_amount": 1.532,
                "mass_amount": 2.403
            },
            {
                "input_name": "C22",
                "molar_amount": 1.34,
                "mass_amount": 2.168
            },
            {
                "input_name": "C23",
                "molar_amount": 1.167,
                "mass_amount": 1.963
            },
            {
                "input_name": "C24",
                "molar_amount": 1.032,
                "mass_amount": 1.803
            },
            {
                "input_name": "C25",
                "molar_amount": 0.89,
                "mass_amount": 1.617
            },
            {
                "input_name": "C26",
                "molar_amount": 0.836,
                "mass_amount": 1.573
            },
            {
                "input_name": "C27",
                "molar_amount": 0.748,
                "mass_amount": 1.451
            },
            {
                "input_name": "C28",
                "molar_amount": 0.683,
                "mass_amount": 1.37
            },
            {
                "input_name": "C29",
                "molar_amount": 0.641,
                "mass_amount": 1.32
            },
            {
                "input_name": "C30",
                "molar_amount": 0.596,
                "mass_amount": 1.266
            },
            {
                "input_name": "C31",
                "molar_amount": 0.53,
                "mass_amount": 1.155
            },
            {
                "input_name": "C32",
                "molar_amount": 0.468,
                "mass_amount": 1.048
            },
            {
                "input_name": "C33",
                "molar_amount": 0.418,
                "mass_amount": 0.959
            },
            {
                "input_name": "C34",
                "molar_amount": 0.372,
                "mass_amount": 0.877
            },
            {
                "input_name": "C35",
                "molar_amount": 0.357,
                "mass_amount": 0.856
            },
            {
                "input_name": "C36+",
                "molar_amount": 3.882,
                "mass_amount": 13.186
            }
        ]
    },
    "flashed_gas_mw": 23.9,
    "flashed_gas_specific_gravity": 0.825,
    "flashed_gas_specific_gravity_unit": "SG",
    "flashed_gas_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "molar_amount": 0.109,
                "mass_amount": 0.128
            },
            {
                "input_name": "Carbon Dioxide",
                "molar_amount": 6.608,
                "mass_amount": 12.166
            },
            {
                "input_name": "Hydrogen Sulphide",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "molar_amount": 74.123,
                "mass_amount": 49.743
            },
            {
                "input_name": "Ethane",
                "molar_amount": 9.031,
                "mass_amount": 11.36
            },
            {
                "input_name": "Propane",
                "molar_amount": 2.634,
                "mass_amount": 4.858
            },
            {
                "input_name": "iso-Butane",
                "molar_amount": 2.132,
                "mass_amount": 5.185
            },
            {
                "input_name": "n-Butane",
                "molar_amount": 1.39,
                "mass_amount": 3.38
            },
            {
                "input_name": "Neopentane",
                "molar_amount": 0.033,
                "mass_amount": 0.098
            },
            {
                "input_name": "iso-Pentane",
                "molar_amount": 1.511,
                "mass_amount": 4.559
            },
            {
                "input_name": "n-Pentane",
                "molar_amount": 0.738,
                "mass_amount": 2.226
            },
            {
                "input_name": "Hexanes",
                "molar_amount": 0.791,
                "mass_amount": 2.782
            },
            {
                "input_name": "Heptanes",
                "molar_amount": 0.639,
                "mass_amount": 2.365
            },
            {
                "input_name": "Octanes",
                "molar_amount": 0.215,
                "mass_amount": 0.915
            },
            {
                "input_name": "Nonanes",
                "molar_amount": 0.034,
                "mass_amount": 0.168
            },
            {
                "input_name": "Decanes",
                "molar_amount": 0.01,
                "mass_amount": 0.056
            },
            {
                "input_name": "Undecanes",
                "molar_amount": 0.002,
                "mass_amount": 0.011
            },
            {
                "input_name": "Dodecanes",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Tridecanes",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Tetradecanes",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Pentadecanes",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Hexadecanes",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Heptadecanes",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Octadecanes",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Nonadecanes",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Eicosanes",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C21",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C22",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C23",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C24",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C25",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C26",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C27",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C28",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C29",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C30",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C31",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C32",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C33",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C34",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C35",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C36+",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            }
        ]
    },
    "recombined_fluid_mw": 98.8,
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "molar_amount": 0.058,
                "mass_amount": 0.017
            },
            {
                "input_name": "Carbon Dioxide",
                "molar_amount": 3.543,
                "mass_amount": 1.578
            },
            {
                "input_name": "Hydrogen Sulphide",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "molar_amount": 39.781,
                "mass_amount": 6.456
            },
            {
                "input_name": "Ethane",
                "molar_amount": 4.931,
                "mass_amount": 1.5
            },
            {
                "input_name": "Propane",
                "molar_amount": 1.535,
                "mass_amount": 0.685
            },
            {
                "input_name": "iso-Butane",
                "molar_amount": 1.422,
                "mass_amount": 0.836
            },
            {
                "input_name": "n-Butane",
                "molar_amount": 1.05,
                "mass_amount": 0.618
            },
            {
                "input_name": "Neopentane",
                "molar_amount": 0.025,
                "mass_amount": 0.018
            },
            {
                "input_name": "iso-Pentane",
                "molar_amount": 1.907,
                "mass_amount": 1.392
            },
            {
                "input_name": "n-Pentane",
                "molar_amount": 1.092,
                "mass_amount": 0.797
            },
            {
                "input_name": "Hexanes",
                "molar_amount": 2.977,
                "mass_amount": 2.548
            },
            {
                "input_name": "Heptanes",
                "molar_amount": 5.274,
                "mass_amount": 4.826
            },
            {
                "input_name": "Octanes",
                "molar_amount": 5.865,
                "mass_amount": 6.129
            },
            {
                "input_name": "Nonanes",
                "molar_amount": 3.773,
                "mass_amount": 4.493
            },
            {
                "input_name": "Decanes",
                "molar_amount": 3.018,
                "mass_amount": 4.092
            },
            {
                "input_name": "Undecanes",
                "molar_amount": 2.357,
                "mass_amount": 3.505
            },
            {
                "input_name": "Dodecanes",
                "molar_amount": 2.091,
                "mass_amount": 3.407
            },
            {
                "input_name": "Tridecanes",
                "molar_amount": 2.273,
                "mass_amount": 4.024
            },
            {
                "input_name": "Tetradecanes",
                "molar_amount": 1.951,
                "mass_amount": 3.751
            },
            {
                "input_name": "Pentadecanes",
                "molar_amount": 1.907,
                "mass_amount": 3.975
            },
            {
                "input_name": "Hexadecanes",
                "molar_amount": 1.521,
                "mass_amount": 3.416
            },
            {
                "input_name": "Heptadecanes",
                "molar_amount": 1.338,
                "mass_amount": 3.209
            },
            {
                "input_name": "Octadecanes",
                "molar_amount": 1.247,
                "mass_amount": 3.165
            },
            {
                "input_name": "Nonadecanes",
                "molar_amount": 1.073,
                "mass_amount": 2.855
            },
            {
                "input_name": "Eicosanes",
                "molar_amount": 0.803,
                "mass_amount": 2.235
            },
            {
                "input_name": "C21",
                "molar_amount": 0.71,
                "mass_amount": 2.091
            },
            {
                "input_name": "C22",
                "molar_amount": 0.622,
                "mass_amount": 1.887
            },
            {
                "input_name": "C23",
                "molar_amount": 0.541,
                "mass_amount": 1.708
            },
            {
                "input_name": "C24",
                "molar_amount": 0.479,
                "mass_amount": 1.569
            },
            {
                "input_name": "C25",
                "molar_amount": 0.413,
                "mass_amount": 1.407
            },
            {
                "input_name": "C26",
                "molar_amount": 0.388,
                "mass_amount": 1.369
            },
            {
                "input_name": "C27",
                "molar_amount": 0.347,
                "mass_amount": 1.263
            },
            {
                "input_name": "C28",
                "molar_amount": 0.317,
                "mass_amount": 1.192
            },
            {
                "input_name": "C29",
                "molar_amount": 0.297,
                "mass_amount": 1.149
            },
            {
                "input_name": "C30",
                "molar_amount": 0.276,
                "mass_amount": 1.102
            },
            {
                "input_name": "C31",
                "molar_amount": 0.246,
                "mass_amount": 1.005
            },
            {
                "input_name": "C32",
                "molar_amount": 0.217,
                "mass_amount": 0.912
            },
            {
                "input_name": "C33",
                "molar_amount": 0.194,
                "mass_amount": 0.835
            },
            {
                "input_name": "C34",
                "molar_amount": 0.173,
                "mass_amount": 0.763
            },
            {
                "input_name": "C35",
                "molar_amount": 0.165,
                "mass_amount": 0.745
            },
            {
                "input_name": "C36+",
                "molar_amount": 1.801,
                "mass_amount": 11.476
            }
        ]
    }
}"
            }
          ]
        }
    ]}
{"contents":[
        {
          "role":"user",
          "parts":[
            {
              "fileData":{
                "mimeType":"image/jpeg",
                "fileUri":"https://github.com/yohanesnuwara/sft-finetune-gemini/blob/main/images/RS-112408%20Final%20Report%20Realgrunnen_page-0036.jpg"
              }
            },
            {
              "text":"OCR the following page into complete JSON.

Your task is to parse and extract as many infomation as possible from the page and put into JSON like specified

Never come up with new structures or keys, just fill up in the specified JSON schema.

Page can be either full texts, full table, or texts with table.

1. Identify the type of page:
   - 1.1 If the page consists only of texts:

      Parse sentences into JSON and do not give full sentence or summary

      Example sentence:

      "Two sets of sample (CL01 & CL02) is transferred at 15 deg C and pressure 1 atm" (page A.1)

      JSON response

      {
          "page": "A.1",
          "conditioning": {
              "samples": ["CL01", "CL02"],
              "transfer_temp": 15,
              "transfer_temp_unit": "C",
              "transfer_pressure": 1,
              "transfer_pressure_unit": "atm"
              // ...
          }
      }

      Try to find these parameters inferred from "flash" keyword
      {
        "sep_pressure": ...,
        "sep_pressure_unit": ...,
        "sep_temperature": ...,
        "sep_temperature_unit": ...,
      }



   - 1.2 If the page consists of table of contents
     - Put each table title from the list in key "table_title"
     - Identify the "keyword" in the table title, into these categories
        - If mention composition then "composition"
        - If mention constant composition expansion or constant mass expansion then "CCE"
        - If mention constant volume depletion then "CVD"
        - If mention differential liberation expansion then "DLE"
        - If mention multistage separator then "MSS"
        - If mention viscosity then "VISCO"
     - Identify the "sample_name" from keywords like Cylinder, Sample, Chamber number, or if it is sample pair
     - Identify the "page_number"

    JSON response:

    {
        "page": "....",
        "list_content": [
            {
                "title": "...",
                "keyword": "composition",
                "sample_name": null,
                "page_number": 1
            },
            {
                "title": "...",
                "keyword": "CCE"
                "sample_name": "A01",
                "page_number": 2
            },
            {
                "title": "...",
                "keyword": "CVD",
                "sample_name": "A01+A02",
                "page_number": 3
            }
        ]
    }

   - 1.3 If the page consists of texts with table:
     - 1.3.1 If the page displays "sample inventory" or "sample summary" table:
       - This type of page can be recognized by structure of the table. If the table has Sample ID/name or Bottle no in the y-axis, and properties in the x-axis
       - Properties reported in this summary table such as sampling depth, GOR, density, molecular weight, reservoir temperature, reservoir pressure (Pres), viscosity
       - Do not confuse this table with experiment table
       - Extract data into the "sample_inventory" JSON schema.
       - Extract other relevant information into "Other_information".
       - If you do not find any of the keys, DO NOT create the key
       - Identify title of each table and decide the "type"
            - If mention MDT oil, then "type": "OFT"
            - If mention MDT water, then "type": "WATER"

       Example JSON:
        {
          "page": "...",
          "sample_inventory": {
            "data": [
              {
                "sample_name": "1.01",
                "type": "OFT", # put "OFT" if mention MDT oil, "WATER" if mention MDT water
                "sampling_date": "2023-04-26", # If mention Transfer Date
                "well_id": "23/1", # Well name
                "basin_id": null,
                "sub_basin_id": null,
                "field_id": "Volve", # Field name
                "field_segment_id": null,
                "formation_id": "Realgrunnen", # Formation name
                "formation_zone_id": null,
                "reservoir_pressure": 182.0,
                "reservoir_pressure_unit": "bara",
                "reservoir_temperature": 69.8,
                "reservoir_temperature_unit": "C",
                "true_vertical_depth": 1929.0, # If mention sampling depth m TVDSS (true vertical depth sub sea)
                "true_vertical_depth_unit": "m",
                "measured_depth": 1984.5, # If mention sampling depth m MD (measured depth)
                "measured_depth_unit": "m",
                "pressure_at_lab": 400.0,
                "pressure_at_lab_unit": "bara",
                "temperature_at_lab": 80.0,
                "temperature_at_lab_unit": "C",
                "pressure_when_sampled": 100,
                "pressure_when_sampled_unit": "bara",
                "temperature_when_sampled": 23,
                "temperature_when_sampled_unit": "C",
                "top_perforation_depth": 2000,
                "top_perforation_depth_unit": "m",
                "bottom_perforation_depth": 3000,
                "bottom_perforation_depth_unit": "m",
                "transfer_pressure": 450.0,
                "transfer_pressure_unit": "bara",
                "transfer_temperature": 80.0,
                "transfer_temperature_unit": "C",
                "drawdown_pressure": 100,
                "drawdown_pressure_unit": "bara",
                "flashed_oil_contamination": 2.0, # If mention Mud filtrate contamination in STO
                "flashed_oil_contamination": "mass%", # If the unit mentioned is Wt%
                "fluid_type": "Oil",
                "mud_base": "Oil", # put "Oil" if mention OBM, or "Water" if mention WBM
                //... # Other parameters
              },
              {
                "Sample Type": "REC", # If mention Recombined
                # Same as above
                //...
              }
            ]
          },
          "Other_information": {
            "remarks": "Additional details can be provided here."
          }
        }

   - 1.4 If the page consists of a table:
     - 1.4.1 If the page consists of an Information table or descriptions:
       - Extract physical parameters and values into a structured JSON format.
       - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
         - If found, set "sample_name" accordingly.
         - If not found, set "sample_name" to null.

       Important data:

       - If you find "density of stock tank oil", put into key "flashed_oil_density", then fill "flashed_oil_density_unit"
       - If you see gas oil ratio (GOR), put into key "recombined_fluid_gor", then fill "recombined_fluid_gor_unit

       Getting 'flashed_oil_temperature':
       If you see the following

        ```
        Separation conditions:    From:  80.0 °C and   400 bara
                                  To:    25.5 °C and   atm. pressure
        ```

       In this case, "flashed_oil_temperature": 25.5, "flashed_oil_temperature_unit": "C"
       Pick the number after "To:   " before "and atm.pressure"

       Example JSON:
        {
            "page": "...",
            "sample_name": "...",
            "parameter1": "...",
            "parameter1_unit": "...",
            "parameter2": "...",
            "parameter2_unit": "...",
            "parameter3": "...",
            "parameter4_unit": "...",

            # Important data
            "flashed_oil_density": ...,
            "flashed_oil_density_unit": "...",
            "flashed_oil_temperature": 20.5,
            "flashed_oil_temperature_unit": "C",
            "recombined_fluid_gor": ...,
            "recombined_fluid_gor_unit": "...",
            et cetera ...
        }

     - 1.4.2 If the page contains a Composition table :

        - Dynamically identify each fluid-type group by reading the top header row(s), matching these synonyms:
          - flashed_oil ↔ "Stock tank oil", "Flashed Liquid", "Stock tank oil"
          - flashed_gas ↔ "Stock tank gas", "Flashed gas"
          - recombined_fluid ↔ "Monophasic fluid", "Reservoir fluid"
        - Under each fluid-type header, locate its two sub-columns: one labeled "Mole %" → molar_amount, the other "Weight %" → mass_amount.
        - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
            - If found, set "sample_name" accordingly.
            - Sample name is just like ID consist of letter and number, without C10+ or C36+
            - If not found, set "sample_name" to null.
        - If the table title says "uncorrected" or "corrected", set "uncorrected": true/false.
        - Identify "last_component" from the final row label (e.g. "C36+"), include units on every top-level number, and fill only the keys in the prescribed schema—do not invent new ones.

        IMPORTANT!!!
        - In case there is blank cell in the table (value not reported)
        - If you do not find BOTH molar amount and mass amount of a component, do not extract it into JSON

        Example table with blanks:

      |Component         | Stock tank gas    | Stock tank oil    |  Reservoir fluid   | Mol weight  |
      |Mole%             | Weight% | Mole%   | Weight% | Mole%   |  Mole%   | Weight% |             |
      |Nitrogen          | 0.157   | 0.183   |         |         |  0.084   | 0.024   | 28.02       |
      |Carbon Dioxide    | 6.582   | 12.048  |         |         |  3.509   | 1.555   | 44.01       |
      |Hydrogen Sulphide | 0       | 0       |         |         |  0       | 0       | 34.08       |
      |Methane           | 73.927  | 49.324  | 0.115   | 0.01    |  39.466  | 6.376   | 16.04       |
      |Ethane            | 8.997   | 11.251  | 0.222   | 0.036   |  4.9     | 1.484   | 30.07       |


        Result JSON (referring to the table):

{
    "page": ...,
    "sample_name": "A001", # The name of sample
    "uncorrected": true, # false or null
    "last_component": "C10+",
    "flashed_oil_mw": 151.9, # oil molecular weight or MW
    "flashed_oil_density": 0.777, # oil density at stock-tank condition 15 degC
    "flashed_oil_density_unit": "g/cm3", # g/cm3, kg/m3
    "flashed_oil_temperature": 60.0, # temperature at flash
    "flashed_oil_temperature_unit": "F", # F, C, K, R
    "flashed_oil_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide molar_amount and mass_amount is null, so no need to extract
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 0.115,
                "mass_amount": 0.01
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 0.222,
                "mass_amount": 0.036
            }
        ]
    },
    "flashed_gas_mw": 23.4, # gas molecular weight or MW
    "flashed_gas_specific_gravity": 0.808, # also called relative density or ideal
    "flashed_gas_specific_gravity_unit": "SG", # if unit not mentioned then most likely SG
    "flashed_gas_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide has molar_amount and mass_amount, so extract it
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.157,
                "mass_amount": 0.183
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 6.582,
                "mass_amount": 12.048
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 73.997,
                "mass_amount": 49.324
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 8.997,
                "mass_amount": 11.251
            }
        ]
    },

    # Recombined is sometimes called as Reservoir Fluid or Monophasic
    "recombined_fluid_mw": 30.2, # reservoir fluid MW
    "recombined_fluid_gor": 12200.8, # Gas oil ratio or gas liquid ratio (GLR) or Rs
    "recombined_fluid_gor_unit": "scf/STB", # scf/STB, Sm3/Sm3, Sm3/m3, scf/bbl
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.084,
                "mass_amount": 0.024
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 3.509,
                "mass_amount": 1.555
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 39.466,
                "mass_amount": 6.376
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 4.9,
                "mass_amount": 1.484
            }
        ]
    }
}
     - 1.4.3 If the page contains a Constant Composition Expansion (CCE) or Constant Mass Expansion (CME) table:
       - Identify measurement units for parameters.
       - Always put as "CCE" not "CME"
       - Extract data and structure into the "experiments" JSON key.
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Stages 'order' key must always start from 0
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column name | Key
       --------|-----------
       Relative Volume (column) | relative_total_volume
       Relative Volumes (Vs/Vs,BP) | relative_total_volume
       RLD (column) | relative_oil_volume
       % Liq/Sat (Vliq/Vsat) | relative_oil_volume

       Note: relative_oil_volume always null BEFORE the saturation_pressure=True

       - You must stick to the following units

        Variable | Unit
        --------|-----------
        relative_total_volume_unit | Vtot/Vsat

       Example JSON:


{
    "page" : ...,
    "sample_name": ...,
    "experiments": [
        {
            "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
            "sample_name": 1184,
            "name": "Constant Composition Expansion",
            "type": "CCE",
            "temperature": 106.0,
            "temperature_unit": "C",
            "pressure_unit": "psia",
            "relative_oil_volume_unit": "Vo/Vsat (%)",
            "single_phase_density_unit": "g/cm3",
            "relative_total_volume_unit": "Vtot/Vsat",
            "stages": [
                {
                    "pressure": 9000.0,
                    "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                    "relative_oil_volume": null,
                    "relative_total_volume": 0.79,
                    "single_phase_density": 0.422,
                    "z_factor": 1.407
                },
                // Other stages ...
                {
                    "pressure": 3011.0,
                    "is_saturation_pressure": false,
                    "relative_oil_volume": 14.37,
                    "relative_total_volume": 1.315,
                    "single_phase_density": null,
                    "z_factor": null
                }
            ]
        }
    ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) COMPOSITION:
       - You put the page in this category if you see keywords "Constant Volume Depletion" and chemical component
       - Please Read the WHOLE COLUMNS of TABLE
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true

       - If the columns like this: 2600 psia, 2010 psia, 1000 psia, Residual Oil
          - Put the pressures columns inside Liberated Gas schema
          - Put the Residual Oil column inside Final Stage Oil schema

       - Liberated Gas structure:
          - Put each of the "pressure" inside "stages" key
          - Put ALL the "components" and its "molar_amount" inside each "pressure" which it refers to

        Structure:

{
  "sample_name": null,
  "experiments": [
    {
      "sample_name": null,
      "continued": false,
      "saturation_pressure_type": "Dewpoint",
      "name": "Constant Volume Depletion",
      "type": "CVD",
      "temperature": 106.0,
      "temperature_unit": "C",

      # First type
      "liberated_gas_compositions": {
        "components": [
          {
            "input_name": "CO2",
            "mw": 44.01
          },
          {
            "input_name": "Other",
            "mw": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0
          }
        ],
        "stages": [
          {
            "pressure": 2600,
            "composition": [
              {
                "component_name": "CO2",
                "molar_amount": 0.305
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "C30+",
                "molar_amount": 0.087
              }
            ]
          },
          {
            "pressure": 1300,
            "composition": [
              {
                "component_name": "2M-C6",
                "molar_amount": 0.123
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "Toluene",
                "molar_amount": 0.037
              }
            ]
          }
        ]
      },

       - Residual Oil structure:
          - Put ALL the "components" and its "molar_amount" inside "composition" key
          - Get the "final_stage_oil_mw" from the last row of table if mentioning "MW"

        Structure:

      # Second type
      "final_stage_oil_mw": 100.14,
      "final_stage_oil_density": 630.0,
      "final_stage_oil_density_unit": "kg/m3",
      "stock_tank_oil_density": 630.0,
      "stock_tank_oil_density_unit": "kg/m3",
      "final_stage_oil_composition": {
        "components": [
          {
            "input_name": "CO2",
            "mw": null,
            "molar_amount": 0.213,
            "mass_amount": null
          },
          {
            "input_name": "Other",
            "mw": null,
            "molar_amount": null,
            "mass_amount": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0,
            "molar_amount": 0.553,
            "mass_amount": null
          }
        ]
      }
    }
  ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) PROPERTIES table:
       - You put into this category If you see Pressure as row and Physical Properties as column (No composition)
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column Name | Key
       --------|-----------
       Total Recovery (mole %) | cumulative_moles_removed
       Liq. Density (g/cc) | oil_density

        Example JSON:

      {
          "sample_name": ..., # Put sample ID here
          "experiments": [
              {
                  "sample_name": ...,
                  "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                  "name": "Constant Volume Depletion",
                  "type": "CVD",
                  "temperature": 106.0,
                  "temperature_unit": "C",
                  "pressure_unit": "psia",
                  "oil_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_viscosity_unit": "...", # "cP"
                  "relative_oil_volume_unit": "...", # "%"
                  "incremental_moles_removed_unit": "...", # "%"
                  "cumulative_moles_removed_unit": "...", # "%"

                  # Properties data
                  "stages": [
                      # Fill here if the table displays properties as row and pressure as column, or otherwise
                      {
                          "pressure": 4661.0,
                          "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                          "relative_oil_volume": 0.0,
                          "incremental_moles_removed": null, # "%"
                          "cumulative_moles_removed": 0.0,
                          "oil_density": null,
                          "gas_z_factor": 0.922,
                          "gas_specific_gravity": null,
                          "gas_density": 0.339,
                          "gas_viscosity": 0.042,
                          "gas_plus_fraction_mw": null,
                      },
                      {
                          // Other stages ...
                      }
                      {
                          "pressure": 1300.0,
                          "is_saturation_pressure": false,
                          "relative_oil_volume": 13.18,
                          "incremental_moles_removed": null,
                          "cumulative_moles_removed": 67.06,
                          "oil_density": 0.63,
                          "gas_z_factor": 0.874,
                          "gas_specific_gravity": null,
                          "gas_density": 0.075,
                          "gas_viscosity": 0.015,
                          "gas_plus_fraction_mw": null,
                      }
                  ]
              }
          ]
      }

     - 1.4.5 If the page contains a Multi-Stage Separator (MSS) or Three Stage Separator table:
       - If you see "Two Stage", "Three Stage", "Four Stage" Separator, it is MSS. But, "Single Stage" is NOT MSS
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Stock tank oil data: If the title mention stock tank or tank oil
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If you see "Pressure Atm. bara", it means "pressure": 1 (atmospheric pressure means 1 bara)
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON

        Exception:
       - If you find page with title "Bo and GOR from Three Stage Separator test during depletion using the results from Differential Liberation ...", DO NOT extract the data.

        Example JSON:
{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                    "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                    "name": "Multi-stage Separator",
                    "type": "MSS",
                    "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "Dodecanes Plus",
                            "mw": null
                        }
                    ],
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.7579
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0024
                                }
                            ]
                        },
                        {
                            "stage_number": 1,
                            "composition": [
                                {
                                    "stage_number": 1,
                                    "component_name": "C1",
                                    "molar_amount": 0.6791
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 1,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0022
                                }
                            ]
                        },
                        {
                            "stage_number": 2,
                            "composition": [
                                {
                                    "stage_number": 2,
                                    "component_name": "C1",
                                    "molar_amount": 0.1999
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 2,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.019
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Stock tank oil
                "stock_tank_oil_molecular_weight": 145.78,
                "stock_tank_oil_density": 0.7843,
                "stock_tank_oil_density_unit": "g/cm3",
                "stock_tank_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.013,
                            "mass_amount": 0.0107
                        }
                    ]
                },
                "pressure_unit": "psia",
                "temperature_unit": "F",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",

                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 3724.0,
                        "is_saturation_pressure": true,
                        "temperature": 230.0,
                        "gor": 1802.83,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.1783,
                        "oil_density": 0.5016,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "temperature": 60.0,
                        "gor": 0.0,
                        "liberated_gas": 1802.83,
                        "oil_fvf": 1.0,
                        "oil_density": 0.7843,
                        "gas_z_factor": 0.9892,
                        "gas_specific_gravity": 1.316,
                        "gas_density": null,
                        "gas_viscosity": null
                    }
                ]
            }
    ]
}


     - 1.4.6 If the page contains a Differential Liberation (DLE) or Differential Vaporization (DV) table:
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Residual oil data: If mention residual oil or final stage
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity
       gas-oil ratio solution** | gor

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON
       ** in "Gas-Oil Ratio" column if you find "solution" and "liberated", take the "solution" and put to "gor" key in JSON

        Example JSON:

{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                "name": "Differential Liberation Expansion",
                "type": "DLE",
                "temperature": 229.7,
                "temperature_unit": "F",
                "dle_experiment_type": "Standard DLE Experiment",

                # // First part, Liberated gas
                "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "N2",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "C7+",
                            "mw": 114.01
                        }
                    ],
                    # Fill here if the table displays component as row and pressure as column, or otherwise
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.6859 # Composition in mole percent
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0085
                                }
                            ]
                        },
                        {
                            // Other stages ...
                        },
                        {
                            "stage_number": 9,
                            "composition": [
                                {
                                    "stage_number": 9,
                                    "component_name": "C1",
                                    "molar_amount": 0.1309
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 9,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0629
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Residual oil
                "evolved_gas_specific_gravity": null,
                "evolved_gas_composition_id": null,
                "evolved_gas_composition": null,
                "average_residual_oil_mw": 179.43,
                "average_residual_oil_density": 0.8128,
                "average_residual_oil_density_unit": "g/cm3",
                "residual_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.019,
                            "mass_amount": 0.0127
                        }
                    ]
                },
                "pressure_unit": "psia",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",
                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 8513.0,
                        "is_saturation_pressure": true,
                        "gor": 2847.67,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.5407,
                        "oil_density": 0.5714,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "gor": 0.0,
                        "liberated_gas": 2847.67,
                        "oil_fvf": 1.0975,
                        "oil_density": 0.7471,
                        "gas_z_factor": 0.9887,
                        "gas_specific_gravity": 2.1686,
                        "gas_density": null,
                        "gas_viscosity": 0.00925
                    }
                ]
            }
    ]
}

     - 1.4.7 If the page contains a Viscosity experiment (VISCO) table:
       - Identify measurement units for parameters.
       - Viscosity table has pressure as y-axis and viscosities as x-axis
       - Extract viscosity data and structure into "experiments".
       - Never come up with new structures or keys, just fill up in the specified JSON schema.

        Example JSON:

{
    "page": ...,
    "sample_name": ...,
    "experiments": [
        {
            "name": "Oil Viscosity",
            "type": "VISCO",
            "temperature": 229.7,
            "temperature_unit": "F",
            "pressure_unit": "psia",
            "oil_viscosity_unit": "cP",
            "gas_viscosity_unit": "cP",
            "stages": [
                {
                    "visco_id": 1018,
                    "pressure": 5413.0,
                    "oil_viscosity": 0.088,
                    "gas_viscosity": null
                },
                {
                    // Other stages ...
                },
                {
                    "visco_id": 1018,
                    "pressure": 13.0,
                    "oil_viscosity": 0.749,
                    "gas_viscosity": 0.00925
                }
            ]
        }
    ]
}

2. If any summary data or descriptive information is found:
   - Include it as key "Other_information", outside the "experiments" key in JSON.

   Example JSON:
   {
       "solution_gas_oil_ratio": 100,
       "separator_volume_factor": 300,
       "solution_gas_oil_ratio_unit": "scf/stb",
       "separator_volume_factor_unit": "bbl",
       ......
   }

3. Finally, you must stick to the following units

Unit shown | Unit in JSON
--------|-----------
g/cc | g/cm3
mole% | %
Vol/Vol | Sm3/Sm3
scf/sep bbl | scf/bbl
kg/Sm3 | kg/m3
psi | psia
Air=1 | SG

4. If you find Figure in the page, DO NOT extract any data from it. Just extract the title into json.

  {
    "figure_title": "Plot of dewpoint pressure"
  }

5. Dealing with Paraffinic-Naphtenes-Aromatics (PNA) composition

In some cases, PNA can be reported in compositional table, DLE liberated gas, or MSS liberated gas.

For example:

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| n-Hexane          | 0.086   | 0.351     | 86.2  |
| iso-Paraffins     | 0.154   | 0.627     | 86.2  |
| Naphthenes        | 0.033   | 0.109     | 70.1  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |
| n-Heptane         | 0.014   | 0.067     | 100.2 |
| iso-Paraffins     | 0.038   | 0.181     | 100.2 |
| Naphthenes        | 0.116   | 0.476     | 86.6  |
| Aromatics         | 0.030   | 0.112     | 78.1  |

You see for every C6 total and C7 total, there are iso-Paraffins (P), Naphthenes (N), and Aromatics (A).

Remove these PNA, so you just have C6 total and C7 total.

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |

From here, you just extract into corresponding JSON schema as defined in instructions 1 until 4
"
            }
          ]
        },
        {
          "role":"model",
          "parts":[
            {
              "text":"{
    "page": "36 of 95",
    "sample_name": "SR-02520",
    "flashed_oil_temperature": 20.5,
    "flashed_oil_temperature_unit": "C",
    "recombined_fluid_gor": 124.3,
    "recombined_fluid_gor_unit": "Sm3/Sm3",
    "oil_fvf_at_reservoir_pressure": 1.342,
    "oil_fvf_at_reservoir_pressure_unit": "Sm3/Sm3",
    "oil_fvf_at_saturation_pressure": 1.344,
    "oil_fvf_at_saturation_pressure_unit": "Sm3/Sm3",
    "flashed_oil_density": 838.7,
    "flashed_oil_density_unit": "kg/m3",
    "oil_density_at_bubble_point": 719.2,
    "oil_density_at_bubble_point_unit": "kg/m3",
    "gas_specific_gravity": 0.838,
    "gas_specific_gravity_unit": "SG",
    "flashed_oil_mw": 186.1,
    "flashed_oil_mw_unit": "g/mol",
    "flashed_oil_c7_plus_mw": 199.0,
    "flashed_oil_c7_plus_mw_unit": "g/mol",
    "flashed_oil_c7_plus_density": 851.0,
    "flashed_oil_c7_plus_density_unit": "kg/m3",
    "flashed_oil_c10_plus_mw": 251.0,
    "flashed_oil_c10_plus_mw_unit": "g/mol",
    "flashed_oil_c10_plus_density": 871.0,
    "flashed_oil_c10_plus_density_unit": "kg/m3",
    "oil_density_by_pycnometer_at_bubble_point": 717.8,
    "oil_density_by_pycnometer_at_bubble_point_unit": "kg/m3",
    "Other_information": {
        "sampling_depth": 1726.04,
        "sampling_depth_unit": "m MD",
        "separator_temperature": 20.5,
        "separator_temperature_unit": "C",
        "separator_pressure": 1.0,
        "separator_pressure_unit": "atm",
        "standard_conditions_gas_temperature": 15.0,
        "standard_conditions_gas_temperature_unit": "C",
        "standard_conditions_gas_pressure": 1.01325,
        "standard_conditions_gas_pressure_unit": "bara",
        "standard_conditions_oil_temperature": 15.0,
        "standard_conditions_oil_temperature_unit": "C",
        "standard_conditions_oil_pressure": 1.0,
        "standard_conditions_oil_pressure_unit": "atm"
    }
}"
            }
          ]
        }
    ]}
{"contents":[
        {
          "role":"user",
          "parts":[
            {
              "fileData":{
                "mimeType":"image/jpeg",
                "fileUri":"https://github.com/yohanesnuwara/sft-finetune-gemini/blob/main/images/RS-112408%20Final%20Report%20Realgrunnen_page-0039.jpg"
              }
            },
            {
              "text":"OCR the following page into complete JSON.

Your task is to parse and extract as many infomation as possible from the page and put into JSON like specified

Never come up with new structures or keys, just fill up in the specified JSON schema.

Page can be either full texts, full table, or texts with table.

1. Identify the type of page:
   - 1.1 If the page consists only of texts:

      Parse sentences into JSON and do not give full sentence or summary

      Example sentence:

      "Two sets of sample (CL01 & CL02) is transferred at 15 deg C and pressure 1 atm" (page A.1)

      JSON response

      {
          "page": "A.1",
          "conditioning": {
              "samples": ["CL01", "CL02"],
              "transfer_temp": 15,
              "transfer_temp_unit": "C",
              "transfer_pressure": 1,
              "transfer_pressure_unit": "atm"
              // ...
          }
      }

      Try to find these parameters inferred from "flash" keyword
      {
        "sep_pressure": ...,
        "sep_pressure_unit": ...,
        "sep_temperature": ...,
        "sep_temperature_unit": ...,
      }



   - 1.2 If the page consists of table of contents
     - Put each table title from the list in key "table_title"
     - Identify the "keyword" in the table title, into these categories
        - If mention composition then "composition"
        - If mention constant composition expansion or constant mass expansion then "CCE"
        - If mention constant volume depletion then "CVD"
        - If mention differential liberation expansion then "DLE"
        - If mention multistage separator then "MSS"
        - If mention viscosity then "VISCO"
     - Identify the "sample_name" from keywords like Cylinder, Sample, Chamber number, or if it is sample pair
     - Identify the "page_number"

    JSON response:

    {
        "page": "....",
        "list_content": [
            {
                "title": "...",
                "keyword": "composition",
                "sample_name": null,
                "page_number": 1
            },
            {
                "title": "...",
                "keyword": "CCE"
                "sample_name": "A01",
                "page_number": 2
            },
            {
                "title": "...",
                "keyword": "CVD",
                "sample_name": "A01+A02",
                "page_number": 3
            }
        ]
    }

   - 1.3 If the page consists of texts with table:
     - 1.3.1 If the page displays "sample inventory" or "sample summary" table:
       - This type of page can be recognized by structure of the table. If the table has Sample ID/name or Bottle no in the y-axis, and properties in the x-axis
       - Properties reported in this summary table such as sampling depth, GOR, density, molecular weight, reservoir temperature, reservoir pressure (Pres), viscosity
       - Do not confuse this table with experiment table
       - Extract data into the "sample_inventory" JSON schema.
       - Extract other relevant information into "Other_information".
       - If you do not find any of the keys, DO NOT create the key
       - Identify title of each table and decide the "type"
            - If mention MDT oil, then "type": "OFT"
            - If mention MDT water, then "type": "WATER"

       Example JSON:
        {
          "page": "...",
          "sample_inventory": {
            "data": [
              {
                "sample_name": "1.01",
                "type": "OFT", # put "OFT" if mention MDT oil, "WATER" if mention MDT water
                "sampling_date": "2023-04-26", # If mention Transfer Date
                "well_id": "23/1", # Well name
                "basin_id": null,
                "sub_basin_id": null,
                "field_id": "Volve", # Field name
                "field_segment_id": null,
                "formation_id": "Realgrunnen", # Formation name
                "formation_zone_id": null,
                "reservoir_pressure": 182.0,
                "reservoir_pressure_unit": "bara",
                "reservoir_temperature": 69.8,
                "reservoir_temperature_unit": "C",
                "true_vertical_depth": 1929.0, # If mention sampling depth m TVDSS (true vertical depth sub sea)
                "true_vertical_depth_unit": "m",
                "measured_depth": 1984.5, # If mention sampling depth m MD (measured depth)
                "measured_depth_unit": "m",
                "pressure_at_lab": 400.0,
                "pressure_at_lab_unit": "bara",
                "temperature_at_lab": 80.0,
                "temperature_at_lab_unit": "C",
                "pressure_when_sampled": 100,
                "pressure_when_sampled_unit": "bara",
                "temperature_when_sampled": 23,
                "temperature_when_sampled_unit": "C",
                "top_perforation_depth": 2000,
                "top_perforation_depth_unit": "m",
                "bottom_perforation_depth": 3000,
                "bottom_perforation_depth_unit": "m",
                "transfer_pressure": 450.0,
                "transfer_pressure_unit": "bara",
                "transfer_temperature": 80.0,
                "transfer_temperature_unit": "C",
                "drawdown_pressure": 100,
                "drawdown_pressure_unit": "bara",
                "flashed_oil_contamination": 2.0, # If mention Mud filtrate contamination in STO
                "flashed_oil_contamination": "mass%", # If the unit mentioned is Wt%
                "fluid_type": "Oil",
                "mud_base": "Oil", # put "Oil" if mention OBM, or "Water" if mention WBM
                //... # Other parameters
              },
              {
                "Sample Type": "REC", # If mention Recombined
                # Same as above
                //...
              }
            ]
          },
          "Other_information": {
            "remarks": "Additional details can be provided here."
          }
        }

   - 1.4 If the page consists of a table:
     - 1.4.1 If the page consists of an Information table or descriptions:
       - Extract physical parameters and values into a structured JSON format.
       - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
         - If found, set "sample_name" accordingly.
         - If not found, set "sample_name" to null.

       Important data:

       - If you find "density of stock tank oil", put into key "flashed_oil_density", then fill "flashed_oil_density_unit"
       - If you see gas oil ratio (GOR), put into key "recombined_fluid_gor", then fill "recombined_fluid_gor_unit

       Getting 'flashed_oil_temperature':
       If you see the following

        ```
        Separation conditions:    From:  80.0 °C and   400 bara
                                  To:    25.5 °C and   atm. pressure
        ```

       In this case, "flashed_oil_temperature": 25.5, "flashed_oil_temperature_unit": "C"
       Pick the number after "To:   " before "and atm.pressure"

       Example JSON:
        {
            "page": "...",
            "sample_name": "...",
            "parameter1": "...",
            "parameter1_unit": "...",
            "parameter2": "...",
            "parameter2_unit": "...",
            "parameter3": "...",
            "parameter4_unit": "...",

            # Important data
            "flashed_oil_density": ...,
            "flashed_oil_density_unit": "...",
            "flashed_oil_temperature": 20.5,
            "flashed_oil_temperature_unit": "C",
            "recombined_fluid_gor": ...,
            "recombined_fluid_gor_unit": "...",
            et cetera ...
        }

     - 1.4.2 If the page contains a Composition table :

        - Dynamically identify each fluid-type group by reading the top header row(s), matching these synonyms:
          - flashed_oil ↔ "Stock tank oil", "Flashed Liquid", "Stock tank oil"
          - flashed_gas ↔ "Stock tank gas", "Flashed gas"
          - recombined_fluid ↔ "Monophasic fluid", "Reservoir fluid"
        - Under each fluid-type header, locate its two sub-columns: one labeled "Mole %" → molar_amount, the other "Weight %" → mass_amount.
        - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
            - If found, set "sample_name" accordingly.
            - Sample name is just like ID consist of letter and number, without C10+ or C36+
            - If not found, set "sample_name" to null.
        - If the table title says "uncorrected" or "corrected", set "uncorrected": true/false.
        - Identify "last_component" from the final row label (e.g. "C36+"), include units on every top-level number, and fill only the keys in the prescribed schema—do not invent new ones.

        IMPORTANT!!!
        - In case there is blank cell in the table (value not reported)
        - If you do not find BOTH molar amount and mass amount of a component, do not extract it into JSON

        Example table with blanks:

      |Component         | Stock tank gas    | Stock tank oil    |  Reservoir fluid   | Mol weight  |
      |Mole%             | Weight% | Mole%   | Weight% | Mole%   |  Mole%   | Weight% |             |
      |Nitrogen          | 0.157   | 0.183   |         |         |  0.084   | 0.024   | 28.02       |
      |Carbon Dioxide    | 6.582   | 12.048  |         |         |  3.509   | 1.555   | 44.01       |
      |Hydrogen Sulphide | 0       | 0       |         |         |  0       | 0       | 34.08       |
      |Methane           | 73.927  | 49.324  | 0.115   | 0.01    |  39.466  | 6.376   | 16.04       |
      |Ethane            | 8.997   | 11.251  | 0.222   | 0.036   |  4.9     | 1.484   | 30.07       |


        Result JSON (referring to the table):

{
    "page": ...,
    "sample_name": "A001", # The name of sample
    "uncorrected": true, # false or null
    "last_component": "C10+",
    "flashed_oil_mw": 151.9, # oil molecular weight or MW
    "flashed_oil_density": 0.777, # oil density at stock-tank condition 15 degC
    "flashed_oil_density_unit": "g/cm3", # g/cm3, kg/m3
    "flashed_oil_temperature": 60.0, # temperature at flash
    "flashed_oil_temperature_unit": "F", # F, C, K, R
    "flashed_oil_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide molar_amount and mass_amount is null, so no need to extract
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 0.115,
                "mass_amount": 0.01
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 0.222,
                "mass_amount": 0.036
            }
        ]
    },
    "flashed_gas_mw": 23.4, # gas molecular weight or MW
    "flashed_gas_specific_gravity": 0.808, # also called relative density or ideal
    "flashed_gas_specific_gravity_unit": "SG", # if unit not mentioned then most likely SG
    "flashed_gas_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide has molar_amount and mass_amount, so extract it
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.157,
                "mass_amount": 0.183
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 6.582,
                "mass_amount": 12.048
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 73.997,
                "mass_amount": 49.324
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 8.997,
                "mass_amount": 11.251
            }
        ]
    },

    # Recombined is sometimes called as Reservoir Fluid or Monophasic
    "recombined_fluid_mw": 30.2, # reservoir fluid MW
    "recombined_fluid_gor": 12200.8, # Gas oil ratio or gas liquid ratio (GLR) or Rs
    "recombined_fluid_gor_unit": "scf/STB", # scf/STB, Sm3/Sm3, Sm3/m3, scf/bbl
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.084,
                "mass_amount": 0.024
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 3.509,
                "mass_amount": 1.555
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 39.466,
                "mass_amount": 6.376
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 4.9,
                "mass_amount": 1.484
            }
        ]
    }
}
     - 1.4.3 If the page contains a Constant Composition Expansion (CCE) or Constant Mass Expansion (CME) table:
       - Identify measurement units for parameters.
       - Always put as "CCE" not "CME"
       - Extract data and structure into the "experiments" JSON key.
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Stages 'order' key must always start from 0
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column name | Key
       --------|-----------
       Relative Volume (column) | relative_total_volume
       Relative Volumes (Vs/Vs,BP) | relative_total_volume
       RLD (column) | relative_oil_volume
       % Liq/Sat (Vliq/Vsat) | relative_oil_volume

       Note: relative_oil_volume always null BEFORE the saturation_pressure=True

       - You must stick to the following units

        Variable | Unit
        --------|-----------
        relative_total_volume_unit | Vtot/Vsat

       Example JSON:


{
    "page" : ...,
    "sample_name": ...,
    "experiments": [
        {
            "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
            "sample_name": 1184,
            "name": "Constant Composition Expansion",
            "type": "CCE",
            "temperature": 106.0,
            "temperature_unit": "C",
            "pressure_unit": "psia",
            "relative_oil_volume_unit": "Vo/Vsat (%)",
            "single_phase_density_unit": "g/cm3",
            "relative_total_volume_unit": "Vtot/Vsat",
            "stages": [
                {
                    "pressure": 9000.0,
                    "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                    "relative_oil_volume": null,
                    "relative_total_volume": 0.79,
                    "single_phase_density": 0.422,
                    "z_factor": 1.407
                },
                // Other stages ...
                {
                    "pressure": 3011.0,
                    "is_saturation_pressure": false,
                    "relative_oil_volume": 14.37,
                    "relative_total_volume": 1.315,
                    "single_phase_density": null,
                    "z_factor": null
                }
            ]
        }
    ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) COMPOSITION:
       - You put the page in this category if you see keywords "Constant Volume Depletion" and chemical component
       - Please Read the WHOLE COLUMNS of TABLE
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true

       - If the columns like this: 2600 psia, 2010 psia, 1000 psia, Residual Oil
          - Put the pressures columns inside Liberated Gas schema
          - Put the Residual Oil column inside Final Stage Oil schema

       - Liberated Gas structure:
          - Put each of the "pressure" inside "stages" key
          - Put ALL the "components" and its "molar_amount" inside each "pressure" which it refers to

        Structure:

{
  "sample_name": null,
  "experiments": [
    {
      "sample_name": null,
      "continued": false,
      "saturation_pressure_type": "Dewpoint",
      "name": "Constant Volume Depletion",
      "type": "CVD",
      "temperature": 106.0,
      "temperature_unit": "C",

      # First type
      "liberated_gas_compositions": {
        "components": [
          {
            "input_name": "CO2",
            "mw": 44.01
          },
          {
            "input_name": "Other",
            "mw": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0
          }
        ],
        "stages": [
          {
            "pressure": 2600,
            "composition": [
              {
                "component_name": "CO2",
                "molar_amount": 0.305
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "C30+",
                "molar_amount": 0.087
              }
            ]
          },
          {
            "pressure": 1300,
            "composition": [
              {
                "component_name": "2M-C6",
                "molar_amount": 0.123
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "Toluene",
                "molar_amount": 0.037
              }
            ]
          }
        ]
      },

       - Residual Oil structure:
          - Put ALL the "components" and its "molar_amount" inside "composition" key
          - Get the "final_stage_oil_mw" from the last row of table if mentioning "MW"

        Structure:

      # Second type
      "final_stage_oil_mw": 100.14,
      "final_stage_oil_density": 630.0,
      "final_stage_oil_density_unit": "kg/m3",
      "stock_tank_oil_density": 630.0,
      "stock_tank_oil_density_unit": "kg/m3",
      "final_stage_oil_composition": {
        "components": [
          {
            "input_name": "CO2",
            "mw": null,
            "molar_amount": 0.213,
            "mass_amount": null
          },
          {
            "input_name": "Other",
            "mw": null,
            "molar_amount": null,
            "mass_amount": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0,
            "molar_amount": 0.553,
            "mass_amount": null
          }
        ]
      }
    }
  ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) PROPERTIES table:
       - You put into this category If you see Pressure as row and Physical Properties as column (No composition)
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column Name | Key
       --------|-----------
       Total Recovery (mole %) | cumulative_moles_removed
       Liq. Density (g/cc) | oil_density

        Example JSON:

      {
          "sample_name": ..., # Put sample ID here
          "experiments": [
              {
                  "sample_name": ...,
                  "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                  "name": "Constant Volume Depletion",
                  "type": "CVD",
                  "temperature": 106.0,
                  "temperature_unit": "C",
                  "pressure_unit": "psia",
                  "oil_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_viscosity_unit": "...", # "cP"
                  "relative_oil_volume_unit": "...", # "%"
                  "incremental_moles_removed_unit": "...", # "%"
                  "cumulative_moles_removed_unit": "...", # "%"

                  # Properties data
                  "stages": [
                      # Fill here if the table displays properties as row and pressure as column, or otherwise
                      {
                          "pressure": 4661.0,
                          "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                          "relative_oil_volume": 0.0,
                          "incremental_moles_removed": null, # "%"
                          "cumulative_moles_removed": 0.0,
                          "oil_density": null,
                          "gas_z_factor": 0.922,
                          "gas_specific_gravity": null,
                          "gas_density": 0.339,
                          "gas_viscosity": 0.042,
                          "gas_plus_fraction_mw": null,
                      },
                      {
                          // Other stages ...
                      }
                      {
                          "pressure": 1300.0,
                          "is_saturation_pressure": false,
                          "relative_oil_volume": 13.18,
                          "incremental_moles_removed": null,
                          "cumulative_moles_removed": 67.06,
                          "oil_density": 0.63,
                          "gas_z_factor": 0.874,
                          "gas_specific_gravity": null,
                          "gas_density": 0.075,
                          "gas_viscosity": 0.015,
                          "gas_plus_fraction_mw": null,
                      }
                  ]
              }
          ]
      }

     - 1.4.5 If the page contains a Multi-Stage Separator (MSS) or Three Stage Separator table:
       - If you see "Two Stage", "Three Stage", "Four Stage" Separator, it is MSS. But, "Single Stage" is NOT MSS
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Stock tank oil data: If the title mention stock tank or tank oil
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If you see "Pressure Atm. bara", it means "pressure": 1 (atmospheric pressure means 1 bara)
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON

        Exception:
       - If you find page with title "Bo and GOR from Three Stage Separator test during depletion using the results from Differential Liberation ...", DO NOT extract the data.

        Example JSON:
{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                    "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                    "name": "Multi-stage Separator",
                    "type": "MSS",
                    "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "Dodecanes Plus",
                            "mw": null
                        }
                    ],
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.7579
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0024
                                }
                            ]
                        },
                        {
                            "stage_number": 1,
                            "composition": [
                                {
                                    "stage_number": 1,
                                    "component_name": "C1",
                                    "molar_amount": 0.6791
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 1,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0022
                                }
                            ]
                        },
                        {
                            "stage_number": 2,
                            "composition": [
                                {
                                    "stage_number": 2,
                                    "component_name": "C1",
                                    "molar_amount": 0.1999
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 2,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.019
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Stock tank oil
                "stock_tank_oil_molecular_weight": 145.78,
                "stock_tank_oil_density": 0.7843,
                "stock_tank_oil_density_unit": "g/cm3",
                "stock_tank_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.013,
                            "mass_amount": 0.0107
                        }
                    ]
                },
                "pressure_unit": "psia",
                "temperature_unit": "F",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",

                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 3724.0,
                        "is_saturation_pressure": true,
                        "temperature": 230.0,
                        "gor": 1802.83,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.1783,
                        "oil_density": 0.5016,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "temperature": 60.0,
                        "gor": 0.0,
                        "liberated_gas": 1802.83,
                        "oil_fvf": 1.0,
                        "oil_density": 0.7843,
                        "gas_z_factor": 0.9892,
                        "gas_specific_gravity": 1.316,
                        "gas_density": null,
                        "gas_viscosity": null
                    }
                ]
            }
    ]
}


     - 1.4.6 If the page contains a Differential Liberation (DLE) or Differential Vaporization (DV) table:
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Residual oil data: If mention residual oil or final stage
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity
       gas-oil ratio solution** | gor

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON
       ** in "Gas-Oil Ratio" column if you find "solution" and "liberated", take the "solution" and put to "gor" key in JSON

        Example JSON:

{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                "name": "Differential Liberation Expansion",
                "type": "DLE",
                "temperature": 229.7,
                "temperature_unit": "F",
                "dle_experiment_type": "Standard DLE Experiment",

                # // First part, Liberated gas
                "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "N2",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "C7+",
                            "mw": 114.01
                        }
                    ],
                    # Fill here if the table displays component as row and pressure as column, or otherwise
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.6859 # Composition in mole percent
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0085
                                }
                            ]
                        },
                        {
                            // Other stages ...
                        },
                        {
                            "stage_number": 9,
                            "composition": [
                                {
                                    "stage_number": 9,
                                    "component_name": "C1",
                                    "molar_amount": 0.1309
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 9,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0629
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Residual oil
                "evolved_gas_specific_gravity": null,
                "evolved_gas_composition_id": null,
                "evolved_gas_composition": null,
                "average_residual_oil_mw": 179.43,
                "average_residual_oil_density": 0.8128,
                "average_residual_oil_density_unit": "g/cm3",
                "residual_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.019,
                            "mass_amount": 0.0127
                        }
                    ]
                },
                "pressure_unit": "psia",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",
                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 8513.0,
                        "is_saturation_pressure": true,
                        "gor": 2847.67,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.5407,
                        "oil_density": 0.5714,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "gor": 0.0,
                        "liberated_gas": 2847.67,
                        "oil_fvf": 1.0975,
                        "oil_density": 0.7471,
                        "gas_z_factor": 0.9887,
                        "gas_specific_gravity": 2.1686,
                        "gas_density": null,
                        "gas_viscosity": 0.00925
                    }
                ]
            }
    ]
}

     - 1.4.7 If the page contains a Viscosity experiment (VISCO) table:
       - Identify measurement units for parameters.
       - Viscosity table has pressure as y-axis and viscosities as x-axis
       - Extract viscosity data and structure into "experiments".
       - Never come up with new structures or keys, just fill up in the specified JSON schema.

        Example JSON:

{
    "page": ...,
    "sample_name": ...,
    "experiments": [
        {
            "name": "Oil Viscosity",
            "type": "VISCO",
            "temperature": 229.7,
            "temperature_unit": "F",
            "pressure_unit": "psia",
            "oil_viscosity_unit": "cP",
            "gas_viscosity_unit": "cP",
            "stages": [
                {
                    "visco_id": 1018,
                    "pressure": 5413.0,
                    "oil_viscosity": 0.088,
                    "gas_viscosity": null
                },
                {
                    // Other stages ...
                },
                {
                    "visco_id": 1018,
                    "pressure": 13.0,
                    "oil_viscosity": 0.749,
                    "gas_viscosity": 0.00925
                }
            ]
        }
    ]
}

2. If any summary data or descriptive information is found:
   - Include it as key "Other_information", outside the "experiments" key in JSON.

   Example JSON:
   {
       "solution_gas_oil_ratio": 100,
       "separator_volume_factor": 300,
       "solution_gas_oil_ratio_unit": "scf/stb",
       "separator_volume_factor_unit": "bbl",
       ......
   }

3. Finally, you must stick to the following units

Unit shown | Unit in JSON
--------|-----------
g/cc | g/cm3
mole% | %
Vol/Vol | Sm3/Sm3
scf/sep bbl | scf/bbl
kg/Sm3 | kg/m3
psi | psia
Air=1 | SG

4. If you find Figure in the page, DO NOT extract any data from it. Just extract the title into json.

  {
    "figure_title": "Plot of dewpoint pressure"
  }

5. Dealing with Paraffinic-Naphtenes-Aromatics (PNA) composition

In some cases, PNA can be reported in compositional table, DLE liberated gas, or MSS liberated gas.

For example:

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| n-Hexane          | 0.086   | 0.351     | 86.2  |
| iso-Paraffins     | 0.154   | 0.627     | 86.2  |
| Naphthenes        | 0.033   | 0.109     | 70.1  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |
| n-Heptane         | 0.014   | 0.067     | 100.2 |
| iso-Paraffins     | 0.038   | 0.181     | 100.2 |
| Naphthenes        | 0.116   | 0.476     | 86.6  |
| Aromatics         | 0.030   | 0.112     | 78.1  |

You see for every C6 total and C7 total, there are iso-Paraffins (P), Naphthenes (N), and Aromatics (A).

Remove these PNA, so you just have C6 total and C7 total.

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |

From here, you just extract into corresponding JSON schema as defined in instructions 1 until 4
"
            }
          ]
        },
        {
          "role":"model",
          "parts":[
            {
              "text":"{
    "page": "39",
    "sample_name": "SR-02520",
    "uncorrected": true,
    "last_component": "C36+",
    "flashed_oil_mw": 186.1,
    "flashed_oil_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 0.058,
                "mass_amount": 0.005
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 0.18,
                "mass_amount": 0.029
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 0.253,
                "mass_amount": 0.06
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 0.56,
                "mass_amount": 0.175
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 0.612,
                "mass_amount": 0.191
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.013,
                "mass_amount": 0.005
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 2.198,
                "mass_amount": 0.852
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 1.416,
                "mass_amount": 0.549
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 5.354,
                "mass_amount": 2.437
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 10.526,
                "mass_amount": 5.126
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 12.443,
                "mass_amount": 6.909
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 8.124,
                "mass_amount": 5.135
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 6.628,
                "mass_amount": 4.771
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 5.18,
                "mass_amount": 4.091
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 4.587,
                "mass_amount": 3.967
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 4.977,
                "mass_amount": 4.679
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 4.239,
                "mass_amount": 4.327
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 4.129,
                "mass_amount": 4.57
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 3.3,
                "mass_amount": 3.936
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 2.881,
                "mass_amount": 3.668
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 2.69,
                "mass_amount": 3.627
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 2.338,
                "mass_amount": 3.304
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 1.742,
                "mass_amount": 2.573
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 1.528,
                "mass_amount": 2.389
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 1.36,
                "mass_amount": 2.192
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 1.173,
                "mass_amount": 1.966
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 1.041,
                "mass_amount": 1.812
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 0.904,
                "mass_amount": 1.636
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 0.84,
                "mass_amount": 1.574
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 0.755,
                "mass_amount": 1.46
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 0.691,
                "mass_amount": 1.38
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 0.647,
                "mass_amount": 1.328
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 0.601,
                "mass_amount": 1.272
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 0.535,
                "mass_amount": 1.161
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 0.474,
                "mass_amount": 1.056
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 0.422,
                "mass_amount": 0.966
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 0.381,
                "mass_amount": 0.895
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 0.358,
                "mass_amount": 0.855
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 3.862,
                "mass_amount": 13.072
            }
        ]
    },
    "flashed_gas_mw": 24.28,
    "flashed_gas_specific_gravity": 0.838,
    "flashed_gas_specific_gravity_unit": "SG",
    "flashed_gas_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": 0.085,
                "mass_amount": 0.098
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": 6.585,
                "mass_amount": 11.934
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 73.603,
                "mass_amount": 48.622
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 8.994,
                "mass_amount": 11.136
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 2.632,
                "mass_amount": 4.779
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 2.155,
                "mass_amount": 5.157
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 1.433,
                "mass_amount": 3.429
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.033,
                "mass_amount": 0.099
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 1.636,
                "mass_amount": 4.859
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 0.821,
                "mass_amount": 2.439
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 0.924,
                "mass_amount": 3.2
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 0.769,
                "mass_amount": 2.808
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 0.271,
                "mass_amount": 1.135
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 0.042,
                "mass_amount": 0.203
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 0.014,
                "mass_amount": 0.076
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 0.004,
                "mass_amount": 0.024
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.002
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            }
        ]
    },
    "recombined_fluid_mw": 99.0,
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": 0.046,
                "mass_amount": 0.013
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": 3.547,
                "mass_amount": 1.577
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 39.672,
                "mass_amount": 6.431
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 4.927,
                "mass_amount": 1.497
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 1.535,
                "mass_amount": 0.684
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 1.419,
                "mass_amount": 0.834
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 1.054,
                "mass_amount": 0.619
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.024,
                "mass_amount": 0.017
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 1.895,
                "mass_amount": 1.382
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 1.096,
                "mass_amount": 0.799
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 2.968,
                "mass_amount": 2.538
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 5.271,
                "mass_amount": 4.82
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 5.887,
                "mass_amount": 6.146
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 3.771,
                "mass_amount": 4.483
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 3.065,
                "mass_amount": 4.15
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 2.392,
                "mass_amount": 3.553
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 2.116,
                "mass_amount": 3.443
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 2.296,
                "mass_amount": 4.061
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 1.956,
                "mass_amount": 3.755
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 1.905,
                "mass_amount": 3.966
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 1.523,
                "mass_amount": 3.416
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 1.329,
                "mass_amount": 3.183
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 1.241,
                "mass_amount": 3.148
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 1.079,
                "mass_amount": 2.867
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 0.804,
                "mass_amount": 2.233
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 0.705,
                "mass_amount": 2.073
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 0.627,
                "mass_amount": 1.902
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 0.541,
                "mass_amount": 1.706
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 0.48,
                "mass_amount": 1.572
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 0.417,
                "mass_amount": 1.42
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 0.387,
                "mass_amount": 1.366
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 0.348,
                "mass_amount": 1.267
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 0.319,
                "mass_amount": 1.198
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 0.299,
                "mass_amount": 1.152
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 0.277,
                "mass_amount": 1.104
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 0.247,
                "mass_amount": 1.008
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 0.219,
                "mass_amount": 0.916
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 0.195,
                "mass_amount": 0.838
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 0.176,
                "mass_amount": 0.777
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 0.165,
                "mass_amount": 0.742
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 1.782,
                "mass_amount": 11.344
            }
        ]
    }
}"
            }
          ]
        }
    ]}
{"contents":[
        {
          "role":"user",
          "parts":[
            {
              "fileData":{
                "mimeType":"image/jpeg",
                "fileUri":"https://github.com/yohanesnuwara/sft-finetune-gemini/blob/main/images/RS-113242%20Preliminary%20Results_v4%20-%20%C3%98st%20Frigg_page-0022.jpg"
              }
            },
            {
              "text":"OCR the following page into complete JSON.

Your task is to parse and extract as many infomation as possible from the page and put into JSON like specified

Never come up with new structures or keys, just fill up in the specified JSON schema.

Page can be either full texts, full table, or texts with table.

1. Identify the type of page:
   - 1.1 If the page consists only of texts:

      Parse sentences into JSON and do not give full sentence or summary

      Example sentence:

      "Two sets of sample (CL01 & CL02) is transferred at 15 deg C and pressure 1 atm" (page A.1)

      JSON response

      {
          "page": "A.1",
          "conditioning": {
              "samples": ["CL01", "CL02"],
              "transfer_temp": 15,
              "transfer_temp_unit": "C",
              "transfer_pressure": 1,
              "transfer_pressure_unit": "atm"
              // ...
          }
      }

      Try to find these parameters inferred from "flash" keyword
      {
        "sep_pressure": ...,
        "sep_pressure_unit": ...,
        "sep_temperature": ...,
        "sep_temperature_unit": ...,
      }



   - 1.2 If the page consists of table of contents
     - Put each table title from the list in key "table_title"
     - Identify the "keyword" in the table title, into these categories
        - If mention composition then "composition"
        - If mention constant composition expansion or constant mass expansion then "CCE"
        - If mention constant volume depletion then "CVD"
        - If mention differential liberation expansion then "DLE"
        - If mention multistage separator then "MSS"
        - If mention viscosity then "VISCO"
     - Identify the "sample_name" from keywords like Cylinder, Sample, Chamber number, or if it is sample pair
     - Identify the "page_number"

    JSON response:

    {
        "page": "....",
        "list_content": [
            {
                "title": "...",
                "keyword": "composition",
                "sample_name": null,
                "page_number": 1
            },
            {
                "title": "...",
                "keyword": "CCE"
                "sample_name": "A01",
                "page_number": 2
            },
            {
                "title": "...",
                "keyword": "CVD",
                "sample_name": "A01+A02",
                "page_number": 3
            }
        ]
    }

   - 1.3 If the page consists of texts with table:
     - 1.3.1 If the page displays "sample inventory" or "sample summary" table:
       - This type of page can be recognized by structure of the table. If the table has Sample ID/name or Bottle no in the y-axis, and properties in the x-axis
       - Properties reported in this summary table such as sampling depth, GOR, density, molecular weight, reservoir temperature, reservoir pressure (Pres), viscosity
       - Do not confuse this table with experiment table
       - Extract data into the "sample_inventory" JSON schema.
       - Extract other relevant information into "Other_information".
       - If you do not find any of the keys, DO NOT create the key
       - Identify title of each table and decide the "type"
            - If mention MDT oil, then "type": "OFT"
            - If mention MDT water, then "type": "WATER"

       Example JSON:
        {
          "page": "...",
          "sample_inventory": {
            "data": [
              {
                "sample_name": "1.01",
                "type": "OFT", # put "OFT" if mention MDT oil, "WATER" if mention MDT water
                "sampling_date": "2023-04-26", # If mention Transfer Date
                "well_id": "23/1", # Well name
                "basin_id": null,
                "sub_basin_id": null,
                "field_id": "Volve", # Field name
                "field_segment_id": null,
                "formation_id": "Realgrunnen", # Formation name
                "formation_zone_id": null,
                "reservoir_pressure": 182.0,
                "reservoir_pressure_unit": "bara",
                "reservoir_temperature": 69.8,
                "reservoir_temperature_unit": "C",
                "true_vertical_depth": 1929.0, # If mention sampling depth m TVDSS (true vertical depth sub sea)
                "true_vertical_depth_unit": "m",
                "measured_depth": 1984.5, # If mention sampling depth m MD (measured depth)
                "measured_depth_unit": "m",
                "pressure_at_lab": 400.0,
                "pressure_at_lab_unit": "bara",
                "temperature_at_lab": 80.0,
                "temperature_at_lab_unit": "C",
                "pressure_when_sampled": 100,
                "pressure_when_sampled_unit": "bara",
                "temperature_when_sampled": 23,
                "temperature_when_sampled_unit": "C",
                "top_perforation_depth": 2000,
                "top_perforation_depth_unit": "m",
                "bottom_perforation_depth": 3000,
                "bottom_perforation_depth_unit": "m",
                "transfer_pressure": 450.0,
                "transfer_pressure_unit": "bara",
                "transfer_temperature": 80.0,
                "transfer_temperature_unit": "C",
                "drawdown_pressure": 100,
                "drawdown_pressure_unit": "bara",
                "flashed_oil_contamination": 2.0, # If mention Mud filtrate contamination in STO
                "flashed_oil_contamination": "mass%", # If the unit mentioned is Wt%
                "fluid_type": "Oil",
                "mud_base": "Oil", # put "Oil" if mention OBM, or "Water" if mention WBM
                //... # Other parameters
              },
              {
                "Sample Type": "REC", # If mention Recombined
                # Same as above
                //...
              }
            ]
          },
          "Other_information": {
            "remarks": "Additional details can be provided here."
          }
        }

   - 1.4 If the page consists of a table:
     - 1.4.1 If the page consists of an Information table or descriptions:
       - Extract physical parameters and values into a structured JSON format.
       - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
         - If found, set "sample_name" accordingly.
         - If not found, set "sample_name" to null.

       Important data:

       - If you find "density of stock tank oil", put into key "flashed_oil_density", then fill "flashed_oil_density_unit"
       - If you see gas oil ratio (GOR), put into key "recombined_fluid_gor", then fill "recombined_fluid_gor_unit

       Getting 'flashed_oil_temperature':
       If you see the following

        ```
        Separation conditions:    From:  80.0 °C and   400 bara
                                  To:    25.5 °C and   atm. pressure
        ```

       In this case, "flashed_oil_temperature": 25.5, "flashed_oil_temperature_unit": "C"
       Pick the number after "To:   " before "and atm.pressure"

       Example JSON:
        {
            "page": "...",
            "sample_name": "...",
            "parameter1": "...",
            "parameter1_unit": "...",
            "parameter2": "...",
            "parameter2_unit": "...",
            "parameter3": "...",
            "parameter4_unit": "...",

            # Important data
            "flashed_oil_density": ...,
            "flashed_oil_density_unit": "...",
            "flashed_oil_temperature": 20.5,
            "flashed_oil_temperature_unit": "C",
            "recombined_fluid_gor": ...,
            "recombined_fluid_gor_unit": "...",
            et cetera ...
        }

     - 1.4.2 If the page contains a Composition table :

        - Dynamically identify each fluid-type group by reading the top header row(s), matching these synonyms:
          - flashed_oil ↔ "Stock tank oil", "Flashed Liquid", "Stock tank oil"
          - flashed_gas ↔ "Stock tank gas", "Flashed gas"
          - recombined_fluid ↔ "Monophasic fluid", "Reservoir fluid"
        - Under each fluid-type header, locate its two sub-columns: one labeled "Mole %" → molar_amount, the other "Weight %" → mass_amount.
        - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
            - If found, set "sample_name" accordingly.
            - Sample name is just like ID consist of letter and number, without C10+ or C36+
            - If not found, set "sample_name" to null.
        - If the table title says "uncorrected" or "corrected", set "uncorrected": true/false.
        - Identify "last_component" from the final row label (e.g. "C36+"), include units on every top-level number, and fill only the keys in the prescribed schema—do not invent new ones.

        IMPORTANT!!!
        - In case there is blank cell in the table (value not reported)
        - If you do not find BOTH molar amount and mass amount of a component, do not extract it into JSON

        Example table with blanks:

      |Component         | Stock tank gas    | Stock tank oil    |  Reservoir fluid   | Mol weight  |
      |Mole%             | Weight% | Mole%   | Weight% | Mole%   |  Mole%   | Weight% |             |
      |Nitrogen          | 0.157   | 0.183   |         |         |  0.084   | 0.024   | 28.02       |
      |Carbon Dioxide    | 6.582   | 12.048  |         |         |  3.509   | 1.555   | 44.01       |
      |Hydrogen Sulphide | 0       | 0       |         |         |  0       | 0       | 34.08       |
      |Methane           | 73.927  | 49.324  | 0.115   | 0.01    |  39.466  | 6.376   | 16.04       |
      |Ethane            | 8.997   | 11.251  | 0.222   | 0.036   |  4.9     | 1.484   | 30.07       |


        Result JSON (referring to the table):

{
    "page": ...,
    "sample_name": "A001", # The name of sample
    "uncorrected": true, # false or null
    "last_component": "C10+",
    "flashed_oil_mw": 151.9, # oil molecular weight or MW
    "flashed_oil_density": 0.777, # oil density at stock-tank condition 15 degC
    "flashed_oil_density_unit": "g/cm3", # g/cm3, kg/m3
    "flashed_oil_temperature": 60.0, # temperature at flash
    "flashed_oil_temperature_unit": "F", # F, C, K, R
    "flashed_oil_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide molar_amount and mass_amount is null, so no need to extract
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 0.115,
                "mass_amount": 0.01
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 0.222,
                "mass_amount": 0.036
            }
        ]
    },
    "flashed_gas_mw": 23.4, # gas molecular weight or MW
    "flashed_gas_specific_gravity": 0.808, # also called relative density or ideal
    "flashed_gas_specific_gravity_unit": "SG", # if unit not mentioned then most likely SG
    "flashed_gas_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide has molar_amount and mass_amount, so extract it
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.157,
                "mass_amount": 0.183
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 6.582,
                "mass_amount": 12.048
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 73.997,
                "mass_amount": 49.324
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 8.997,
                "mass_amount": 11.251
            }
        ]
    },

    # Recombined is sometimes called as Reservoir Fluid or Monophasic
    "recombined_fluid_mw": 30.2, # reservoir fluid MW
    "recombined_fluid_gor": 12200.8, # Gas oil ratio or gas liquid ratio (GLR) or Rs
    "recombined_fluid_gor_unit": "scf/STB", # scf/STB, Sm3/Sm3, Sm3/m3, scf/bbl
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.084,
                "mass_amount": 0.024
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 3.509,
                "mass_amount": 1.555
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 39.466,
                "mass_amount": 6.376
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 4.9,
                "mass_amount": 1.484
            }
        ]
    }
}
     - 1.4.3 If the page contains a Constant Composition Expansion (CCE) or Constant Mass Expansion (CME) table:
       - Identify measurement units for parameters.
       - Always put as "CCE" not "CME"
       - Extract data and structure into the "experiments" JSON key.
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Stages 'order' key must always start from 0
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column name | Key
       --------|-----------
       Relative Volume (column) | relative_total_volume
       Relative Volumes (Vs/Vs,BP) | relative_total_volume
       RLD (column) | relative_oil_volume
       % Liq/Sat (Vliq/Vsat) | relative_oil_volume

       Note: relative_oil_volume always null BEFORE the saturation_pressure=True

       - You must stick to the following units

        Variable | Unit
        --------|-----------
        relative_total_volume_unit | Vtot/Vsat

       Example JSON:


{
    "page" : ...,
    "sample_name": ...,
    "experiments": [
        {
            "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
            "sample_name": 1184,
            "name": "Constant Composition Expansion",
            "type": "CCE",
            "temperature": 106.0,
            "temperature_unit": "C",
            "pressure_unit": "psia",
            "relative_oil_volume_unit": "Vo/Vsat (%)",
            "single_phase_density_unit": "g/cm3",
            "relative_total_volume_unit": "Vtot/Vsat",
            "stages": [
                {
                    "pressure": 9000.0,
                    "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                    "relative_oil_volume": null,
                    "relative_total_volume": 0.79,
                    "single_phase_density": 0.422,
                    "z_factor": 1.407
                },
                // Other stages ...
                {
                    "pressure": 3011.0,
                    "is_saturation_pressure": false,
                    "relative_oil_volume": 14.37,
                    "relative_total_volume": 1.315,
                    "single_phase_density": null,
                    "z_factor": null
                }
            ]
        }
    ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) COMPOSITION:
       - You put the page in this category if you see keywords "Constant Volume Depletion" and chemical component
       - Please Read the WHOLE COLUMNS of TABLE
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true

       - If the columns like this: 2600 psia, 2010 psia, 1000 psia, Residual Oil
          - Put the pressures columns inside Liberated Gas schema
          - Put the Residual Oil column inside Final Stage Oil schema

       - Liberated Gas structure:
          - Put each of the "pressure" inside "stages" key
          - Put ALL the "components" and its "molar_amount" inside each "pressure" which it refers to

        Structure:

{
  "sample_name": null,
  "experiments": [
    {
      "sample_name": null,
      "continued": false,
      "saturation_pressure_type": "Dewpoint",
      "name": "Constant Volume Depletion",
      "type": "CVD",
      "temperature": 106.0,
      "temperature_unit": "C",

      # First type
      "liberated_gas_compositions": {
        "components": [
          {
            "input_name": "CO2",
            "mw": 44.01
          },
          {
            "input_name": "Other",
            "mw": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0
          }
        ],
        "stages": [
          {
            "pressure": 2600,
            "composition": [
              {
                "component_name": "CO2",
                "molar_amount": 0.305
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "C30+",
                "molar_amount": 0.087
              }
            ]
          },
          {
            "pressure": 1300,
            "composition": [
              {
                "component_name": "2M-C6",
                "molar_amount": 0.123
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "Toluene",
                "molar_amount": 0.037
              }
            ]
          }
        ]
      },

       - Residual Oil structure:
          - Put ALL the "components" and its "molar_amount" inside "composition" key
          - Get the "final_stage_oil_mw" from the last row of table if mentioning "MW"

        Structure:

      # Second type
      "final_stage_oil_mw": 100.14,
      "final_stage_oil_density": 630.0,
      "final_stage_oil_density_unit": "kg/m3",
      "stock_tank_oil_density": 630.0,
      "stock_tank_oil_density_unit": "kg/m3",
      "final_stage_oil_composition": {
        "components": [
          {
            "input_name": "CO2",
            "mw": null,
            "molar_amount": 0.213,
            "mass_amount": null
          },
          {
            "input_name": "Other",
            "mw": null,
            "molar_amount": null,
            "mass_amount": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0,
            "molar_amount": 0.553,
            "mass_amount": null
          }
        ]
      }
    }
  ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) PROPERTIES table:
       - You put into this category If you see Pressure as row and Physical Properties as column (No composition)
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column Name | Key
       --------|-----------
       Total Recovery (mole %) | cumulative_moles_removed
       Liq. Density (g/cc) | oil_density

        Example JSON:

      {
          "sample_name": ..., # Put sample ID here
          "experiments": [
              {
                  "sample_name": ...,
                  "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                  "name": "Constant Volume Depletion",
                  "type": "CVD",
                  "temperature": 106.0,
                  "temperature_unit": "C",
                  "pressure_unit": "psia",
                  "oil_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_viscosity_unit": "...", # "cP"
                  "relative_oil_volume_unit": "...", # "%"
                  "incremental_moles_removed_unit": "...", # "%"
                  "cumulative_moles_removed_unit": "...", # "%"

                  # Properties data
                  "stages": [
                      # Fill here if the table displays properties as row and pressure as column, or otherwise
                      {
                          "pressure": 4661.0,
                          "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                          "relative_oil_volume": 0.0,
                          "incremental_moles_removed": null, # "%"
                          "cumulative_moles_removed": 0.0,
                          "oil_density": null,
                          "gas_z_factor": 0.922,
                          "gas_specific_gravity": null,
                          "gas_density": 0.339,
                          "gas_viscosity": 0.042,
                          "gas_plus_fraction_mw": null,
                      },
                      {
                          // Other stages ...
                      }
                      {
                          "pressure": 1300.0,
                          "is_saturation_pressure": false,
                          "relative_oil_volume": 13.18,
                          "incremental_moles_removed": null,
                          "cumulative_moles_removed": 67.06,
                          "oil_density": 0.63,
                          "gas_z_factor": 0.874,
                          "gas_specific_gravity": null,
                          "gas_density": 0.075,
                          "gas_viscosity": 0.015,
                          "gas_plus_fraction_mw": null,
                      }
                  ]
              }
          ]
      }

     - 1.4.5 If the page contains a Multi-Stage Separator (MSS) or Three Stage Separator table:
       - If you see "Two Stage", "Three Stage", "Four Stage" Separator, it is MSS. But, "Single Stage" is NOT MSS
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Stock tank oil data: If the title mention stock tank or tank oil
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If you see "Pressure Atm. bara", it means "pressure": 1 (atmospheric pressure means 1 bara)
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON

        Exception:
       - If you find page with title "Bo and GOR from Three Stage Separator test during depletion using the results from Differential Liberation ...", DO NOT extract the data.

        Example JSON:
{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                    "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                    "name": "Multi-stage Separator",
                    "type": "MSS",
                    "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "Dodecanes Plus",
                            "mw": null
                        }
                    ],
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.7579
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0024
                                }
                            ]
                        },
                        {
                            "stage_number": 1,
                            "composition": [
                                {
                                    "stage_number": 1,
                                    "component_name": "C1",
                                    "molar_amount": 0.6791
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 1,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0022
                                }
                            ]
                        },
                        {
                            "stage_number": 2,
                            "composition": [
                                {
                                    "stage_number": 2,
                                    "component_name": "C1",
                                    "molar_amount": 0.1999
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 2,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.019
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Stock tank oil
                "stock_tank_oil_molecular_weight": 145.78,
                "stock_tank_oil_density": 0.7843,
                "stock_tank_oil_density_unit": "g/cm3",
                "stock_tank_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.013,
                            "mass_amount": 0.0107
                        }
                    ]
                },
                "pressure_unit": "psia",
                "temperature_unit": "F",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",

                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 3724.0,
                        "is_saturation_pressure": true,
                        "temperature": 230.0,
                        "gor": 1802.83,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.1783,
                        "oil_density": 0.5016,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "temperature": 60.0,
                        "gor": 0.0,
                        "liberated_gas": 1802.83,
                        "oil_fvf": 1.0,
                        "oil_density": 0.7843,
                        "gas_z_factor": 0.9892,
                        "gas_specific_gravity": 1.316,
                        "gas_density": null,
                        "gas_viscosity": null
                    }
                ]
            }
    ]
}


     - 1.4.6 If the page contains a Differential Liberation (DLE) or Differential Vaporization (DV) table:
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Residual oil data: If mention residual oil or final stage
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity
       gas-oil ratio solution** | gor

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON
       ** in "Gas-Oil Ratio" column if you find "solution" and "liberated", take the "solution" and put to "gor" key in JSON

        Example JSON:

{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                "name": "Differential Liberation Expansion",
                "type": "DLE",
                "temperature": 229.7,
                "temperature_unit": "F",
                "dle_experiment_type": "Standard DLE Experiment",

                # // First part, Liberated gas
                "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "N2",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "C7+",
                            "mw": 114.01
                        }
                    ],
                    # Fill here if the table displays component as row and pressure as column, or otherwise
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.6859 # Composition in mole percent
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0085
                                }
                            ]
                        },
                        {
                            // Other stages ...
                        },
                        {
                            "stage_number": 9,
                            "composition": [
                                {
                                    "stage_number": 9,
                                    "component_name": "C1",
                                    "molar_amount": 0.1309
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 9,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0629
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Residual oil
                "evolved_gas_specific_gravity": null,
                "evolved_gas_composition_id": null,
                "evolved_gas_composition": null,
                "average_residual_oil_mw": 179.43,
                "average_residual_oil_density": 0.8128,
                "average_residual_oil_density_unit": "g/cm3",
                "residual_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.019,
                            "mass_amount": 0.0127
                        }
                    ]
                },
                "pressure_unit": "psia",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",
                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 8513.0,
                        "is_saturation_pressure": true,
                        "gor": 2847.67,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.5407,
                        "oil_density": 0.5714,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "gor": 0.0,
                        "liberated_gas": 2847.67,
                        "oil_fvf": 1.0975,
                        "oil_density": 0.7471,
                        "gas_z_factor": 0.9887,
                        "gas_specific_gravity": 2.1686,
                        "gas_density": null,
                        "gas_viscosity": 0.00925
                    }
                ]
            }
    ]
}

     - 1.4.7 If the page contains a Viscosity experiment (VISCO) table:
       - Identify measurement units for parameters.
       - Viscosity table has pressure as y-axis and viscosities as x-axis
       - Extract viscosity data and structure into "experiments".
       - Never come up with new structures or keys, just fill up in the specified JSON schema.

        Example JSON:

{
    "page": ...,
    "sample_name": ...,
    "experiments": [
        {
            "name": "Oil Viscosity",
            "type": "VISCO",
            "temperature": 229.7,
            "temperature_unit": "F",
            "pressure_unit": "psia",
            "oil_viscosity_unit": "cP",
            "gas_viscosity_unit": "cP",
            "stages": [
                {
                    "visco_id": 1018,
                    "pressure": 5413.0,
                    "oil_viscosity": 0.088,
                    "gas_viscosity": null
                },
                {
                    // Other stages ...
                },
                {
                    "visco_id": 1018,
                    "pressure": 13.0,
                    "oil_viscosity": 0.749,
                    "gas_viscosity": 0.00925
                }
            ]
        }
    ]
}

2. If any summary data or descriptive information is found:
   - Include it as key "Other_information", outside the "experiments" key in JSON.

   Example JSON:
   {
       "solution_gas_oil_ratio": 100,
       "separator_volume_factor": 300,
       "solution_gas_oil_ratio_unit": "scf/stb",
       "separator_volume_factor_unit": "bbl",
       ......
   }

3. Finally, you must stick to the following units

Unit shown | Unit in JSON
--------|-----------
g/cc | g/cm3
mole% | %
Vol/Vol | Sm3/Sm3
scf/sep bbl | scf/bbl
kg/Sm3 | kg/m3
psi | psia
Air=1 | SG

4. If you find Figure in the page, DO NOT extract any data from it. Just extract the title into json.

  {
    "figure_title": "Plot of dewpoint pressure"
  }

5. Dealing with Paraffinic-Naphtenes-Aromatics (PNA) composition

In some cases, PNA can be reported in compositional table, DLE liberated gas, or MSS liberated gas.

For example:

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| n-Hexane          | 0.086   | 0.351     | 86.2  |
| iso-Paraffins     | 0.154   | 0.627     | 86.2  |
| Naphthenes        | 0.033   | 0.109     | 70.1  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |
| n-Heptane         | 0.014   | 0.067     | 100.2 |
| iso-Paraffins     | 0.038   | 0.181     | 100.2 |
| Naphthenes        | 0.116   | 0.476     | 86.6  |
| Aromatics         | 0.030   | 0.112     | 78.1  |

You see for every C6 total and C7 total, there are iso-Paraffins (P), Naphthenes (N), and Aromatics (A).

Remove these PNA, so you just have C6 total and C7 total.

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |

From here, you just extract into corresponding JSON schema as defined in instructions 1 until 4
"
            }
          ]
        },
        {
          "role":"model",
          "parts":[
            {
              "text":"{
    "page": "Page 22 of 119",
    "sample_name": "MPCT-2210561",
    "measured_depth": 1984.5,
    "measured_depth_unit": "m",
    "recombined_fluid_gor": 53.6,
    "recombined_fluid_gor_unit": "Sm3/Sm3",
    "flashed_oil_density": 911.1,
    "flashed_oil_density_unit": "kg/m3",
    "flashed_oil_temperature": 23.8,
    "flashed_oil_temperature_unit": "C",
    "flashed_gas_specific_gravity": 0.613,
    "flashed_gas_specific_gravity_unit": "SG",
    "flashed_oil_mw": 336.6,
    "flashed_oil_mw_unit": "g/mol",
    "flashed_oil_c7_plus_mw": 338.0,
    "flashed_oil_c7_plus_mw_unit": "g/mol",
    "flashed_oil_c7_plus_density": 911.0,
    "flashed_oil_c7_plus_density_unit": "kg/m3",
    "flashed_oil_c10_plus_mw": 341.0,
    "flashed_oil_c10_plus_mw_unit": "g/mol",
    "flashed_oil_c10_plus_density": 912.0,
    "flashed_oil_c10_plus_density_unit": "kg/m3",
    "Other_information": {
        "separation_conditions_from_temperature": 80.0,
        "separation_conditions_from_temperature_unit": "C",
        "separation_conditions_from_pressure": 400.0,
        "separation_conditions_from_pressure_unit": "bara",
        "separation_conditions_to_temperature": 23.8,
        "separation_conditions_to_temperature_unit": "C",
        "separation_conditions_to_pressure": 1.0,
        "separation_conditions_to_pressure_unit": "atm",
        "standard_conditions_gas_temperature": 15.0,
        "standard_conditions_gas_temperature_unit": "C",
        "standard_conditions_gas_pressure": 1.01325,
        "standard_conditions_gas_pressure_unit": "bara",
        "standard_conditions_oil_temperature": 15.0,
        "standard_conditions_oil_temperature_unit": "C",
        "standard_conditions_oil_pressure": 1.0,
        "standard_conditions_oil_pressure_unit": "atm"
    }
}"
            }
          ]
        }
    ]}
{"contents":[
        {
          "role":"user",
          "parts":[
            {
              "fileData":{
                "mimeType":"image/jpeg",
                "fileUri":"https://github.com/yohanesnuwara/sft-finetune-gemini/blob/main/images/RS-113242%20Preliminary%20Results_v4%20-%20%C3%98st%20Frigg_page-0025.jpg"
              }
            },
            {
              "text":"OCR the following page into complete JSON.

Your task is to parse and extract as many infomation as possible from the page and put into JSON like specified

Never come up with new structures or keys, just fill up in the specified JSON schema.

Page can be either full texts, full table, or texts with table.

1. Identify the type of page:
   - 1.1 If the page consists only of texts:

      Parse sentences into JSON and do not give full sentence or summary

      Example sentence:

      "Two sets of sample (CL01 & CL02) is transferred at 15 deg C and pressure 1 atm" (page A.1)

      JSON response

      {
          "page": "A.1",
          "conditioning": {
              "samples": ["CL01", "CL02"],
              "transfer_temp": 15,
              "transfer_temp_unit": "C",
              "transfer_pressure": 1,
              "transfer_pressure_unit": "atm"
              // ...
          }
      }

      Try to find these parameters inferred from "flash" keyword
      {
        "sep_pressure": ...,
        "sep_pressure_unit": ...,
        "sep_temperature": ...,
        "sep_temperature_unit": ...,
      }



   - 1.2 If the page consists of table of contents
     - Put each table title from the list in key "table_title"
     - Identify the "keyword" in the table title, into these categories
        - If mention composition then "composition"
        - If mention constant composition expansion or constant mass expansion then "CCE"
        - If mention constant volume depletion then "CVD"
        - If mention differential liberation expansion then "DLE"
        - If mention multistage separator then "MSS"
        - If mention viscosity then "VISCO"
     - Identify the "sample_name" from keywords like Cylinder, Sample, Chamber number, or if it is sample pair
     - Identify the "page_number"

    JSON response:

    {
        "page": "....",
        "list_content": [
            {
                "title": "...",
                "keyword": "composition",
                "sample_name": null,
                "page_number": 1
            },
            {
                "title": "...",
                "keyword": "CCE"
                "sample_name": "A01",
                "page_number": 2
            },
            {
                "title": "...",
                "keyword": "CVD",
                "sample_name": "A01+A02",
                "page_number": 3
            }
        ]
    }

   - 1.3 If the page consists of texts with table:
     - 1.3.1 If the page displays "sample inventory" or "sample summary" table:
       - This type of page can be recognized by structure of the table. If the table has Sample ID/name or Bottle no in the y-axis, and properties in the x-axis
       - Properties reported in this summary table such as sampling depth, GOR, density, molecular weight, reservoir temperature, reservoir pressure (Pres), viscosity
       - Do not confuse this table with experiment table
       - Extract data into the "sample_inventory" JSON schema.
       - Extract other relevant information into "Other_information".
       - If you do not find any of the keys, DO NOT create the key
       - Identify title of each table and decide the "type"
            - If mention MDT oil, then "type": "OFT"
            - If mention MDT water, then "type": "WATER"

       Example JSON:
        {
          "page": "...",
          "sample_inventory": {
            "data": [
              {
                "sample_name": "1.01",
                "type": "OFT", # put "OFT" if mention MDT oil, "WATER" if mention MDT water
                "sampling_date": "2023-04-26", # If mention Transfer Date
                "well_id": "23/1", # Well name
                "basin_id": null,
                "sub_basin_id": null,
                "field_id": "Volve", # Field name
                "field_segment_id": null,
                "formation_id": "Realgrunnen", # Formation name
                "formation_zone_id": null,
                "reservoir_pressure": 182.0,
                "reservoir_pressure_unit": "bara",
                "reservoir_temperature": 69.8,
                "reservoir_temperature_unit": "C",
                "true_vertical_depth": 1929.0, # If mention sampling depth m TVDSS (true vertical depth sub sea)
                "true_vertical_depth_unit": "m",
                "measured_depth": 1984.5, # If mention sampling depth m MD (measured depth)
                "measured_depth_unit": "m",
                "pressure_at_lab": 400.0,
                "pressure_at_lab_unit": "bara",
                "temperature_at_lab": 80.0,
                "temperature_at_lab_unit": "C",
                "pressure_when_sampled": 100,
                "pressure_when_sampled_unit": "bara",
                "temperature_when_sampled": 23,
                "temperature_when_sampled_unit": "C",
                "top_perforation_depth": 2000,
                "top_perforation_depth_unit": "m",
                "bottom_perforation_depth": 3000,
                "bottom_perforation_depth_unit": "m",
                "transfer_pressure": 450.0,
                "transfer_pressure_unit": "bara",
                "transfer_temperature": 80.0,
                "transfer_temperature_unit": "C",
                "drawdown_pressure": 100,
                "drawdown_pressure_unit": "bara",
                "flashed_oil_contamination": 2.0, # If mention Mud filtrate contamination in STO
                "flashed_oil_contamination": "mass%", # If the unit mentioned is Wt%
                "fluid_type": "Oil",
                "mud_base": "Oil", # put "Oil" if mention OBM, or "Water" if mention WBM
                //... # Other parameters
              },
              {
                "Sample Type": "REC", # If mention Recombined
                # Same as above
                //...
              }
            ]
          },
          "Other_information": {
            "remarks": "Additional details can be provided here."
          }
        }

   - 1.4 If the page consists of a table:
     - 1.4.1 If the page consists of an Information table or descriptions:
       - Extract physical parameters and values into a structured JSON format.
       - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
         - If found, set "sample_name" accordingly.
         - If not found, set "sample_name" to null.

       Important data:

       - If you find "density of stock tank oil", put into key "flashed_oil_density", then fill "flashed_oil_density_unit"
       - If you see gas oil ratio (GOR), put into key "recombined_fluid_gor", then fill "recombined_fluid_gor_unit

       Getting 'flashed_oil_temperature':
       If you see the following

        ```
        Separation conditions:    From:  80.0 °C and   400 bara
                                  To:    25.5 °C and   atm. pressure
        ```

       In this case, "flashed_oil_temperature": 25.5, "flashed_oil_temperature_unit": "C"
       Pick the number after "To:   " before "and atm.pressure"

       Example JSON:
        {
            "page": "...",
            "sample_name": "...",
            "parameter1": "...",
            "parameter1_unit": "...",
            "parameter2": "...",
            "parameter2_unit": "...",
            "parameter3": "...",
            "parameter4_unit": "...",

            # Important data
            "flashed_oil_density": ...,
            "flashed_oil_density_unit": "...",
            "flashed_oil_temperature": 20.5,
            "flashed_oil_temperature_unit": "C",
            "recombined_fluid_gor": ...,
            "recombined_fluid_gor_unit": "...",
            et cetera ...
        }

     - 1.4.2 If the page contains a Composition table :

        - Dynamically identify each fluid-type group by reading the top header row(s), matching these synonyms:
          - flashed_oil ↔ "Stock tank oil", "Flashed Liquid", "Stock tank oil"
          - flashed_gas ↔ "Stock tank gas", "Flashed gas"
          - recombined_fluid ↔ "Monophasic fluid", "Reservoir fluid"
        - Under each fluid-type header, locate its two sub-columns: one labeled "Mole %" → molar_amount, the other "Weight %" → mass_amount.
        - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
            - If found, set "sample_name" accordingly.
            - Sample name is just like ID consist of letter and number, without C10+ or C36+
            - If not found, set "sample_name" to null.
        - If the table title says "uncorrected" or "corrected", set "uncorrected": true/false.
        - Identify "last_component" from the final row label (e.g. "C36+"), include units on every top-level number, and fill only the keys in the prescribed schema—do not invent new ones.

        IMPORTANT!!!
        - In case there is blank cell in the table (value not reported)
        - If you do not find BOTH molar amount and mass amount of a component, do not extract it into JSON

        Example table with blanks:

      |Component         | Stock tank gas    | Stock tank oil    |  Reservoir fluid   | Mol weight  |
      |Mole%             | Weight% | Mole%   | Weight% | Mole%   |  Mole%   | Weight% |             |
      |Nitrogen          | 0.157   | 0.183   |         |         |  0.084   | 0.024   | 28.02       |
      |Carbon Dioxide    | 6.582   | 12.048  |         |         |  3.509   | 1.555   | 44.01       |
      |Hydrogen Sulphide | 0       | 0       |         |         |  0       | 0       | 34.08       |
      |Methane           | 73.927  | 49.324  | 0.115   | 0.01    |  39.466  | 6.376   | 16.04       |
      |Ethane            | 8.997   | 11.251  | 0.222   | 0.036   |  4.9     | 1.484   | 30.07       |


        Result JSON (referring to the table):

{
    "page": ...,
    "sample_name": "A001", # The name of sample
    "uncorrected": true, # false or null
    "last_component": "C10+",
    "flashed_oil_mw": 151.9, # oil molecular weight or MW
    "flashed_oil_density": 0.777, # oil density at stock-tank condition 15 degC
    "flashed_oil_density_unit": "g/cm3", # g/cm3, kg/m3
    "flashed_oil_temperature": 60.0, # temperature at flash
    "flashed_oil_temperature_unit": "F", # F, C, K, R
    "flashed_oil_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide molar_amount and mass_amount is null, so no need to extract
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 0.115,
                "mass_amount": 0.01
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 0.222,
                "mass_amount": 0.036
            }
        ]
    },
    "flashed_gas_mw": 23.4, # gas molecular weight or MW
    "flashed_gas_specific_gravity": 0.808, # also called relative density or ideal
    "flashed_gas_specific_gravity_unit": "SG", # if unit not mentioned then most likely SG
    "flashed_gas_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide has molar_amount and mass_amount, so extract it
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.157,
                "mass_amount": 0.183
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 6.582,
                "mass_amount": 12.048
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 73.997,
                "mass_amount": 49.324
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 8.997,
                "mass_amount": 11.251
            }
        ]
    },

    # Recombined is sometimes called as Reservoir Fluid or Monophasic
    "recombined_fluid_mw": 30.2, # reservoir fluid MW
    "recombined_fluid_gor": 12200.8, # Gas oil ratio or gas liquid ratio (GLR) or Rs
    "recombined_fluid_gor_unit": "scf/STB", # scf/STB, Sm3/Sm3, Sm3/m3, scf/bbl
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.084,
                "mass_amount": 0.024
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 3.509,
                "mass_amount": 1.555
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 39.466,
                "mass_amount": 6.376
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 4.9,
                "mass_amount": 1.484
            }
        ]
    }
}
     - 1.4.3 If the page contains a Constant Composition Expansion (CCE) or Constant Mass Expansion (CME) table:
       - Identify measurement units for parameters.
       - Always put as "CCE" not "CME"
       - Extract data and structure into the "experiments" JSON key.
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Stages 'order' key must always start from 0
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column name | Key
       --------|-----------
       Relative Volume (column) | relative_total_volume
       Relative Volumes (Vs/Vs,BP) | relative_total_volume
       RLD (column) | relative_oil_volume
       % Liq/Sat (Vliq/Vsat) | relative_oil_volume

       Note: relative_oil_volume always null BEFORE the saturation_pressure=True

       - You must stick to the following units

        Variable | Unit
        --------|-----------
        relative_total_volume_unit | Vtot/Vsat

       Example JSON:


{
    "page" : ...,
    "sample_name": ...,
    "experiments": [
        {
            "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
            "sample_name": 1184,
            "name": "Constant Composition Expansion",
            "type": "CCE",
            "temperature": 106.0,
            "temperature_unit": "C",
            "pressure_unit": "psia",
            "relative_oil_volume_unit": "Vo/Vsat (%)",
            "single_phase_density_unit": "g/cm3",
            "relative_total_volume_unit": "Vtot/Vsat",
            "stages": [
                {
                    "pressure": 9000.0,
                    "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                    "relative_oil_volume": null,
                    "relative_total_volume": 0.79,
                    "single_phase_density": 0.422,
                    "z_factor": 1.407
                },
                // Other stages ...
                {
                    "pressure": 3011.0,
                    "is_saturation_pressure": false,
                    "relative_oil_volume": 14.37,
                    "relative_total_volume": 1.315,
                    "single_phase_density": null,
                    "z_factor": null
                }
            ]
        }
    ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) COMPOSITION:
       - You put the page in this category if you see keywords "Constant Volume Depletion" and chemical component
       - Please Read the WHOLE COLUMNS of TABLE
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true

       - If the columns like this: 2600 psia, 2010 psia, 1000 psia, Residual Oil
          - Put the pressures columns inside Liberated Gas schema
          - Put the Residual Oil column inside Final Stage Oil schema

       - Liberated Gas structure:
          - Put each of the "pressure" inside "stages" key
          - Put ALL the "components" and its "molar_amount" inside each "pressure" which it refers to

        Structure:

{
  "sample_name": null,
  "experiments": [
    {
      "sample_name": null,
      "continued": false,
      "saturation_pressure_type": "Dewpoint",
      "name": "Constant Volume Depletion",
      "type": "CVD",
      "temperature": 106.0,
      "temperature_unit": "C",

      # First type
      "liberated_gas_compositions": {
        "components": [
          {
            "input_name": "CO2",
            "mw": 44.01
          },
          {
            "input_name": "Other",
            "mw": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0
          }
        ],
        "stages": [
          {
            "pressure": 2600,
            "composition": [
              {
                "component_name": "CO2",
                "molar_amount": 0.305
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "C30+",
                "molar_amount": 0.087
              }
            ]
          },
          {
            "pressure": 1300,
            "composition": [
              {
                "component_name": "2M-C6",
                "molar_amount": 0.123
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "Toluene",
                "molar_amount": 0.037
              }
            ]
          }
        ]
      },

       - Residual Oil structure:
          - Put ALL the "components" and its "molar_amount" inside "composition" key
          - Get the "final_stage_oil_mw" from the last row of table if mentioning "MW"

        Structure:

      # Second type
      "final_stage_oil_mw": 100.14,
      "final_stage_oil_density": 630.0,
      "final_stage_oil_density_unit": "kg/m3",
      "stock_tank_oil_density": 630.0,
      "stock_tank_oil_density_unit": "kg/m3",
      "final_stage_oil_composition": {
        "components": [
          {
            "input_name": "CO2",
            "mw": null,
            "molar_amount": 0.213,
            "mass_amount": null
          },
          {
            "input_name": "Other",
            "mw": null,
            "molar_amount": null,
            "mass_amount": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0,
            "molar_amount": 0.553,
            "mass_amount": null
          }
        ]
      }
    }
  ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) PROPERTIES table:
       - You put into this category If you see Pressure as row and Physical Properties as column (No composition)
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column Name | Key
       --------|-----------
       Total Recovery (mole %) | cumulative_moles_removed
       Liq. Density (g/cc) | oil_density

        Example JSON:

      {
          "sample_name": ..., # Put sample ID here
          "experiments": [
              {
                  "sample_name": ...,
                  "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                  "name": "Constant Volume Depletion",
                  "type": "CVD",
                  "temperature": 106.0,
                  "temperature_unit": "C",
                  "pressure_unit": "psia",
                  "oil_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_viscosity_unit": "...", # "cP"
                  "relative_oil_volume_unit": "...", # "%"
                  "incremental_moles_removed_unit": "...", # "%"
                  "cumulative_moles_removed_unit": "...", # "%"

                  # Properties data
                  "stages": [
                      # Fill here if the table displays properties as row and pressure as column, or otherwise
                      {
                          "pressure": 4661.0,
                          "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                          "relative_oil_volume": 0.0,
                          "incremental_moles_removed": null, # "%"
                          "cumulative_moles_removed": 0.0,
                          "oil_density": null,
                          "gas_z_factor": 0.922,
                          "gas_specific_gravity": null,
                          "gas_density": 0.339,
                          "gas_viscosity": 0.042,
                          "gas_plus_fraction_mw": null,
                      },
                      {
                          // Other stages ...
                      }
                      {
                          "pressure": 1300.0,
                          "is_saturation_pressure": false,
                          "relative_oil_volume": 13.18,
                          "incremental_moles_removed": null,
                          "cumulative_moles_removed": 67.06,
                          "oil_density": 0.63,
                          "gas_z_factor": 0.874,
                          "gas_specific_gravity": null,
                          "gas_density": 0.075,
                          "gas_viscosity": 0.015,
                          "gas_plus_fraction_mw": null,
                      }
                  ]
              }
          ]
      }

     - 1.4.5 If the page contains a Multi-Stage Separator (MSS) or Three Stage Separator table:
       - If you see "Two Stage", "Three Stage", "Four Stage" Separator, it is MSS. But, "Single Stage" is NOT MSS
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Stock tank oil data: If the title mention stock tank or tank oil
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If you see "Pressure Atm. bara", it means "pressure": 1 (atmospheric pressure means 1 bara)
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON

        Exception:
       - If you find page with title "Bo and GOR from Three Stage Separator test during depletion using the results from Differential Liberation ...", DO NOT extract the data.

        Example JSON:
{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                    "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                    "name": "Multi-stage Separator",
                    "type": "MSS",
                    "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "Dodecanes Plus",
                            "mw": null
                        }
                    ],
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.7579
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0024
                                }
                            ]
                        },
                        {
                            "stage_number": 1,
                            "composition": [
                                {
                                    "stage_number": 1,
                                    "component_name": "C1",
                                    "molar_amount": 0.6791
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 1,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0022
                                }
                            ]
                        },
                        {
                            "stage_number": 2,
                            "composition": [
                                {
                                    "stage_number": 2,
                                    "component_name": "C1",
                                    "molar_amount": 0.1999
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 2,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.019
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Stock tank oil
                "stock_tank_oil_molecular_weight": 145.78,
                "stock_tank_oil_density": 0.7843,
                "stock_tank_oil_density_unit": "g/cm3",
                "stock_tank_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.013,
                            "mass_amount": 0.0107
                        }
                    ]
                },
                "pressure_unit": "psia",
                "temperature_unit": "F",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",

                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 3724.0,
                        "is_saturation_pressure": true,
                        "temperature": 230.0,
                        "gor": 1802.83,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.1783,
                        "oil_density": 0.5016,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "temperature": 60.0,
                        "gor": 0.0,
                        "liberated_gas": 1802.83,
                        "oil_fvf": 1.0,
                        "oil_density": 0.7843,
                        "gas_z_factor": 0.9892,
                        "gas_specific_gravity": 1.316,
                        "gas_density": null,
                        "gas_viscosity": null
                    }
                ]
            }
    ]
}


     - 1.4.6 If the page contains a Differential Liberation (DLE) or Differential Vaporization (DV) table:
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Residual oil data: If mention residual oil or final stage
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity
       gas-oil ratio solution** | gor

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON
       ** in "Gas-Oil Ratio" column if you find "solution" and "liberated", take the "solution" and put to "gor" key in JSON

        Example JSON:

{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                "name": "Differential Liberation Expansion",
                "type": "DLE",
                "temperature": 229.7,
                "temperature_unit": "F",
                "dle_experiment_type": "Standard DLE Experiment",

                # // First part, Liberated gas
                "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "N2",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "C7+",
                            "mw": 114.01
                        }
                    ],
                    # Fill here if the table displays component as row and pressure as column, or otherwise
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.6859 # Composition in mole percent
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0085
                                }
                            ]
                        },
                        {
                            // Other stages ...
                        },
                        {
                            "stage_number": 9,
                            "composition": [
                                {
                                    "stage_number": 9,
                                    "component_name": "C1",
                                    "molar_amount": 0.1309
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 9,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0629
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Residual oil
                "evolved_gas_specific_gravity": null,
                "evolved_gas_composition_id": null,
                "evolved_gas_composition": null,
                "average_residual_oil_mw": 179.43,
                "average_residual_oil_density": 0.8128,
                "average_residual_oil_density_unit": "g/cm3",
                "residual_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.019,
                            "mass_amount": 0.0127
                        }
                    ]
                },
                "pressure_unit": "psia",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",
                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 8513.0,
                        "is_saturation_pressure": true,
                        "gor": 2847.67,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.5407,
                        "oil_density": 0.5714,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "gor": 0.0,
                        "liberated_gas": 2847.67,
                        "oil_fvf": 1.0975,
                        "oil_density": 0.7471,
                        "gas_z_factor": 0.9887,
                        "gas_specific_gravity": 2.1686,
                        "gas_density": null,
                        "gas_viscosity": 0.00925
                    }
                ]
            }
    ]
}

     - 1.4.7 If the page contains a Viscosity experiment (VISCO) table:
       - Identify measurement units for parameters.
       - Viscosity table has pressure as y-axis and viscosities as x-axis
       - Extract viscosity data and structure into "experiments".
       - Never come up with new structures or keys, just fill up in the specified JSON schema.

        Example JSON:

{
    "page": ...,
    "sample_name": ...,
    "experiments": [
        {
            "name": "Oil Viscosity",
            "type": "VISCO",
            "temperature": 229.7,
            "temperature_unit": "F",
            "pressure_unit": "psia",
            "oil_viscosity_unit": "cP",
            "gas_viscosity_unit": "cP",
            "stages": [
                {
                    "visco_id": 1018,
                    "pressure": 5413.0,
                    "oil_viscosity": 0.088,
                    "gas_viscosity": null
                },
                {
                    // Other stages ...
                },
                {
                    "visco_id": 1018,
                    "pressure": 13.0,
                    "oil_viscosity": 0.749,
                    "gas_viscosity": 0.00925
                }
            ]
        }
    ]
}

2. If any summary data or descriptive information is found:
   - Include it as key "Other_information", outside the "experiments" key in JSON.

   Example JSON:
   {
       "solution_gas_oil_ratio": 100,
       "separator_volume_factor": 300,
       "solution_gas_oil_ratio_unit": "scf/stb",
       "separator_volume_factor_unit": "bbl",
       ......
   }

3. Finally, you must stick to the following units

Unit shown | Unit in JSON
--------|-----------
g/cc | g/cm3
mole% | %
Vol/Vol | Sm3/Sm3
scf/sep bbl | scf/bbl
kg/Sm3 | kg/m3
psi | psia
Air=1 | SG

4. If you find Figure in the page, DO NOT extract any data from it. Just extract the title into json.

  {
    "figure_title": "Plot of dewpoint pressure"
  }

5. Dealing with Paraffinic-Naphtenes-Aromatics (PNA) composition

In some cases, PNA can be reported in compositional table, DLE liberated gas, or MSS liberated gas.

For example:

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| n-Hexane          | 0.086   | 0.351     | 86.2  |
| iso-Paraffins     | 0.154   | 0.627     | 86.2  |
| Naphthenes        | 0.033   | 0.109     | 70.1  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |
| n-Heptane         | 0.014   | 0.067     | 100.2 |
| iso-Paraffins     | 0.038   | 0.181     | 100.2 |
| Naphthenes        | 0.116   | 0.476     | 86.6  |
| Aromatics         | 0.030   | 0.112     | 78.1  |

You see for every C6 total and C7 total, there are iso-Paraffins (P), Naphthenes (N), and Aromatics (A).

Remove these PNA, so you just have C6 total and C7 total.

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |

From here, you just extract into corresponding JSON schema as defined in instructions 1 until 4
"
            }
          ]
        },
        {
          "role":"model",
          "parts":[
            {
              "text":"{
    "page": "25 of 119",
    "sample_name": "MPCT-2210561",
    "uncorrected": true,
    "last_component": "C36+",
    "flashed_oil_mw": 336.6,
    "flashed_gas_mw": 17.76,
    "flashed_gas_specific_gravity": 0.613,
    "flashed_gas_specific_gravity_unit": "SG",
    "recombined_fluid_mw": 191.3,
    "flashed_gas_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": 0.267,
                "mass_amount": 0.421
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": 0.208,
                "mass_amount": 0.515
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 89.908,
                "mass_amount": 81.233
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 8.869,
                "mass_amount": 15.019
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 0.379,
                "mass_amount": 0.94
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 0.043,
                "mass_amount": 0.142
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 0.053,
                "mass_amount": 0.172
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.025,
                "mass_amount": 0.104
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 0.007,
                "mass_amount": 0.03
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 0.011,
                "mass_amount": 0.045
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 0.049,
                "mass_amount": 0.237
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 0.051,
                "mass_amount": 0.268
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 0.056,
                "mass_amount": 0.341
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 0.05,
                "mass_amount": 0.348
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 0.023,
                "mass_amount": 0.171
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 0.002,
                "mass_amount": 0.013
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            }
        ]
    },
    "flashed_oil_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 0.105,
                "mass_amount": 0.005
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 0.146,
                "mass_amount": 0.013
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 0.023,
                "mass_amount": 0.003
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 0.006,
                "mass_amount": 0.001
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 0.012,
                "mass_amount": 0.002
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.005,
                "mass_amount": 0.001
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 0.005,
                "mass_amount": 0.001
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 0.005,
                "mass_amount": 0.001
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 0.066,
                "mass_amount": 0.017
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 0.154,
                "mass_amount": 0.043
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 0.426,
                "mass_amount": 0.139
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 0.986,
                "mass_amount": 0.363
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 2.11,
                "mass_amount": 0.84
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 2.757,
                "mass_amount": 1.204
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 3.697,
                "mass_amount": 1.768
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 4.544,
                "mass_amount": 2.362
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 5.097,
                "mass_amount": 2.877
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 5.455,
                "mass_amount": 3.338
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 5.366,
                "mass_amount": 3.539
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 5.048,
                "mass_amount": 3.554
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 4.847,
                "mass_amount": 3.614
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 4.534,
                "mass_amount": 3.542
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 4.054,
                "mass_amount": 3.312
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 3.77,
                "mass_amount": 3.259
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 3.462,
                "mass_amount": 3.085
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 3.117,
                "mass_amount": 2.889
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 2.83,
                "mass_amount": 2.724
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 2.533,
                "mass_amount": 2.536
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 2.435,
                "mass_amount": 2.524
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 2.201,
                "mass_amount": 2.354
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 2.233,
                "mass_amount": 2.468
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 2.074,
                "mass_amount": 2.354
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 1.992,
                "mass_amount": 2.332
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 1.771,
                "mass_amount": 2.126
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 1.591,
                "mass_amount": 1.962
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 1.429,
                "mass_amount": 1.808
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 1.306,
                "mass_amount": 1.695
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 1.213,
                "mass_amount": 1.603
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 16.596,
                "mass_amount": 33.742
            }
        ]
    },
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": 0.122,
                "mass_amount": 0.018
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": 0.095,
                "mass_amount": 0.022
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 41.029,
                "mass_amount": 3.44
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 4.121,
                "mass_amount": 0.648
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 0.185,
                "mass_amount": 0.043
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 0.023,
                "mass_amount": 0.007
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 0.03,
                "mass_amount": 0.009
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.014,
                "mass_amount": 0.005
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 0.006,
                "mass_amount": 0.002
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 0.008,
                "mass_amount": 0.003
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 0.058,
                "mass_amount": 0.026
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 0.107,
                "mass_amount": 0.052
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 0.257,
                "mass_amount": 0.148
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 0.559,
                "mass_amount": 0.362
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 1.159,
                "mass_amount": 0.812
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 1.501,
                "mass_amount": 1.154
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 2.012,
                "mass_amount": 1.693
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 2.473,
                "mass_amount": 2.262
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 2.774,
                "mass_amount": 2.755
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 2.969,
                "mass_amount": 3.197
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 2.921,
                "mass_amount": 3.389
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 2.748,
                "mass_amount": 3.404
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 2.638,
                "mass_amount": 3.461
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 2.468,
                "mass_amount": 3.392
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 2.207,
                "mass_amount": 3.172
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 2.052,
                "mass_amount": 3.121
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 1.884,
                "mass_amount": 2.955
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 1.697,
                "mass_amount": 2.767
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 1.54,
                "mass_amount": 2.609
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 1.379,
                "mass_amount": 2.429
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 1.325,
                "mass_amount": 2.417
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 1.198,
                "mass_amount": 2.254
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 1.216,
                "mass_amount": 2.364
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 1.129,
                "mass_amount": 2.254
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 1.084,
                "mass_amount": 2.233
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 0.964,
                "mass_amount": 2.036
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 0.866,
                "mass_amount": 1.879
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 0.778,
                "mass_amount": 1.732
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 0.711,
                "mass_amount": 1.623
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 0.66,
                "mass_amount": 1.535
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 9.033,
                "mass_amount": 32.315
            }
        ]
    }
}"
            }
          ]
        }
    ]}
{"contents":[
        {
          "role":"user",
          "parts":[
            {
              "fileData":{
                "mimeType":"image/jpeg",
                "fileUri":"https://github.com/yohanesnuwara/sft-finetune-gemini/blob/main/images/RS-113242%20Preliminary%20Results_v4%20-%20%C3%98st%20Frigg_page-0026.jpg"
              }
            },
            {
              "text":"OCR the following page into complete JSON.

Your task is to parse and extract as many infomation as possible from the page and put into JSON like specified

Never come up with new structures or keys, just fill up in the specified JSON schema.

Page can be either full texts, full table, or texts with table.

1. Identify the type of page:
   - 1.1 If the page consists only of texts:

      Parse sentences into JSON and do not give full sentence or summary

      Example sentence:

      "Two sets of sample (CL01 & CL02) is transferred at 15 deg C and pressure 1 atm" (page A.1)

      JSON response

      {
          "page": "A.1",
          "conditioning": {
              "samples": ["CL01", "CL02"],
              "transfer_temp": 15,
              "transfer_temp_unit": "C",
              "transfer_pressure": 1,
              "transfer_pressure_unit": "atm"
              // ...
          }
      }

      Try to find these parameters inferred from "flash" keyword
      {
        "sep_pressure": ...,
        "sep_pressure_unit": ...,
        "sep_temperature": ...,
        "sep_temperature_unit": ...,
      }



   - 1.2 If the page consists of table of contents
     - Put each table title from the list in key "table_title"
     - Identify the "keyword" in the table title, into these categories
        - If mention composition then "composition"
        - If mention constant composition expansion or constant mass expansion then "CCE"
        - If mention constant volume depletion then "CVD"
        - If mention differential liberation expansion then "DLE"
        - If mention multistage separator then "MSS"
        - If mention viscosity then "VISCO"
     - Identify the "sample_name" from keywords like Cylinder, Sample, Chamber number, or if it is sample pair
     - Identify the "page_number"

    JSON response:

    {
        "page": "....",
        "list_content": [
            {
                "title": "...",
                "keyword": "composition",
                "sample_name": null,
                "page_number": 1
            },
            {
                "title": "...",
                "keyword": "CCE"
                "sample_name": "A01",
                "page_number": 2
            },
            {
                "title": "...",
                "keyword": "CVD",
                "sample_name": "A01+A02",
                "page_number": 3
            }
        ]
    }

   - 1.3 If the page consists of texts with table:
     - 1.3.1 If the page displays "sample inventory" or "sample summary" table:
       - This type of page can be recognized by structure of the table. If the table has Sample ID/name or Bottle no in the y-axis, and properties in the x-axis
       - Properties reported in this summary table such as sampling depth, GOR, density, molecular weight, reservoir temperature, reservoir pressure (Pres), viscosity
       - Do not confuse this table with experiment table
       - Extract data into the "sample_inventory" JSON schema.
       - Extract other relevant information into "Other_information".
       - If you do not find any of the keys, DO NOT create the key
       - Identify title of each table and decide the "type"
            - If mention MDT oil, then "type": "OFT"
            - If mention MDT water, then "type": "WATER"

       Example JSON:
        {
          "page": "...",
          "sample_inventory": {
            "data": [
              {
                "sample_name": "1.01",
                "type": "OFT", # put "OFT" if mention MDT oil, "WATER" if mention MDT water
                "sampling_date": "2023-04-26", # If mention Transfer Date
                "well_id": "23/1", # Well name
                "basin_id": null,
                "sub_basin_id": null,
                "field_id": "Volve", # Field name
                "field_segment_id": null,
                "formation_id": "Realgrunnen", # Formation name
                "formation_zone_id": null,
                "reservoir_pressure": 182.0,
                "reservoir_pressure_unit": "bara",
                "reservoir_temperature": 69.8,
                "reservoir_temperature_unit": "C",
                "true_vertical_depth": 1929.0, # If mention sampling depth m TVDSS (true vertical depth sub sea)
                "true_vertical_depth_unit": "m",
                "measured_depth": 1984.5, # If mention sampling depth m MD (measured depth)
                "measured_depth_unit": "m",
                "pressure_at_lab": 400.0,
                "pressure_at_lab_unit": "bara",
                "temperature_at_lab": 80.0,
                "temperature_at_lab_unit": "C",
                "pressure_when_sampled": 100,
                "pressure_when_sampled_unit": "bara",
                "temperature_when_sampled": 23,
                "temperature_when_sampled_unit": "C",
                "top_perforation_depth": 2000,
                "top_perforation_depth_unit": "m",
                "bottom_perforation_depth": 3000,
                "bottom_perforation_depth_unit": "m",
                "transfer_pressure": 450.0,
                "transfer_pressure_unit": "bara",
                "transfer_temperature": 80.0,
                "transfer_temperature_unit": "C",
                "drawdown_pressure": 100,
                "drawdown_pressure_unit": "bara",
                "flashed_oil_contamination": 2.0, # If mention Mud filtrate contamination in STO
                "flashed_oil_contamination": "mass%", # If the unit mentioned is Wt%
                "fluid_type": "Oil",
                "mud_base": "Oil", # put "Oil" if mention OBM, or "Water" if mention WBM
                //... # Other parameters
              },
              {
                "Sample Type": "REC", # If mention Recombined
                # Same as above
                //...
              }
            ]
          },
          "Other_information": {
            "remarks": "Additional details can be provided here."
          }
        }

   - 1.4 If the page consists of a table:
     - 1.4.1 If the page consists of an Information table or descriptions:
       - Extract physical parameters and values into a structured JSON format.
       - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
         - If found, set "sample_name" accordingly.
         - If not found, set "sample_name" to null.

       Important data:

       - If you find "density of stock tank oil", put into key "flashed_oil_density", then fill "flashed_oil_density_unit"
       - If you see gas oil ratio (GOR), put into key "recombined_fluid_gor", then fill "recombined_fluid_gor_unit

       Getting 'flashed_oil_temperature':
       If you see the following

        ```
        Separation conditions:    From:  80.0 °C and   400 bara
                                  To:    25.5 °C and   atm. pressure
        ```

       In this case, "flashed_oil_temperature": 25.5, "flashed_oil_temperature_unit": "C"
       Pick the number after "To:   " before "and atm.pressure"

       Example JSON:
        {
            "page": "...",
            "sample_name": "...",
            "parameter1": "...",
            "parameter1_unit": "...",
            "parameter2": "...",
            "parameter2_unit": "...",
            "parameter3": "...",
            "parameter4_unit": "...",

            # Important data
            "flashed_oil_density": ...,
            "flashed_oil_density_unit": "...",
            "flashed_oil_temperature": 20.5,
            "flashed_oil_temperature_unit": "C",
            "recombined_fluid_gor": ...,
            "recombined_fluid_gor_unit": "...",
            et cetera ...
        }

     - 1.4.2 If the page contains a Composition table :

        - Dynamically identify each fluid-type group by reading the top header row(s), matching these synonyms:
          - flashed_oil ↔ "Stock tank oil", "Flashed Liquid", "Stock tank oil"
          - flashed_gas ↔ "Stock tank gas", "Flashed gas"
          - recombined_fluid ↔ "Monophasic fluid", "Reservoir fluid"
        - Under each fluid-type header, locate its two sub-columns: one labeled "Mole %" → molar_amount, the other "Weight %" → mass_amount.
        - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
            - If found, set "sample_name" accordingly.
            - Sample name is just like ID consist of letter and number, without C10+ or C36+
            - If not found, set "sample_name" to null.
        - If the table title says "uncorrected" or "corrected", set "uncorrected": true/false.
        - Identify "last_component" from the final row label (e.g. "C36+"), include units on every top-level number, and fill only the keys in the prescribed schema—do not invent new ones.

        IMPORTANT!!!
        - In case there is blank cell in the table (value not reported)
        - If you do not find BOTH molar amount and mass amount of a component, do not extract it into JSON

        Example table with blanks:

      |Component         | Stock tank gas    | Stock tank oil    |  Reservoir fluid   | Mol weight  |
      |Mole%             | Weight% | Mole%   | Weight% | Mole%   |  Mole%   | Weight% |             |
      |Nitrogen          | 0.157   | 0.183   |         |         |  0.084   | 0.024   | 28.02       |
      |Carbon Dioxide    | 6.582   | 12.048  |         |         |  3.509   | 1.555   | 44.01       |
      |Hydrogen Sulphide | 0       | 0       |         |         |  0       | 0       | 34.08       |
      |Methane           | 73.927  | 49.324  | 0.115   | 0.01    |  39.466  | 6.376   | 16.04       |
      |Ethane            | 8.997   | 11.251  | 0.222   | 0.036   |  4.9     | 1.484   | 30.07       |


        Result JSON (referring to the table):

{
    "page": ...,
    "sample_name": "A001", # The name of sample
    "uncorrected": true, # false or null
    "last_component": "C10+",
    "flashed_oil_mw": 151.9, # oil molecular weight or MW
    "flashed_oil_density": 0.777, # oil density at stock-tank condition 15 degC
    "flashed_oil_density_unit": "g/cm3", # g/cm3, kg/m3
    "flashed_oil_temperature": 60.0, # temperature at flash
    "flashed_oil_temperature_unit": "F", # F, C, K, R
    "flashed_oil_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide molar_amount and mass_amount is null, so no need to extract
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 0.115,
                "mass_amount": 0.01
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 0.222,
                "mass_amount": 0.036
            }
        ]
    },
    "flashed_gas_mw": 23.4, # gas molecular weight or MW
    "flashed_gas_specific_gravity": 0.808, # also called relative density or ideal
    "flashed_gas_specific_gravity_unit": "SG", # if unit not mentioned then most likely SG
    "flashed_gas_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide has molar_amount and mass_amount, so extract it
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.157,
                "mass_amount": 0.183
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 6.582,
                "mass_amount": 12.048
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 73.997,
                "mass_amount": 49.324
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 8.997,
                "mass_amount": 11.251
            }
        ]
    },

    # Recombined is sometimes called as Reservoir Fluid or Monophasic
    "recombined_fluid_mw": 30.2, # reservoir fluid MW
    "recombined_fluid_gor": 12200.8, # Gas oil ratio or gas liquid ratio (GLR) or Rs
    "recombined_fluid_gor_unit": "scf/STB", # scf/STB, Sm3/Sm3, Sm3/m3, scf/bbl
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.084,
                "mass_amount": 0.024
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 3.509,
                "mass_amount": 1.555
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 39.466,
                "mass_amount": 6.376
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 4.9,
                "mass_amount": 1.484
            }
        ]
    }
}
     - 1.4.3 If the page contains a Constant Composition Expansion (CCE) or Constant Mass Expansion (CME) table:
       - Identify measurement units for parameters.
       - Always put as "CCE" not "CME"
       - Extract data and structure into the "experiments" JSON key.
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Stages 'order' key must always start from 0
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column name | Key
       --------|-----------
       Relative Volume (column) | relative_total_volume
       Relative Volumes (Vs/Vs,BP) | relative_total_volume
       RLD (column) | relative_oil_volume
       % Liq/Sat (Vliq/Vsat) | relative_oil_volume

       Note: relative_oil_volume always null BEFORE the saturation_pressure=True

       - You must stick to the following units

        Variable | Unit
        --------|-----------
        relative_total_volume_unit | Vtot/Vsat

       Example JSON:


{
    "page" : ...,
    "sample_name": ...,
    "experiments": [
        {
            "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
            "sample_name": 1184,
            "name": "Constant Composition Expansion",
            "type": "CCE",
            "temperature": 106.0,
            "temperature_unit": "C",
            "pressure_unit": "psia",
            "relative_oil_volume_unit": "Vo/Vsat (%)",
            "single_phase_density_unit": "g/cm3",
            "relative_total_volume_unit": "Vtot/Vsat",
            "stages": [
                {
                    "pressure": 9000.0,
                    "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                    "relative_oil_volume": null,
                    "relative_total_volume": 0.79,
                    "single_phase_density": 0.422,
                    "z_factor": 1.407
                },
                // Other stages ...
                {
                    "pressure": 3011.0,
                    "is_saturation_pressure": false,
                    "relative_oil_volume": 14.37,
                    "relative_total_volume": 1.315,
                    "single_phase_density": null,
                    "z_factor": null
                }
            ]
        }
    ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) COMPOSITION:
       - You put the page in this category if you see keywords "Constant Volume Depletion" and chemical component
       - Please Read the WHOLE COLUMNS of TABLE
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true

       - If the columns like this: 2600 psia, 2010 psia, 1000 psia, Residual Oil
          - Put the pressures columns inside Liberated Gas schema
          - Put the Residual Oil column inside Final Stage Oil schema

       - Liberated Gas structure:
          - Put each of the "pressure" inside "stages" key
          - Put ALL the "components" and its "molar_amount" inside each "pressure" which it refers to

        Structure:

{
  "sample_name": null,
  "experiments": [
    {
      "sample_name": null,
      "continued": false,
      "saturation_pressure_type": "Dewpoint",
      "name": "Constant Volume Depletion",
      "type": "CVD",
      "temperature": 106.0,
      "temperature_unit": "C",

      # First type
      "liberated_gas_compositions": {
        "components": [
          {
            "input_name": "CO2",
            "mw": 44.01
          },
          {
            "input_name": "Other",
            "mw": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0
          }
        ],
        "stages": [
          {
            "pressure": 2600,
            "composition": [
              {
                "component_name": "CO2",
                "molar_amount": 0.305
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "C30+",
                "molar_amount": 0.087
              }
            ]
          },
          {
            "pressure": 1300,
            "composition": [
              {
                "component_name": "2M-C6",
                "molar_amount": 0.123
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "Toluene",
                "molar_amount": 0.037
              }
            ]
          }
        ]
      },

       - Residual Oil structure:
          - Put ALL the "components" and its "molar_amount" inside "composition" key
          - Get the "final_stage_oil_mw" from the last row of table if mentioning "MW"

        Structure:

      # Second type
      "final_stage_oil_mw": 100.14,
      "final_stage_oil_density": 630.0,
      "final_stage_oil_density_unit": "kg/m3",
      "stock_tank_oil_density": 630.0,
      "stock_tank_oil_density_unit": "kg/m3",
      "final_stage_oil_composition": {
        "components": [
          {
            "input_name": "CO2",
            "mw": null,
            "molar_amount": 0.213,
            "mass_amount": null
          },
          {
            "input_name": "Other",
            "mw": null,
            "molar_amount": null,
            "mass_amount": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0,
            "molar_amount": 0.553,
            "mass_amount": null
          }
        ]
      }
    }
  ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) PROPERTIES table:
       - You put into this category If you see Pressure as row and Physical Properties as column (No composition)
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column Name | Key
       --------|-----------
       Total Recovery (mole %) | cumulative_moles_removed
       Liq. Density (g/cc) | oil_density

        Example JSON:

      {
          "sample_name": ..., # Put sample ID here
          "experiments": [
              {
                  "sample_name": ...,
                  "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                  "name": "Constant Volume Depletion",
                  "type": "CVD",
                  "temperature": 106.0,
                  "temperature_unit": "C",
                  "pressure_unit": "psia",
                  "oil_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_viscosity_unit": "...", # "cP"
                  "relative_oil_volume_unit": "...", # "%"
                  "incremental_moles_removed_unit": "...", # "%"
                  "cumulative_moles_removed_unit": "...", # "%"

                  # Properties data
                  "stages": [
                      # Fill here if the table displays properties as row and pressure as column, or otherwise
                      {
                          "pressure": 4661.0,
                          "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                          "relative_oil_volume": 0.0,
                          "incremental_moles_removed": null, # "%"
                          "cumulative_moles_removed": 0.0,
                          "oil_density": null,
                          "gas_z_factor": 0.922,
                          "gas_specific_gravity": null,
                          "gas_density": 0.339,
                          "gas_viscosity": 0.042,
                          "gas_plus_fraction_mw": null,
                      },
                      {
                          // Other stages ...
                      }
                      {
                          "pressure": 1300.0,
                          "is_saturation_pressure": false,
                          "relative_oil_volume": 13.18,
                          "incremental_moles_removed": null,
                          "cumulative_moles_removed": 67.06,
                          "oil_density": 0.63,
                          "gas_z_factor": 0.874,
                          "gas_specific_gravity": null,
                          "gas_density": 0.075,
                          "gas_viscosity": 0.015,
                          "gas_plus_fraction_mw": null,
                      }
                  ]
              }
          ]
      }

     - 1.4.5 If the page contains a Multi-Stage Separator (MSS) or Three Stage Separator table:
       - If you see "Two Stage", "Three Stage", "Four Stage" Separator, it is MSS. But, "Single Stage" is NOT MSS
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Stock tank oil data: If the title mention stock tank or tank oil
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If you see "Pressure Atm. bara", it means "pressure": 1 (atmospheric pressure means 1 bara)
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON

        Exception:
       - If you find page with title "Bo and GOR from Three Stage Separator test during depletion using the results from Differential Liberation ...", DO NOT extract the data.

        Example JSON:
{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                    "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                    "name": "Multi-stage Separator",
                    "type": "MSS",
                    "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "Dodecanes Plus",
                            "mw": null
                        }
                    ],
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.7579
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0024
                                }
                            ]
                        },
                        {
                            "stage_number": 1,
                            "composition": [
                                {
                                    "stage_number": 1,
                                    "component_name": "C1",
                                    "molar_amount": 0.6791
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 1,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0022
                                }
                            ]
                        },
                        {
                            "stage_number": 2,
                            "composition": [
                                {
                                    "stage_number": 2,
                                    "component_name": "C1",
                                    "molar_amount": 0.1999
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 2,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.019
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Stock tank oil
                "stock_tank_oil_molecular_weight": 145.78,
                "stock_tank_oil_density": 0.7843,
                "stock_tank_oil_density_unit": "g/cm3",
                "stock_tank_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.013,
                            "mass_amount": 0.0107
                        }
                    ]
                },
                "pressure_unit": "psia",
                "temperature_unit": "F",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",

                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 3724.0,
                        "is_saturation_pressure": true,
                        "temperature": 230.0,
                        "gor": 1802.83,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.1783,
                        "oil_density": 0.5016,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "temperature": 60.0,
                        "gor": 0.0,
                        "liberated_gas": 1802.83,
                        "oil_fvf": 1.0,
                        "oil_density": 0.7843,
                        "gas_z_factor": 0.9892,
                        "gas_specific_gravity": 1.316,
                        "gas_density": null,
                        "gas_viscosity": null
                    }
                ]
            }
    ]
}


     - 1.4.6 If the page contains a Differential Liberation (DLE) or Differential Vaporization (DV) table:
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Residual oil data: If mention residual oil or final stage
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity
       gas-oil ratio solution** | gor

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON
       ** in "Gas-Oil Ratio" column if you find "solution" and "liberated", take the "solution" and put to "gor" key in JSON

        Example JSON:

{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                "name": "Differential Liberation Expansion",
                "type": "DLE",
                "temperature": 229.7,
                "temperature_unit": "F",
                "dle_experiment_type": "Standard DLE Experiment",

                # // First part, Liberated gas
                "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "N2",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "C7+",
                            "mw": 114.01
                        }
                    ],
                    # Fill here if the table displays component as row and pressure as column, or otherwise
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.6859 # Composition in mole percent
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0085
                                }
                            ]
                        },
                        {
                            // Other stages ...
                        },
                        {
                            "stage_number": 9,
                            "composition": [
                                {
                                    "stage_number": 9,
                                    "component_name": "C1",
                                    "molar_amount": 0.1309
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 9,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0629
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Residual oil
                "evolved_gas_specific_gravity": null,
                "evolved_gas_composition_id": null,
                "evolved_gas_composition": null,
                "average_residual_oil_mw": 179.43,
                "average_residual_oil_density": 0.8128,
                "average_residual_oil_density_unit": "g/cm3",
                "residual_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.019,
                            "mass_amount": 0.0127
                        }
                    ]
                },
                "pressure_unit": "psia",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",
                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 8513.0,
                        "is_saturation_pressure": true,
                        "gor": 2847.67,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.5407,
                        "oil_density": 0.5714,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "gor": 0.0,
                        "liberated_gas": 2847.67,
                        "oil_fvf": 1.0975,
                        "oil_density": 0.7471,
                        "gas_z_factor": 0.9887,
                        "gas_specific_gravity": 2.1686,
                        "gas_density": null,
                        "gas_viscosity": 0.00925
                    }
                ]
            }
    ]
}

     - 1.4.7 If the page contains a Viscosity experiment (VISCO) table:
       - Identify measurement units for parameters.
       - Viscosity table has pressure as y-axis and viscosities as x-axis
       - Extract viscosity data and structure into "experiments".
       - Never come up with new structures or keys, just fill up in the specified JSON schema.

        Example JSON:

{
    "page": ...,
    "sample_name": ...,
    "experiments": [
        {
            "name": "Oil Viscosity",
            "type": "VISCO",
            "temperature": 229.7,
            "temperature_unit": "F",
            "pressure_unit": "psia",
            "oil_viscosity_unit": "cP",
            "gas_viscosity_unit": "cP",
            "stages": [
                {
                    "visco_id": 1018,
                    "pressure": 5413.0,
                    "oil_viscosity": 0.088,
                    "gas_viscosity": null
                },
                {
                    // Other stages ...
                },
                {
                    "visco_id": 1018,
                    "pressure": 13.0,
                    "oil_viscosity": 0.749,
                    "gas_viscosity": 0.00925
                }
            ]
        }
    ]
}

2. If any summary data or descriptive information is found:
   - Include it as key "Other_information", outside the "experiments" key in JSON.

   Example JSON:
   {
       "solution_gas_oil_ratio": 100,
       "separator_volume_factor": 300,
       "solution_gas_oil_ratio_unit": "scf/stb",
       "separator_volume_factor_unit": "bbl",
       ......
   }

3. Finally, you must stick to the following units

Unit shown | Unit in JSON
--------|-----------
g/cc | g/cm3
mole% | %
Vol/Vol | Sm3/Sm3
scf/sep bbl | scf/bbl
kg/Sm3 | kg/m3
psi | psia
Air=1 | SG

4. If you find Figure in the page, DO NOT extract any data from it. Just extract the title into json.

  {
    "figure_title": "Plot of dewpoint pressure"
  }

5. Dealing with Paraffinic-Naphtenes-Aromatics (PNA) composition

In some cases, PNA can be reported in compositional table, DLE liberated gas, or MSS liberated gas.

For example:

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| n-Hexane          | 0.086   | 0.351     | 86.2  |
| iso-Paraffins     | 0.154   | 0.627     | 86.2  |
| Naphthenes        | 0.033   | 0.109     | 70.1  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |
| n-Heptane         | 0.014   | 0.067     | 100.2 |
| iso-Paraffins     | 0.038   | 0.181     | 100.2 |
| Naphthenes        | 0.116   | 0.476     | 86.6  |
| Aromatics         | 0.030   | 0.112     | 78.1  |

You see for every C6 total and C7 total, there are iso-Paraffins (P), Naphthenes (N), and Aromatics (A).

Remove these PNA, so you just have C6 total and C7 total.

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |

From here, you just extract into corresponding JSON schema as defined in instructions 1 until 4
"
            }
          ]
        },
        {
          "role":"model",
          "parts":[
            {
              "text":"{
    "page": "26 of 119",
    "sample_name": "MPCT-2210580",
    "recombined_fluid_gor": 53.5,
    "recombined_fluid_gor_unit": "Sm3/Sm3",
    "flashed_oil_density": 910.8,
    "flashed_oil_density_unit": "kg/m3",
    "flashed_oil_temperature": 24.5,
    "flashed_oil_temperature_unit": "C",
    "flashed_gas_specific_gravity": 0.609,
    "flashed_gas_specific_gravity_unit": "SG",
    "flashed_oil_mw": 334.7,
    "flashed_oil_mw_unit": "g/mol",
    "flashed_oil_c7_plus_mw": 336.0,
    "flashed_oil_c7_plus_mw_unit": "g/mol",
    "flashed_oil_c7_plus_density": 911.0,
    "flashed_oil_c7_plus_density_unit": "kg/m3",
    "flashed_oil_c10_plus_mw": 340.0,
    "flashed_oil_c10_plus_mw_unit": "g/mol",
    "flashed_oil_c10_plus_density": 912.0,
    "flashed_oil_c10_plus_density_unit": "kg/m3",
    "Other_information": {
        "sampling_depth": 1984.5,
        "sampling_depth_unit": "m MD",
        "separation_conditions_from_temperature": 80.0,
        "separation_conditions_from_temperature_unit": "C",
        "separation_conditions_from_pressure": 400.0,
        "separation_conditions_from_pressure_unit": "bara",
        "separation_conditions_to_temperature": 24.5,
        "separation_conditions_to_temperature_unit": "C",
        "separation_conditions_to_pressure": 1.0,
        "separation_conditions_to_pressure_unit": "atm",
        "standard_conditions_gas_temperature": 15.0,
        "standard_conditions_gas_temperature_unit": "C",
        "standard_conditions_gas_pressure": 1.01325,
        "standard_conditions_gas_pressure_unit": "bara",
        "standard_conditions_oil_temperature": 15.0,
        "standard_conditions_oil_temperature_unit": "C",
        "standard_conditions_oil_pressure": 1.0,
        "standard_conditions_oil_pressure_unit": "atm"
    }
}"
            }
          ]
        }
    ]}
{"contents":[
        {
          "role":"user",
          "parts":[
            {
              "fileData":{
                "mimeType":"image/jpeg",
                "fileUri":"https://github.com/yohanesnuwara/sft-finetune-gemini/blob/main/images/RS-113242%20Preliminary%20Results_v4%20-%20%C3%98st%20Frigg_page-0029.jpg"
              }
            },
            {
              "text":"OCR the following page into complete JSON.

Your task is to parse and extract as many infomation as possible from the page and put into JSON like specified

Never come up with new structures or keys, just fill up in the specified JSON schema.

Page can be either full texts, full table, or texts with table.

1. Identify the type of page:
   - 1.1 If the page consists only of texts:

      Parse sentences into JSON and do not give full sentence or summary

      Example sentence:

      "Two sets of sample (CL01 & CL02) is transferred at 15 deg C and pressure 1 atm" (page A.1)

      JSON response

      {
          "page": "A.1",
          "conditioning": {
              "samples": ["CL01", "CL02"],
              "transfer_temp": 15,
              "transfer_temp_unit": "C",
              "transfer_pressure": 1,
              "transfer_pressure_unit": "atm"
              // ...
          }
      }

      Try to find these parameters inferred from "flash" keyword
      {
        "sep_pressure": ...,
        "sep_pressure_unit": ...,
        "sep_temperature": ...,
        "sep_temperature_unit": ...,
      }



   - 1.2 If the page consists of table of contents
     - Put each table title from the list in key "table_title"
     - Identify the "keyword" in the table title, into these categories
        - If mention composition then "composition"
        - If mention constant composition expansion or constant mass expansion then "CCE"
        - If mention constant volume depletion then "CVD"
        - If mention differential liberation expansion then "DLE"
        - If mention multistage separator then "MSS"
        - If mention viscosity then "VISCO"
     - Identify the "sample_name" from keywords like Cylinder, Sample, Chamber number, or if it is sample pair
     - Identify the "page_number"

    JSON response:

    {
        "page": "....",
        "list_content": [
            {
                "title": "...",
                "keyword": "composition",
                "sample_name": null,
                "page_number": 1
            },
            {
                "title": "...",
                "keyword": "CCE"
                "sample_name": "A01",
                "page_number": 2
            },
            {
                "title": "...",
                "keyword": "CVD",
                "sample_name": "A01+A02",
                "page_number": 3
            }
        ]
    }

   - 1.3 If the page consists of texts with table:
     - 1.3.1 If the page displays "sample inventory" or "sample summary" table:
       - This type of page can be recognized by structure of the table. If the table has Sample ID/name or Bottle no in the y-axis, and properties in the x-axis
       - Properties reported in this summary table such as sampling depth, GOR, density, molecular weight, reservoir temperature, reservoir pressure (Pres), viscosity
       - Do not confuse this table with experiment table
       - Extract data into the "sample_inventory" JSON schema.
       - Extract other relevant information into "Other_information".
       - If you do not find any of the keys, DO NOT create the key
       - Identify title of each table and decide the "type"
            - If mention MDT oil, then "type": "OFT"
            - If mention MDT water, then "type": "WATER"

       Example JSON:
        {
          "page": "...",
          "sample_inventory": {
            "data": [
              {
                "sample_name": "1.01",
                "type": "OFT", # put "OFT" if mention MDT oil, "WATER" if mention MDT water
                "sampling_date": "2023-04-26", # If mention Transfer Date
                "well_id": "23/1", # Well name
                "basin_id": null,
                "sub_basin_id": null,
                "field_id": "Volve", # Field name
                "field_segment_id": null,
                "formation_id": "Realgrunnen", # Formation name
                "formation_zone_id": null,
                "reservoir_pressure": 182.0,
                "reservoir_pressure_unit": "bara",
                "reservoir_temperature": 69.8,
                "reservoir_temperature_unit": "C",
                "true_vertical_depth": 1929.0, # If mention sampling depth m TVDSS (true vertical depth sub sea)
                "true_vertical_depth_unit": "m",
                "measured_depth": 1984.5, # If mention sampling depth m MD (measured depth)
                "measured_depth_unit": "m",
                "pressure_at_lab": 400.0,
                "pressure_at_lab_unit": "bara",
                "temperature_at_lab": 80.0,
                "temperature_at_lab_unit": "C",
                "pressure_when_sampled": 100,
                "pressure_when_sampled_unit": "bara",
                "temperature_when_sampled": 23,
                "temperature_when_sampled_unit": "C",
                "top_perforation_depth": 2000,
                "top_perforation_depth_unit": "m",
                "bottom_perforation_depth": 3000,
                "bottom_perforation_depth_unit": "m",
                "transfer_pressure": 450.0,
                "transfer_pressure_unit": "bara",
                "transfer_temperature": 80.0,
                "transfer_temperature_unit": "C",
                "drawdown_pressure": 100,
                "drawdown_pressure_unit": "bara",
                "flashed_oil_contamination": 2.0, # If mention Mud filtrate contamination in STO
                "flashed_oil_contamination": "mass%", # If the unit mentioned is Wt%
                "fluid_type": "Oil",
                "mud_base": "Oil", # put "Oil" if mention OBM, or "Water" if mention WBM
                //... # Other parameters
              },
              {
                "Sample Type": "REC", # If mention Recombined
                # Same as above
                //...
              }
            ]
          },
          "Other_information": {
            "remarks": "Additional details can be provided here."
          }
        }

   - 1.4 If the page consists of a table:
     - 1.4.1 If the page consists of an Information table or descriptions:
       - Extract physical parameters and values into a structured JSON format.
       - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
         - If found, set "sample_name" accordingly.
         - If not found, set "sample_name" to null.

       Important data:

       - If you find "density of stock tank oil", put into key "flashed_oil_density", then fill "flashed_oil_density_unit"
       - If you see gas oil ratio (GOR), put into key "recombined_fluid_gor", then fill "recombined_fluid_gor_unit

       Getting 'flashed_oil_temperature':
       If you see the following

        ```
        Separation conditions:    From:  80.0 °C and   400 bara
                                  To:    25.5 °C and   atm. pressure
        ```

       In this case, "flashed_oil_temperature": 25.5, "flashed_oil_temperature_unit": "C"
       Pick the number after "To:   " before "and atm.pressure"

       Example JSON:
        {
            "page": "...",
            "sample_name": "...",
            "parameter1": "...",
            "parameter1_unit": "...",
            "parameter2": "...",
            "parameter2_unit": "...",
            "parameter3": "...",
            "parameter4_unit": "...",

            # Important data
            "flashed_oil_density": ...,
            "flashed_oil_density_unit": "...",
            "flashed_oil_temperature": 20.5,
            "flashed_oil_temperature_unit": "C",
            "recombined_fluid_gor": ...,
            "recombined_fluid_gor_unit": "...",
            et cetera ...
        }

     - 1.4.2 If the page contains a Composition table :

        - Dynamically identify each fluid-type group by reading the top header row(s), matching these synonyms:
          - flashed_oil ↔ "Stock tank oil", "Flashed Liquid", "Stock tank oil"
          - flashed_gas ↔ "Stock tank gas", "Flashed gas"
          - recombined_fluid ↔ "Monophasic fluid", "Reservoir fluid"
        - Under each fluid-type header, locate its two sub-columns: one labeled "Mole %" → molar_amount, the other "Weight %" → mass_amount.
        - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
            - If found, set "sample_name" accordingly.
            - Sample name is just like ID consist of letter and number, without C10+ or C36+
            - If not found, set "sample_name" to null.
        - If the table title says "uncorrected" or "corrected", set "uncorrected": true/false.
        - Identify "last_component" from the final row label (e.g. "C36+"), include units on every top-level number, and fill only the keys in the prescribed schema—do not invent new ones.

        IMPORTANT!!!
        - In case there is blank cell in the table (value not reported)
        - If you do not find BOTH molar amount and mass amount of a component, do not extract it into JSON

        Example table with blanks:

      |Component         | Stock tank gas    | Stock tank oil    |  Reservoir fluid   | Mol weight  |
      |Mole%             | Weight% | Mole%   | Weight% | Mole%   |  Mole%   | Weight% |             |
      |Nitrogen          | 0.157   | 0.183   |         |         |  0.084   | 0.024   | 28.02       |
      |Carbon Dioxide    | 6.582   | 12.048  |         |         |  3.509   | 1.555   | 44.01       |
      |Hydrogen Sulphide | 0       | 0       |         |         |  0       | 0       | 34.08       |
      |Methane           | 73.927  | 49.324  | 0.115   | 0.01    |  39.466  | 6.376   | 16.04       |
      |Ethane            | 8.997   | 11.251  | 0.222   | 0.036   |  4.9     | 1.484   | 30.07       |


        Result JSON (referring to the table):

{
    "page": ...,
    "sample_name": "A001", # The name of sample
    "uncorrected": true, # false or null
    "last_component": "C10+",
    "flashed_oil_mw": 151.9, # oil molecular weight or MW
    "flashed_oil_density": 0.777, # oil density at stock-tank condition 15 degC
    "flashed_oil_density_unit": "g/cm3", # g/cm3, kg/m3
    "flashed_oil_temperature": 60.0, # temperature at flash
    "flashed_oil_temperature_unit": "F", # F, C, K, R
    "flashed_oil_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide molar_amount and mass_amount is null, so no need to extract
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 0.115,
                "mass_amount": 0.01
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 0.222,
                "mass_amount": 0.036
            }
        ]
    },
    "flashed_gas_mw": 23.4, # gas molecular weight or MW
    "flashed_gas_specific_gravity": 0.808, # also called relative density or ideal
    "flashed_gas_specific_gravity_unit": "SG", # if unit not mentioned then most likely SG
    "flashed_gas_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide has molar_amount and mass_amount, so extract it
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.157,
                "mass_amount": 0.183
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 6.582,
                "mass_amount": 12.048
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 73.997,
                "mass_amount": 49.324
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 8.997,
                "mass_amount": 11.251
            }
        ]
    },

    # Recombined is sometimes called as Reservoir Fluid or Monophasic
    "recombined_fluid_mw": 30.2, # reservoir fluid MW
    "recombined_fluid_gor": 12200.8, # Gas oil ratio or gas liquid ratio (GLR) or Rs
    "recombined_fluid_gor_unit": "scf/STB", # scf/STB, Sm3/Sm3, Sm3/m3, scf/bbl
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.084,
                "mass_amount": 0.024
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 3.509,
                "mass_amount": 1.555
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 39.466,
                "mass_amount": 6.376
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 4.9,
                "mass_amount": 1.484
            }
        ]
    }
}
     - 1.4.3 If the page contains a Constant Composition Expansion (CCE) or Constant Mass Expansion (CME) table:
       - Identify measurement units for parameters.
       - Always put as "CCE" not "CME"
       - Extract data and structure into the "experiments" JSON key.
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Stages 'order' key must always start from 0
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column name | Key
       --------|-----------
       Relative Volume (column) | relative_total_volume
       Relative Volumes (Vs/Vs,BP) | relative_total_volume
       RLD (column) | relative_oil_volume
       % Liq/Sat (Vliq/Vsat) | relative_oil_volume

       Note: relative_oil_volume always null BEFORE the saturation_pressure=True

       - You must stick to the following units

        Variable | Unit
        --------|-----------
        relative_total_volume_unit | Vtot/Vsat

       Example JSON:


{
    "page" : ...,
    "sample_name": ...,
    "experiments": [
        {
            "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
            "sample_name": 1184,
            "name": "Constant Composition Expansion",
            "type": "CCE",
            "temperature": 106.0,
            "temperature_unit": "C",
            "pressure_unit": "psia",
            "relative_oil_volume_unit": "Vo/Vsat (%)",
            "single_phase_density_unit": "g/cm3",
            "relative_total_volume_unit": "Vtot/Vsat",
            "stages": [
                {
                    "pressure": 9000.0,
                    "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                    "relative_oil_volume": null,
                    "relative_total_volume": 0.79,
                    "single_phase_density": 0.422,
                    "z_factor": 1.407
                },
                // Other stages ...
                {
                    "pressure": 3011.0,
                    "is_saturation_pressure": false,
                    "relative_oil_volume": 14.37,
                    "relative_total_volume": 1.315,
                    "single_phase_density": null,
                    "z_factor": null
                }
            ]
        }
    ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) COMPOSITION:
       - You put the page in this category if you see keywords "Constant Volume Depletion" and chemical component
       - Please Read the WHOLE COLUMNS of TABLE
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true

       - If the columns like this: 2600 psia, 2010 psia, 1000 psia, Residual Oil
          - Put the pressures columns inside Liberated Gas schema
          - Put the Residual Oil column inside Final Stage Oil schema

       - Liberated Gas structure:
          - Put each of the "pressure" inside "stages" key
          - Put ALL the "components" and its "molar_amount" inside each "pressure" which it refers to

        Structure:

{
  "sample_name": null,
  "experiments": [
    {
      "sample_name": null,
      "continued": false,
      "saturation_pressure_type": "Dewpoint",
      "name": "Constant Volume Depletion",
      "type": "CVD",
      "temperature": 106.0,
      "temperature_unit": "C",

      # First type
      "liberated_gas_compositions": {
        "components": [
          {
            "input_name": "CO2",
            "mw": 44.01
          },
          {
            "input_name": "Other",
            "mw": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0
          }
        ],
        "stages": [
          {
            "pressure": 2600,
            "composition": [
              {
                "component_name": "CO2",
                "molar_amount": 0.305
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "C30+",
                "molar_amount": 0.087
              }
            ]
          },
          {
            "pressure": 1300,
            "composition": [
              {
                "component_name": "2M-C6",
                "molar_amount": 0.123
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "Toluene",
                "molar_amount": 0.037
              }
            ]
          }
        ]
      },

       - Residual Oil structure:
          - Put ALL the "components" and its "molar_amount" inside "composition" key
          - Get the "final_stage_oil_mw" from the last row of table if mentioning "MW"

        Structure:

      # Second type
      "final_stage_oil_mw": 100.14,
      "final_stage_oil_density": 630.0,
      "final_stage_oil_density_unit": "kg/m3",
      "stock_tank_oil_density": 630.0,
      "stock_tank_oil_density_unit": "kg/m3",
      "final_stage_oil_composition": {
        "components": [
          {
            "input_name": "CO2",
            "mw": null,
            "molar_amount": 0.213,
            "mass_amount": null
          },
          {
            "input_name": "Other",
            "mw": null,
            "molar_amount": null,
            "mass_amount": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0,
            "molar_amount": 0.553,
            "mass_amount": null
          }
        ]
      }
    }
  ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) PROPERTIES table:
       - You put into this category If you see Pressure as row and Physical Properties as column (No composition)
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column Name | Key
       --------|-----------
       Total Recovery (mole %) | cumulative_moles_removed
       Liq. Density (g/cc) | oil_density

        Example JSON:

      {
          "sample_name": ..., # Put sample ID here
          "experiments": [
              {
                  "sample_name": ...,
                  "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                  "name": "Constant Volume Depletion",
                  "type": "CVD",
                  "temperature": 106.0,
                  "temperature_unit": "C",
                  "pressure_unit": "psia",
                  "oil_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_viscosity_unit": "...", # "cP"
                  "relative_oil_volume_unit": "...", # "%"
                  "incremental_moles_removed_unit": "...", # "%"
                  "cumulative_moles_removed_unit": "...", # "%"

                  # Properties data
                  "stages": [
                      # Fill here if the table displays properties as row and pressure as column, or otherwise
                      {
                          "pressure": 4661.0,
                          "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                          "relative_oil_volume": 0.0,
                          "incremental_moles_removed": null, # "%"
                          "cumulative_moles_removed": 0.0,
                          "oil_density": null,
                          "gas_z_factor": 0.922,
                          "gas_specific_gravity": null,
                          "gas_density": 0.339,
                          "gas_viscosity": 0.042,
                          "gas_plus_fraction_mw": null,
                      },
                      {
                          // Other stages ...
                      }
                      {
                          "pressure": 1300.0,
                          "is_saturation_pressure": false,
                          "relative_oil_volume": 13.18,
                          "incremental_moles_removed": null,
                          "cumulative_moles_removed": 67.06,
                          "oil_density": 0.63,
                          "gas_z_factor": 0.874,
                          "gas_specific_gravity": null,
                          "gas_density": 0.075,
                          "gas_viscosity": 0.015,
                          "gas_plus_fraction_mw": null,
                      }
                  ]
              }
          ]
      }

     - 1.4.5 If the page contains a Multi-Stage Separator (MSS) or Three Stage Separator table:
       - If you see "Two Stage", "Three Stage", "Four Stage" Separator, it is MSS. But, "Single Stage" is NOT MSS
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Stock tank oil data: If the title mention stock tank or tank oil
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If you see "Pressure Atm. bara", it means "pressure": 1 (atmospheric pressure means 1 bara)
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON

        Exception:
       - If you find page with title "Bo and GOR from Three Stage Separator test during depletion using the results from Differential Liberation ...", DO NOT extract the data.

        Example JSON:
{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                    "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                    "name": "Multi-stage Separator",
                    "type": "MSS",
                    "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "Dodecanes Plus",
                            "mw": null
                        }
                    ],
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.7579
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0024
                                }
                            ]
                        },
                        {
                            "stage_number": 1,
                            "composition": [
                                {
                                    "stage_number": 1,
                                    "component_name": "C1",
                                    "molar_amount": 0.6791
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 1,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0022
                                }
                            ]
                        },
                        {
                            "stage_number": 2,
                            "composition": [
                                {
                                    "stage_number": 2,
                                    "component_name": "C1",
                                    "molar_amount": 0.1999
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 2,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.019
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Stock tank oil
                "stock_tank_oil_molecular_weight": 145.78,
                "stock_tank_oil_density": 0.7843,
                "stock_tank_oil_density_unit": "g/cm3",
                "stock_tank_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.013,
                            "mass_amount": 0.0107
                        }
                    ]
                },
                "pressure_unit": "psia",
                "temperature_unit": "F",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",

                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 3724.0,
                        "is_saturation_pressure": true,
                        "temperature": 230.0,
                        "gor": 1802.83,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.1783,
                        "oil_density": 0.5016,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "temperature": 60.0,
                        "gor": 0.0,
                        "liberated_gas": 1802.83,
                        "oil_fvf": 1.0,
                        "oil_density": 0.7843,
                        "gas_z_factor": 0.9892,
                        "gas_specific_gravity": 1.316,
                        "gas_density": null,
                        "gas_viscosity": null
                    }
                ]
            }
    ]
}


     - 1.4.6 If the page contains a Differential Liberation (DLE) or Differential Vaporization (DV) table:
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Residual oil data: If mention residual oil or final stage
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity
       gas-oil ratio solution** | gor

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON
       ** in "Gas-Oil Ratio" column if you find "solution" and "liberated", take the "solution" and put to "gor" key in JSON

        Example JSON:

{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                "name": "Differential Liberation Expansion",
                "type": "DLE",
                "temperature": 229.7,
                "temperature_unit": "F",
                "dle_experiment_type": "Standard DLE Experiment",

                # // First part, Liberated gas
                "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "N2",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "C7+",
                            "mw": 114.01
                        }
                    ],
                    # Fill here if the table displays component as row and pressure as column, or otherwise
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.6859 # Composition in mole percent
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0085
                                }
                            ]
                        },
                        {
                            // Other stages ...
                        },
                        {
                            "stage_number": 9,
                            "composition": [
                                {
                                    "stage_number": 9,
                                    "component_name": "C1",
                                    "molar_amount": 0.1309
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 9,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0629
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Residual oil
                "evolved_gas_specific_gravity": null,
                "evolved_gas_composition_id": null,
                "evolved_gas_composition": null,
                "average_residual_oil_mw": 179.43,
                "average_residual_oil_density": 0.8128,
                "average_residual_oil_density_unit": "g/cm3",
                "residual_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.019,
                            "mass_amount": 0.0127
                        }
                    ]
                },
                "pressure_unit": "psia",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",
                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 8513.0,
                        "is_saturation_pressure": true,
                        "gor": 2847.67,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.5407,
                        "oil_density": 0.5714,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "gor": 0.0,
                        "liberated_gas": 2847.67,
                        "oil_fvf": 1.0975,
                        "oil_density": 0.7471,
                        "gas_z_factor": 0.9887,
                        "gas_specific_gravity": 2.1686,
                        "gas_density": null,
                        "gas_viscosity": 0.00925
                    }
                ]
            }
    ]
}

     - 1.4.7 If the page contains a Viscosity experiment (VISCO) table:
       - Identify measurement units for parameters.
       - Viscosity table has pressure as y-axis and viscosities as x-axis
       - Extract viscosity data and structure into "experiments".
       - Never come up with new structures or keys, just fill up in the specified JSON schema.

        Example JSON:

{
    "page": ...,
    "sample_name": ...,
    "experiments": [
        {
            "name": "Oil Viscosity",
            "type": "VISCO",
            "temperature": 229.7,
            "temperature_unit": "F",
            "pressure_unit": "psia",
            "oil_viscosity_unit": "cP",
            "gas_viscosity_unit": "cP",
            "stages": [
                {
                    "visco_id": 1018,
                    "pressure": 5413.0,
                    "oil_viscosity": 0.088,
                    "gas_viscosity": null
                },
                {
                    // Other stages ...
                },
                {
                    "visco_id": 1018,
                    "pressure": 13.0,
                    "oil_viscosity": 0.749,
                    "gas_viscosity": 0.00925
                }
            ]
        }
    ]
}

2. If any summary data or descriptive information is found:
   - Include it as key "Other_information", outside the "experiments" key in JSON.

   Example JSON:
   {
       "solution_gas_oil_ratio": 100,
       "separator_volume_factor": 300,
       "solution_gas_oil_ratio_unit": "scf/stb",
       "separator_volume_factor_unit": "bbl",
       ......
   }

3. Finally, you must stick to the following units

Unit shown | Unit in JSON
--------|-----------
g/cc | g/cm3
mole% | %
Vol/Vol | Sm3/Sm3
scf/sep bbl | scf/bbl
kg/Sm3 | kg/m3
psi | psia
Air=1 | SG

4. If you find Figure in the page, DO NOT extract any data from it. Just extract the title into json.

  {
    "figure_title": "Plot of dewpoint pressure"
  }

5. Dealing with Paraffinic-Naphtenes-Aromatics (PNA) composition

In some cases, PNA can be reported in compositional table, DLE liberated gas, or MSS liberated gas.

For example:

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| n-Hexane          | 0.086   | 0.351     | 86.2  |
| iso-Paraffins     | 0.154   | 0.627     | 86.2  |
| Naphthenes        | 0.033   | 0.109     | 70.1  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |
| n-Heptane         | 0.014   | 0.067     | 100.2 |
| iso-Paraffins     | 0.038   | 0.181     | 100.2 |
| Naphthenes        | 0.116   | 0.476     | 86.6  |
| Aromatics         | 0.030   | 0.112     | 78.1  |

You see for every C6 total and C7 total, there are iso-Paraffins (P), Naphthenes (N), and Aromatics (A).

Remove these PNA, so you just have C6 total and C7 total.

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |

From here, you just extract into corresponding JSON schema as defined in instructions 1 until 4
"
            }
          ]
        },
        {
          "role":"model",
          "parts":[
            {
              "text":"{
    "page": "29",
    "sample_name": "MPCT-2210580",
    "uncorrected": null,
    "last_component": "C36+",
    "flashed_oil_mw": 334.7,
    "flashed_oil_density": null,
    "flashed_oil_density_unit": null,
    "flashed_oil_temperature": null,
    "flashed_oil_temperature_unit": null,
    "flashed_oil_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 0.125,
                "mass_amount": 0.006
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 0.2,
                "mass_amount": 0.018
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 0.03,
                "mass_amount": 0.004
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 0.012,
                "mass_amount": 0.002
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 0.017,
                "mass_amount": 0.003
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.009,
                "mass_amount": 0.002
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 0.005,
                "mass_amount": 0.001
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 0.009,
                "mass_amount": 0.002
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 0.085,
                "mass_amount": 0.022
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 0.246,
                "mass_amount": 0.071
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 0.495,
                "mass_amount": 0.163
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 1.146,
                "mass_amount": 0.425
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 2.318,
                "mass_amount": 0.928
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 2.882,
                "mass_amount": 1.266
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 3.758,
                "mass_amount": 1.808
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 4.55,
                "mass_amount": 2.379
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 5.082,
                "mass_amount": 2.885
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 5.418,
                "mass_amount": 3.335
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 5.32,
                "mass_amount": 3.529
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 5.001,
                "mass_amount": 3.541
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 4.802,
                "mass_amount": 3.601
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 4.49,
                "mass_amount": 3.528
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 4.014,
                "mass_amount": 3.298
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 3.734,
                "mass_amount": 3.247
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 3.426,
                "mass_amount": 3.071
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 3.086,
                "mass_amount": 2.877
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 2.798,
                "mass_amount": 2.709
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 2.503,
                "mass_amount": 2.52
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 2.405,
                "mass_amount": 2.508
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 2.173,
                "mass_amount": 2.337
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 2.186,
                "mass_amount": 2.43
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 2.024,
                "mass_amount": 2.31
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 1.951,
                "mass_amount": 2.297
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 1.734,
                "mass_amount": 2.093
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 1.557,
                "mass_amount": 1.931
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 1.398,
                "mass_amount": 1.779
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 1.276,
                "mass_amount": 1.666
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 1.191,
                "mass_amount": 1.584
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 16.541,
                "mass_amount": 33.824
            }
        ]
    },
    "flashed_gas_mw": 17.62,
    "flashed_gas_specific_gravity": 0.609,
    "flashed_gas_specific_gravity_unit": "SG",
    "flashed_gas_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": 0.401,
                "mass_amount": 0.637
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": 0.216,
                "mass_amount": 0.538
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 90.097,
                "mass_amount": 82.006
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 8.712,
                "mass_amount": 14.863
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 0.353,
                "mass_amount": 0.884
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 0.037,
                "mass_amount": 0.123
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 0.042,
                "mass_amount": 0.137
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.02,
                "mass_amount": 0.083
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 0.004,
                "mass_amount": 0.017
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 0.005,
                "mass_amount": 0.021
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 0.025,
                "mass_amount": 0.12
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 0.029,
                "mass_amount": 0.158
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 0.02,
                "mass_amount": 0.122
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 0.019,
                "mass_amount": 0.133
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 0.016,
                "mass_amount": 0.124
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 0.004,
                "mass_amount": 0.032
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.001
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            }
        ]
    },
    "recombined_fluid_mw": 190.8,
    "recombined_fluid_gor": null,
    "recombined_fluid_gor_unit": null,
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": 0.182,
                "mass_amount": 0.027
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": 0.098,
                "mass_amount": 0.023
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 40.962,
                "mass_amount": 3.444
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 4.064,
                "mass_amount": 0.64
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 0.177,
                "mass_amount": 0.041
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 0.023,
                "mass_amount": 0.007
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 0.028,
                "mass_amount": 0.009
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.014,
                "mass_amount": 0.005
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 0.004,
                "mass_amount": 0.002
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 0.007,
                "mass_amount": 0.003
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 0.058,
                "mass_amount": 0.026
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 0.148,
                "mass_amount": 0.075
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 0.28,
                "mass_amount": 0.161
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 0.634,
                "mass_amount": 0.413
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 1.273,
                "mass_amount": 0.894
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 1.576,
                "mass_amount": 1.214
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 2.053,
                "mass_amount": 1.732
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 2.485,
                "mass_amount": 2.279
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 2.775,
                "mass_amount": 2.764
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 2.959,
                "mass_amount": 3.195
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 2.906,
                "mass_amount": 3.381
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 2.731,
                "mass_amount": 3.393
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 2.622,
                "mass_amount": 3.45
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 2.452,
                "mass_amount": 3.38
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 2.192,
                "mass_amount": 3.16
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 2.039,
                "mass_amount": 3.111
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 1.871,
                "mass_amount": 2.942
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 1.685,
                "mass_amount": 2.756
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 1.528,
                "mass_amount": 2.595
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 1.367,
                "mass_amount": 2.414
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 1.313,
                "mass_amount": 2.403
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 1.187,
                "mass_amount": 2.239
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 1.194,
                "mass_amount": 2.328
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 1.105,
                "mass_amount": 2.213
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 1.066,
                "mass_amount": 2.201
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 0.947,
                "mass_amount": 2.005
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 0.85,
                "mass_amount": 1.85
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 0.763,
                "mass_amount": 1.704
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 0.697,
                "mass_amount": 1.596
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 0.651,
                "mass_amount": 1.518
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 9.033,
                "mass_amount": 32.406
            }
        ]
    }
}"
            }
          ]
        }
    ]}
{"contents":[
        {
          "role":"user",
          "parts":[
            {
              "fileData":{
                "mimeType":"image/jpeg",
                "fileUri":"https://github.com/yohanesnuwara/sft-finetune-gemini/blob/main/images/RS-113242%20Preliminary%20Results_v4%20-%20%C3%98st%20Frigg_page-0030.jpg"
              }
            },
            {
              "text":"OCR the following page into complete JSON.

Your task is to parse and extract as many infomation as possible from the page and put into JSON like specified

Never come up with new structures or keys, just fill up in the specified JSON schema.

Page can be either full texts, full table, or texts with table.

1. Identify the type of page:
   - 1.1 If the page consists only of texts:

      Parse sentences into JSON and do not give full sentence or summary

      Example sentence:

      "Two sets of sample (CL01 & CL02) is transferred at 15 deg C and pressure 1 atm" (page A.1)

      JSON response

      {
          "page": "A.1",
          "conditioning": {
              "samples": ["CL01", "CL02"],
              "transfer_temp": 15,
              "transfer_temp_unit": "C",
              "transfer_pressure": 1,
              "transfer_pressure_unit": "atm"
              // ...
          }
      }

      Try to find these parameters inferred from "flash" keyword
      {
        "sep_pressure": ...,
        "sep_pressure_unit": ...,
        "sep_temperature": ...,
        "sep_temperature_unit": ...,
      }



   - 1.2 If the page consists of table of contents
     - Put each table title from the list in key "table_title"
     - Identify the "keyword" in the table title, into these categories
        - If mention composition then "composition"
        - If mention constant composition expansion or constant mass expansion then "CCE"
        - If mention constant volume depletion then "CVD"
        - If mention differential liberation expansion then "DLE"
        - If mention multistage separator then "MSS"
        - If mention viscosity then "VISCO"
     - Identify the "sample_name" from keywords like Cylinder, Sample, Chamber number, or if it is sample pair
     - Identify the "page_number"

    JSON response:

    {
        "page": "....",
        "list_content": [
            {
                "title": "...",
                "keyword": "composition",
                "sample_name": null,
                "page_number": 1
            },
            {
                "title": "...",
                "keyword": "CCE"
                "sample_name": "A01",
                "page_number": 2
            },
            {
                "title": "...",
                "keyword": "CVD",
                "sample_name": "A01+A02",
                "page_number": 3
            }
        ]
    }

   - 1.3 If the page consists of texts with table:
     - 1.3.1 If the page displays "sample inventory" or "sample summary" table:
       - This type of page can be recognized by structure of the table. If the table has Sample ID/name or Bottle no in the y-axis, and properties in the x-axis
       - Properties reported in this summary table such as sampling depth, GOR, density, molecular weight, reservoir temperature, reservoir pressure (Pres), viscosity
       - Do not confuse this table with experiment table
       - Extract data into the "sample_inventory" JSON schema.
       - Extract other relevant information into "Other_information".
       - If you do not find any of the keys, DO NOT create the key
       - Identify title of each table and decide the "type"
            - If mention MDT oil, then "type": "OFT"
            - If mention MDT water, then "type": "WATER"

       Example JSON:
        {
          "page": "...",
          "sample_inventory": {
            "data": [
              {
                "sample_name": "1.01",
                "type": "OFT", # put "OFT" if mention MDT oil, "WATER" if mention MDT water
                "sampling_date": "2023-04-26", # If mention Transfer Date
                "well_id": "23/1", # Well name
                "basin_id": null,
                "sub_basin_id": null,
                "field_id": "Volve", # Field name
                "field_segment_id": null,
                "formation_id": "Realgrunnen", # Formation name
                "formation_zone_id": null,
                "reservoir_pressure": 182.0,
                "reservoir_pressure_unit": "bara",
                "reservoir_temperature": 69.8,
                "reservoir_temperature_unit": "C",
                "true_vertical_depth": 1929.0, # If mention sampling depth m TVDSS (true vertical depth sub sea)
                "true_vertical_depth_unit": "m",
                "measured_depth": 1984.5, # If mention sampling depth m MD (measured depth)
                "measured_depth_unit": "m",
                "pressure_at_lab": 400.0,
                "pressure_at_lab_unit": "bara",
                "temperature_at_lab": 80.0,
                "temperature_at_lab_unit": "C",
                "pressure_when_sampled": 100,
                "pressure_when_sampled_unit": "bara",
                "temperature_when_sampled": 23,
                "temperature_when_sampled_unit": "C",
                "top_perforation_depth": 2000,
                "top_perforation_depth_unit": "m",
                "bottom_perforation_depth": 3000,
                "bottom_perforation_depth_unit": "m",
                "transfer_pressure": 450.0,
                "transfer_pressure_unit": "bara",
                "transfer_temperature": 80.0,
                "transfer_temperature_unit": "C",
                "drawdown_pressure": 100,
                "drawdown_pressure_unit": "bara",
                "flashed_oil_contamination": 2.0, # If mention Mud filtrate contamination in STO
                "flashed_oil_contamination": "mass%", # If the unit mentioned is Wt%
                "fluid_type": "Oil",
                "mud_base": "Oil", # put "Oil" if mention OBM, or "Water" if mention WBM
                //... # Other parameters
              },
              {
                "Sample Type": "REC", # If mention Recombined
                # Same as above
                //...
              }
            ]
          },
          "Other_information": {
            "remarks": "Additional details can be provided here."
          }
        }

   - 1.4 If the page consists of a table:
     - 1.4.1 If the page consists of an Information table or descriptions:
       - Extract physical parameters and values into a structured JSON format.
       - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
         - If found, set "sample_name" accordingly.
         - If not found, set "sample_name" to null.

       Important data:

       - If you find "density of stock tank oil", put into key "flashed_oil_density", then fill "flashed_oil_density_unit"
       - If you see gas oil ratio (GOR), put into key "recombined_fluid_gor", then fill "recombined_fluid_gor_unit

       Getting 'flashed_oil_temperature':
       If you see the following

        ```
        Separation conditions:    From:  80.0 °C and   400 bara
                                  To:    25.5 °C and   atm. pressure
        ```

       In this case, "flashed_oil_temperature": 25.5, "flashed_oil_temperature_unit": "C"
       Pick the number after "To:   " before "and atm.pressure"

       Example JSON:
        {
            "page": "...",
            "sample_name": "...",
            "parameter1": "...",
            "parameter1_unit": "...",
            "parameter2": "...",
            "parameter2_unit": "...",
            "parameter3": "...",
            "parameter4_unit": "...",

            # Important data
            "flashed_oil_density": ...,
            "flashed_oil_density_unit": "...",
            "flashed_oil_temperature": 20.5,
            "flashed_oil_temperature_unit": "C",
            "recombined_fluid_gor": ...,
            "recombined_fluid_gor_unit": "...",
            et cetera ...
        }

     - 1.4.2 If the page contains a Composition table :

        - Dynamically identify each fluid-type group by reading the top header row(s), matching these synonyms:
          - flashed_oil ↔ "Stock tank oil", "Flashed Liquid", "Stock tank oil"
          - flashed_gas ↔ "Stock tank gas", "Flashed gas"
          - recombined_fluid ↔ "Monophasic fluid", "Reservoir fluid"
        - Under each fluid-type header, locate its two sub-columns: one labeled "Mole %" → molar_amount, the other "Weight %" → mass_amount.
        - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
            - If found, set "sample_name" accordingly.
            - Sample name is just like ID consist of letter and number, without C10+ or C36+
            - If not found, set "sample_name" to null.
        - If the table title says "uncorrected" or "corrected", set "uncorrected": true/false.
        - Identify "last_component" from the final row label (e.g. "C36+"), include units on every top-level number, and fill only the keys in the prescribed schema—do not invent new ones.

        IMPORTANT!!!
        - In case there is blank cell in the table (value not reported)
        - If you do not find BOTH molar amount and mass amount of a component, do not extract it into JSON

        Example table with blanks:

      |Component         | Stock tank gas    | Stock tank oil    |  Reservoir fluid   | Mol weight  |
      |Mole%             | Weight% | Mole%   | Weight% | Mole%   |  Mole%   | Weight% |             |
      |Nitrogen          | 0.157   | 0.183   |         |         |  0.084   | 0.024   | 28.02       |
      |Carbon Dioxide    | 6.582   | 12.048  |         |         |  3.509   | 1.555   | 44.01       |
      |Hydrogen Sulphide | 0       | 0       |         |         |  0       | 0       | 34.08       |
      |Methane           | 73.927  | 49.324  | 0.115   | 0.01    |  39.466  | 6.376   | 16.04       |
      |Ethane            | 8.997   | 11.251  | 0.222   | 0.036   |  4.9     | 1.484   | 30.07       |


        Result JSON (referring to the table):

{
    "page": ...,
    "sample_name": "A001", # The name of sample
    "uncorrected": true, # false or null
    "last_component": "C10+",
    "flashed_oil_mw": 151.9, # oil molecular weight or MW
    "flashed_oil_density": 0.777, # oil density at stock-tank condition 15 degC
    "flashed_oil_density_unit": "g/cm3", # g/cm3, kg/m3
    "flashed_oil_temperature": 60.0, # temperature at flash
    "flashed_oil_temperature_unit": "F", # F, C, K, R
    "flashed_oil_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide molar_amount and mass_amount is null, so no need to extract
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 0.115,
                "mass_amount": 0.01
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 0.222,
                "mass_amount": 0.036
            }
        ]
    },
    "flashed_gas_mw": 23.4, # gas molecular weight or MW
    "flashed_gas_specific_gravity": 0.808, # also called relative density or ideal
    "flashed_gas_specific_gravity_unit": "SG", # if unit not mentioned then most likely SG
    "flashed_gas_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide has molar_amount and mass_amount, so extract it
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.157,
                "mass_amount": 0.183
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 6.582,
                "mass_amount": 12.048
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 73.997,
                "mass_amount": 49.324
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 8.997,
                "mass_amount": 11.251
            }
        ]
    },

    # Recombined is sometimes called as Reservoir Fluid or Monophasic
    "recombined_fluid_mw": 30.2, # reservoir fluid MW
    "recombined_fluid_gor": 12200.8, # Gas oil ratio or gas liquid ratio (GLR) or Rs
    "recombined_fluid_gor_unit": "scf/STB", # scf/STB, Sm3/Sm3, Sm3/m3, scf/bbl
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.084,
                "mass_amount": 0.024
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 3.509,
                "mass_amount": 1.555
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 39.466,
                "mass_amount": 6.376
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 4.9,
                "mass_amount": 1.484
            }
        ]
    }
}
     - 1.4.3 If the page contains a Constant Composition Expansion (CCE) or Constant Mass Expansion (CME) table:
       - Identify measurement units for parameters.
       - Always put as "CCE" not "CME"
       - Extract data and structure into the "experiments" JSON key.
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Stages 'order' key must always start from 0
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column name | Key
       --------|-----------
       Relative Volume (column) | relative_total_volume
       Relative Volumes (Vs/Vs,BP) | relative_total_volume
       RLD (column) | relative_oil_volume
       % Liq/Sat (Vliq/Vsat) | relative_oil_volume

       Note: relative_oil_volume always null BEFORE the saturation_pressure=True

       - You must stick to the following units

        Variable | Unit
        --------|-----------
        relative_total_volume_unit | Vtot/Vsat

       Example JSON:


{
    "page" : ...,
    "sample_name": ...,
    "experiments": [
        {
            "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
            "sample_name": 1184,
            "name": "Constant Composition Expansion",
            "type": "CCE",
            "temperature": 106.0,
            "temperature_unit": "C",
            "pressure_unit": "psia",
            "relative_oil_volume_unit": "Vo/Vsat (%)",
            "single_phase_density_unit": "g/cm3",
            "relative_total_volume_unit": "Vtot/Vsat",
            "stages": [
                {
                    "pressure": 9000.0,
                    "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                    "relative_oil_volume": null,
                    "relative_total_volume": 0.79,
                    "single_phase_density": 0.422,
                    "z_factor": 1.407
                },
                // Other stages ...
                {
                    "pressure": 3011.0,
                    "is_saturation_pressure": false,
                    "relative_oil_volume": 14.37,
                    "relative_total_volume": 1.315,
                    "single_phase_density": null,
                    "z_factor": null
                }
            ]
        }
    ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) COMPOSITION:
       - You put the page in this category if you see keywords "Constant Volume Depletion" and chemical component
       - Please Read the WHOLE COLUMNS of TABLE
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true

       - If the columns like this: 2600 psia, 2010 psia, 1000 psia, Residual Oil
          - Put the pressures columns inside Liberated Gas schema
          - Put the Residual Oil column inside Final Stage Oil schema

       - Liberated Gas structure:
          - Put each of the "pressure" inside "stages" key
          - Put ALL the "components" and its "molar_amount" inside each "pressure" which it refers to

        Structure:

{
  "sample_name": null,
  "experiments": [
    {
      "sample_name": null,
      "continued": false,
      "saturation_pressure_type": "Dewpoint",
      "name": "Constant Volume Depletion",
      "type": "CVD",
      "temperature": 106.0,
      "temperature_unit": "C",

      # First type
      "liberated_gas_compositions": {
        "components": [
          {
            "input_name": "CO2",
            "mw": 44.01
          },
          {
            "input_name": "Other",
            "mw": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0
          }
        ],
        "stages": [
          {
            "pressure": 2600,
            "composition": [
              {
                "component_name": "CO2",
                "molar_amount": 0.305
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "C30+",
                "molar_amount": 0.087
              }
            ]
          },
          {
            "pressure": 1300,
            "composition": [
              {
                "component_name": "2M-C6",
                "molar_amount": 0.123
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "Toluene",
                "molar_amount": 0.037
              }
            ]
          }
        ]
      },

       - Residual Oil structure:
          - Put ALL the "components" and its "molar_amount" inside "composition" key
          - Get the "final_stage_oil_mw" from the last row of table if mentioning "MW"

        Structure:

      # Second type
      "final_stage_oil_mw": 100.14,
      "final_stage_oil_density": 630.0,
      "final_stage_oil_density_unit": "kg/m3",
      "stock_tank_oil_density": 630.0,
      "stock_tank_oil_density_unit": "kg/m3",
      "final_stage_oil_composition": {
        "components": [
          {
            "input_name": "CO2",
            "mw": null,
            "molar_amount": 0.213,
            "mass_amount": null
          },
          {
            "input_name": "Other",
            "mw": null,
            "molar_amount": null,
            "mass_amount": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0,
            "molar_amount": 0.553,
            "mass_amount": null
          }
        ]
      }
    }
  ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) PROPERTIES table:
       - You put into this category If you see Pressure as row and Physical Properties as column (No composition)
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column Name | Key
       --------|-----------
       Total Recovery (mole %) | cumulative_moles_removed
       Liq. Density (g/cc) | oil_density

        Example JSON:

      {
          "sample_name": ..., # Put sample ID here
          "experiments": [
              {
                  "sample_name": ...,
                  "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                  "name": "Constant Volume Depletion",
                  "type": "CVD",
                  "temperature": 106.0,
                  "temperature_unit": "C",
                  "pressure_unit": "psia",
                  "oil_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_viscosity_unit": "...", # "cP"
                  "relative_oil_volume_unit": "...", # "%"
                  "incremental_moles_removed_unit": "...", # "%"
                  "cumulative_moles_removed_unit": "...", # "%"

                  # Properties data
                  "stages": [
                      # Fill here if the table displays properties as row and pressure as column, or otherwise
                      {
                          "pressure": 4661.0,
                          "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                          "relative_oil_volume": 0.0,
                          "incremental_moles_removed": null, # "%"
                          "cumulative_moles_removed": 0.0,
                          "oil_density": null,
                          "gas_z_factor": 0.922,
                          "gas_specific_gravity": null,
                          "gas_density": 0.339,
                          "gas_viscosity": 0.042,
                          "gas_plus_fraction_mw": null,
                      },
                      {
                          // Other stages ...
                      }
                      {
                          "pressure": 1300.0,
                          "is_saturation_pressure": false,
                          "relative_oil_volume": 13.18,
                          "incremental_moles_removed": null,
                          "cumulative_moles_removed": 67.06,
                          "oil_density": 0.63,
                          "gas_z_factor": 0.874,
                          "gas_specific_gravity": null,
                          "gas_density": 0.075,
                          "gas_viscosity": 0.015,
                          "gas_plus_fraction_mw": null,
                      }
                  ]
              }
          ]
      }

     - 1.4.5 If the page contains a Multi-Stage Separator (MSS) or Three Stage Separator table:
       - If you see "Two Stage", "Three Stage", "Four Stage" Separator, it is MSS. But, "Single Stage" is NOT MSS
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Stock tank oil data: If the title mention stock tank or tank oil
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If you see "Pressure Atm. bara", it means "pressure": 1 (atmospheric pressure means 1 bara)
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON

        Exception:
       - If you find page with title "Bo and GOR from Three Stage Separator test during depletion using the results from Differential Liberation ...", DO NOT extract the data.

        Example JSON:
{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                    "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                    "name": "Multi-stage Separator",
                    "type": "MSS",
                    "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "Dodecanes Plus",
                            "mw": null
                        }
                    ],
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.7579
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0024
                                }
                            ]
                        },
                        {
                            "stage_number": 1,
                            "composition": [
                                {
                                    "stage_number": 1,
                                    "component_name": "C1",
                                    "molar_amount": 0.6791
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 1,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0022
                                }
                            ]
                        },
                        {
                            "stage_number": 2,
                            "composition": [
                                {
                                    "stage_number": 2,
                                    "component_name": "C1",
                                    "molar_amount": 0.1999
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 2,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.019
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Stock tank oil
                "stock_tank_oil_molecular_weight": 145.78,
                "stock_tank_oil_density": 0.7843,
                "stock_tank_oil_density_unit": "g/cm3",
                "stock_tank_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.013,
                            "mass_amount": 0.0107
                        }
                    ]
                },
                "pressure_unit": "psia",
                "temperature_unit": "F",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",

                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 3724.0,
                        "is_saturation_pressure": true,
                        "temperature": 230.0,
                        "gor": 1802.83,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.1783,
                        "oil_density": 0.5016,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "temperature": 60.0,
                        "gor": 0.0,
                        "liberated_gas": 1802.83,
                        "oil_fvf": 1.0,
                        "oil_density": 0.7843,
                        "gas_z_factor": 0.9892,
                        "gas_specific_gravity": 1.316,
                        "gas_density": null,
                        "gas_viscosity": null
                    }
                ]
            }
    ]
}


     - 1.4.6 If the page contains a Differential Liberation (DLE) or Differential Vaporization (DV) table:
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Residual oil data: If mention residual oil or final stage
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity
       gas-oil ratio solution** | gor

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON
       ** in "Gas-Oil Ratio" column if you find "solution" and "liberated", take the "solution" and put to "gor" key in JSON

        Example JSON:

{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                "name": "Differential Liberation Expansion",
                "type": "DLE",
                "temperature": 229.7,
                "temperature_unit": "F",
                "dle_experiment_type": "Standard DLE Experiment",

                # // First part, Liberated gas
                "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "N2",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "C7+",
                            "mw": 114.01
                        }
                    ],
                    # Fill here if the table displays component as row and pressure as column, or otherwise
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.6859 # Composition in mole percent
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0085
                                }
                            ]
                        },
                        {
                            // Other stages ...
                        },
                        {
                            "stage_number": 9,
                            "composition": [
                                {
                                    "stage_number": 9,
                                    "component_name": "C1",
                                    "molar_amount": 0.1309
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 9,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0629
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Residual oil
                "evolved_gas_specific_gravity": null,
                "evolved_gas_composition_id": null,
                "evolved_gas_composition": null,
                "average_residual_oil_mw": 179.43,
                "average_residual_oil_density": 0.8128,
                "average_residual_oil_density_unit": "g/cm3",
                "residual_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.019,
                            "mass_amount": 0.0127
                        }
                    ]
                },
                "pressure_unit": "psia",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",
                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 8513.0,
                        "is_saturation_pressure": true,
                        "gor": 2847.67,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.5407,
                        "oil_density": 0.5714,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "gor": 0.0,
                        "liberated_gas": 2847.67,
                        "oil_fvf": 1.0975,
                        "oil_density": 0.7471,
                        "gas_z_factor": 0.9887,
                        "gas_specific_gravity": 2.1686,
                        "gas_density": null,
                        "gas_viscosity": 0.00925
                    }
                ]
            }
    ]
}

     - 1.4.7 If the page contains a Viscosity experiment (VISCO) table:
       - Identify measurement units for parameters.
       - Viscosity table has pressure as y-axis and viscosities as x-axis
       - Extract viscosity data and structure into "experiments".
       - Never come up with new structures or keys, just fill up in the specified JSON schema.

        Example JSON:

{
    "page": ...,
    "sample_name": ...,
    "experiments": [
        {
            "name": "Oil Viscosity",
            "type": "VISCO",
            "temperature": 229.7,
            "temperature_unit": "F",
            "pressure_unit": "psia",
            "oil_viscosity_unit": "cP",
            "gas_viscosity_unit": "cP",
            "stages": [
                {
                    "visco_id": 1018,
                    "pressure": 5413.0,
                    "oil_viscosity": 0.088,
                    "gas_viscosity": null
                },
                {
                    // Other stages ...
                },
                {
                    "visco_id": 1018,
                    "pressure": 13.0,
                    "oil_viscosity": 0.749,
                    "gas_viscosity": 0.00925
                }
            ]
        }
    ]
}

2. If any summary data or descriptive information is found:
   - Include it as key "Other_information", outside the "experiments" key in JSON.

   Example JSON:
   {
       "solution_gas_oil_ratio": 100,
       "separator_volume_factor": 300,
       "solution_gas_oil_ratio_unit": "scf/stb",
       "separator_volume_factor_unit": "bbl",
       ......
   }

3. Finally, you must stick to the following units

Unit shown | Unit in JSON
--------|-----------
g/cc | g/cm3
mole% | %
Vol/Vol | Sm3/Sm3
scf/sep bbl | scf/bbl
kg/Sm3 | kg/m3
psi | psia
Air=1 | SG

4. If you find Figure in the page, DO NOT extract any data from it. Just extract the title into json.

  {
    "figure_title": "Plot of dewpoint pressure"
  }

5. Dealing with Paraffinic-Naphtenes-Aromatics (PNA) composition

In some cases, PNA can be reported in compositional table, DLE liberated gas, or MSS liberated gas.

For example:

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| n-Hexane          | 0.086   | 0.351     | 86.2  |
| iso-Paraffins     | 0.154   | 0.627     | 86.2  |
| Naphthenes        | 0.033   | 0.109     | 70.1  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |
| n-Heptane         | 0.014   | 0.067     | 100.2 |
| iso-Paraffins     | 0.038   | 0.181     | 100.2 |
| Naphthenes        | 0.116   | 0.476     | 86.6  |
| Aromatics         | 0.030   | 0.112     | 78.1  |

You see for every C6 total and C7 total, there are iso-Paraffins (P), Naphthenes (N), and Aromatics (A).

Remove these PNA, so you just have C6 total and C7 total.

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |

From here, you just extract into corresponding JSON schema as defined in instructions 1 until 4
"
            }
          ]
        },
        {
          "role":"model",
          "parts":[
            {
              "text":"{
    "page": "30 of 119",
    "sample_name": "WFL-01718",
    "flashed_oil_temperature": 23.3,
    "flashed_oil_temperature_unit": "C",
    "flashed_oil_pressure": 1.0,
    "flashed_oil_pressure_unit": "bara",
    "recombined_fluid_gor": 54.6,
    "recombined_fluid_gor_unit": "Sm3/Sm3",
    "flashed_oil_density": 910.9,
    "flashed_oil_density_unit": "kg/m3",
    "flashed_gas_specific_gravity": 0.612,
    "flashed_gas_specific_gravity_unit": "SG",
    "flashed_oil_mw": 334.2,
    "flashed_oil_mw_unit": "g/mol",
    "flashed_oil_c7_plus_mw": 335.0,
    "flashed_oil_c7_plus_mw_unit": "g/mol",
    "flashed_oil_c7_plus_density": 911.0,
    "flashed_oil_c7_plus_density_unit": "kg/m3",
    "flashed_oil_c10_plus_mw": 339.0,
    "flashed_oil_c10_plus_mw_unit": "g/mol",
    "flashed_oil_c10_plus_density": 912.0,
    "flashed_oil_c10_plus_density_unit": "kg/m3",
    "density_at_pb": 833.7,
    "density_at_pb_unit": "kg/m3",
    "Other_information": {
        "sampling_depth": 1984.5,
        "sampling_depth_unit": "m MD",
        "oil_formation_volume_factor_at_reservoir_pressure": 1.141,
        "oil_formation_volume_factor_at_reservoir_pressure_unit": "m3/Sm3",
        "oil_formation_volume_factor_at_saturation_pressure": 1.141,
        "oil_formation_volume_factor_at_saturation_pressure_unit": "m3/Sm3",
        "standard_conditions_gas_temperature": 15.0,
        "standard_conditions_gas_temperature_unit": "C",
        "standard_conditions_gas_pressure": 1.01325,
        "standard_conditions_gas_pressure_unit": "bara",
        "standard_conditions_oil_temperature": 15.0,
        "standard_conditions_oil_temperature_unit": "C",
        "standard_conditions_oil_pressure": 1.0,
        "standard_conditions_oil_pressure_unit": "atm"
    }
}"
            }
          ]
        }
    ]}
{"contents":[
        {
          "role":"user",
          "parts":[
            {
              "fileData":{
                "mimeType":"image/jpeg",
                "fileUri":"https://github.com/yohanesnuwara/sft-finetune-gemini/blob/main/images/RS-113242%20Preliminary%20Results_v4%20-%20%C3%98st%20Frigg_page-0033.jpg"
              }
            },
            {
              "text":"OCR the following page into complete JSON.

Your task is to parse and extract as many infomation as possible from the page and put into JSON like specified

Never come up with new structures or keys, just fill up in the specified JSON schema.

Page can be either full texts, full table, or texts with table.

1. Identify the type of page:
   - 1.1 If the page consists only of texts:

      Parse sentences into JSON and do not give full sentence or summary

      Example sentence:

      "Two sets of sample (CL01 & CL02) is transferred at 15 deg C and pressure 1 atm" (page A.1)

      JSON response

      {
          "page": "A.1",
          "conditioning": {
              "samples": ["CL01", "CL02"],
              "transfer_temp": 15,
              "transfer_temp_unit": "C",
              "transfer_pressure": 1,
              "transfer_pressure_unit": "atm"
              // ...
          }
      }

      Try to find these parameters inferred from "flash" keyword
      {
        "sep_pressure": ...,
        "sep_pressure_unit": ...,
        "sep_temperature": ...,
        "sep_temperature_unit": ...,
      }



   - 1.2 If the page consists of table of contents
     - Put each table title from the list in key "table_title"
     - Identify the "keyword" in the table title, into these categories
        - If mention composition then "composition"
        - If mention constant composition expansion or constant mass expansion then "CCE"
        - If mention constant volume depletion then "CVD"
        - If mention differential liberation expansion then "DLE"
        - If mention multistage separator then "MSS"
        - If mention viscosity then "VISCO"
     - Identify the "sample_name" from keywords like Cylinder, Sample, Chamber number, or if it is sample pair
     - Identify the "page_number"

    JSON response:

    {
        "page": "....",
        "list_content": [
            {
                "title": "...",
                "keyword": "composition",
                "sample_name": null,
                "page_number": 1
            },
            {
                "title": "...",
                "keyword": "CCE"
                "sample_name": "A01",
                "page_number": 2
            },
            {
                "title": "...",
                "keyword": "CVD",
                "sample_name": "A01+A02",
                "page_number": 3
            }
        ]
    }

   - 1.3 If the page consists of texts with table:
     - 1.3.1 If the page displays "sample inventory" or "sample summary" table:
       - This type of page can be recognized by structure of the table. If the table has Sample ID/name or Bottle no in the y-axis, and properties in the x-axis
       - Properties reported in this summary table such as sampling depth, GOR, density, molecular weight, reservoir temperature, reservoir pressure (Pres), viscosity
       - Do not confuse this table with experiment table
       - Extract data into the "sample_inventory" JSON schema.
       - Extract other relevant information into "Other_information".
       - If you do not find any of the keys, DO NOT create the key
       - Identify title of each table and decide the "type"
            - If mention MDT oil, then "type": "OFT"
            - If mention MDT water, then "type": "WATER"

       Example JSON:
        {
          "page": "...",
          "sample_inventory": {
            "data": [
              {
                "sample_name": "1.01",
                "type": "OFT", # put "OFT" if mention MDT oil, "WATER" if mention MDT water
                "sampling_date": "2023-04-26", # If mention Transfer Date
                "well_id": "23/1", # Well name
                "basin_id": null,
                "sub_basin_id": null,
                "field_id": "Volve", # Field name
                "field_segment_id": null,
                "formation_id": "Realgrunnen", # Formation name
                "formation_zone_id": null,
                "reservoir_pressure": 182.0,
                "reservoir_pressure_unit": "bara",
                "reservoir_temperature": 69.8,
                "reservoir_temperature_unit": "C",
                "true_vertical_depth": 1929.0, # If mention sampling depth m TVDSS (true vertical depth sub sea)
                "true_vertical_depth_unit": "m",
                "measured_depth": 1984.5, # If mention sampling depth m MD (measured depth)
                "measured_depth_unit": "m",
                "pressure_at_lab": 400.0,
                "pressure_at_lab_unit": "bara",
                "temperature_at_lab": 80.0,
                "temperature_at_lab_unit": "C",
                "pressure_when_sampled": 100,
                "pressure_when_sampled_unit": "bara",
                "temperature_when_sampled": 23,
                "temperature_when_sampled_unit": "C",
                "top_perforation_depth": 2000,
                "top_perforation_depth_unit": "m",
                "bottom_perforation_depth": 3000,
                "bottom_perforation_depth_unit": "m",
                "transfer_pressure": 450.0,
                "transfer_pressure_unit": "bara",
                "transfer_temperature": 80.0,
                "transfer_temperature_unit": "C",
                "drawdown_pressure": 100,
                "drawdown_pressure_unit": "bara",
                "flashed_oil_contamination": 2.0, # If mention Mud filtrate contamination in STO
                "flashed_oil_contamination": "mass%", # If the unit mentioned is Wt%
                "fluid_type": "Oil",
                "mud_base": "Oil", # put "Oil" if mention OBM, or "Water" if mention WBM
                //... # Other parameters
              },
              {
                "Sample Type": "REC", # If mention Recombined
                # Same as above
                //...
              }
            ]
          },
          "Other_information": {
            "remarks": "Additional details can be provided here."
          }
        }

   - 1.4 If the page consists of a table:
     - 1.4.1 If the page consists of an Information table or descriptions:
       - Extract physical parameters and values into a structured JSON format.
       - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
         - If found, set "sample_name" accordingly.
         - If not found, set "sample_name" to null.

       Important data:

       - If you find "density of stock tank oil", put into key "flashed_oil_density", then fill "flashed_oil_density_unit"
       - If you see gas oil ratio (GOR), put into key "recombined_fluid_gor", then fill "recombined_fluid_gor_unit

       Getting 'flashed_oil_temperature':
       If you see the following

        ```
        Separation conditions:    From:  80.0 °C and   400 bara
                                  To:    25.5 °C and   atm. pressure
        ```

       In this case, "flashed_oil_temperature": 25.5, "flashed_oil_temperature_unit": "C"
       Pick the number after "To:   " before "and atm.pressure"

       Example JSON:
        {
            "page": "...",
            "sample_name": "...",
            "parameter1": "...",
            "parameter1_unit": "...",
            "parameter2": "...",
            "parameter2_unit": "...",
            "parameter3": "...",
            "parameter4_unit": "...",

            # Important data
            "flashed_oil_density": ...,
            "flashed_oil_density_unit": "...",
            "flashed_oil_temperature": 20.5,
            "flashed_oil_temperature_unit": "C",
            "recombined_fluid_gor": ...,
            "recombined_fluid_gor_unit": "...",
            et cetera ...
        }

     - 1.4.2 If the page contains a Composition table :

        - Dynamically identify each fluid-type group by reading the top header row(s), matching these synonyms:
          - flashed_oil ↔ "Stock tank oil", "Flashed Liquid", "Stock tank oil"
          - flashed_gas ↔ "Stock tank gas", "Flashed gas"
          - recombined_fluid ↔ "Monophasic fluid", "Reservoir fluid"
        - Under each fluid-type header, locate its two sub-columns: one labeled "Mole %" → molar_amount, the other "Weight %" → mass_amount.
        - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
            - If found, set "sample_name" accordingly.
            - Sample name is just like ID consist of letter and number, without C10+ or C36+
            - If not found, set "sample_name" to null.
        - If the table title says "uncorrected" or "corrected", set "uncorrected": true/false.
        - Identify "last_component" from the final row label (e.g. "C36+"), include units on every top-level number, and fill only the keys in the prescribed schema—do not invent new ones.

        IMPORTANT!!!
        - In case there is blank cell in the table (value not reported)
        - If you do not find BOTH molar amount and mass amount of a component, do not extract it into JSON

        Example table with blanks:

      |Component         | Stock tank gas    | Stock tank oil    |  Reservoir fluid   | Mol weight  |
      |Mole%             | Weight% | Mole%   | Weight% | Mole%   |  Mole%   | Weight% |             |
      |Nitrogen          | 0.157   | 0.183   |         |         |  0.084   | 0.024   | 28.02       |
      |Carbon Dioxide    | 6.582   | 12.048  |         |         |  3.509   | 1.555   | 44.01       |
      |Hydrogen Sulphide | 0       | 0       |         |         |  0       | 0       | 34.08       |
      |Methane           | 73.927  | 49.324  | 0.115   | 0.01    |  39.466  | 6.376   | 16.04       |
      |Ethane            | 8.997   | 11.251  | 0.222   | 0.036   |  4.9     | 1.484   | 30.07       |


        Result JSON (referring to the table):

{
    "page": ...,
    "sample_name": "A001", # The name of sample
    "uncorrected": true, # false or null
    "last_component": "C10+",
    "flashed_oil_mw": 151.9, # oil molecular weight or MW
    "flashed_oil_density": 0.777, # oil density at stock-tank condition 15 degC
    "flashed_oil_density_unit": "g/cm3", # g/cm3, kg/m3
    "flashed_oil_temperature": 60.0, # temperature at flash
    "flashed_oil_temperature_unit": "F", # F, C, K, R
    "flashed_oil_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide molar_amount and mass_amount is null, so no need to extract
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 0.115,
                "mass_amount": 0.01
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 0.222,
                "mass_amount": 0.036
            }
        ]
    },
    "flashed_gas_mw": 23.4, # gas molecular weight or MW
    "flashed_gas_specific_gravity": 0.808, # also called relative density or ideal
    "flashed_gas_specific_gravity_unit": "SG", # if unit not mentioned then most likely SG
    "flashed_gas_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide has molar_amount and mass_amount, so extract it
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.157,
                "mass_amount": 0.183
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 6.582,
                "mass_amount": 12.048
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 73.997,
                "mass_amount": 49.324
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 8.997,
                "mass_amount": 11.251
            }
        ]
    },

    # Recombined is sometimes called as Reservoir Fluid or Monophasic
    "recombined_fluid_mw": 30.2, # reservoir fluid MW
    "recombined_fluid_gor": 12200.8, # Gas oil ratio or gas liquid ratio (GLR) or Rs
    "recombined_fluid_gor_unit": "scf/STB", # scf/STB, Sm3/Sm3, Sm3/m3, scf/bbl
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.084,
                "mass_amount": 0.024
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 3.509,
                "mass_amount": 1.555
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 39.466,
                "mass_amount": 6.376
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 4.9,
                "mass_amount": 1.484
            }
        ]
    }
}
     - 1.4.3 If the page contains a Constant Composition Expansion (CCE) or Constant Mass Expansion (CME) table:
       - Identify measurement units for parameters.
       - Always put as "CCE" not "CME"
       - Extract data and structure into the "experiments" JSON key.
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Stages 'order' key must always start from 0
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column name | Key
       --------|-----------
       Relative Volume (column) | relative_total_volume
       Relative Volumes (Vs/Vs,BP) | relative_total_volume
       RLD (column) | relative_oil_volume
       % Liq/Sat (Vliq/Vsat) | relative_oil_volume

       Note: relative_oil_volume always null BEFORE the saturation_pressure=True

       - You must stick to the following units

        Variable | Unit
        --------|-----------
        relative_total_volume_unit | Vtot/Vsat

       Example JSON:


{
    "page" : ...,
    "sample_name": ...,
    "experiments": [
        {
            "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
            "sample_name": 1184,
            "name": "Constant Composition Expansion",
            "type": "CCE",
            "temperature": 106.0,
            "temperature_unit": "C",
            "pressure_unit": "psia",
            "relative_oil_volume_unit": "Vo/Vsat (%)",
            "single_phase_density_unit": "g/cm3",
            "relative_total_volume_unit": "Vtot/Vsat",
            "stages": [
                {
                    "pressure": 9000.0,
                    "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                    "relative_oil_volume": null,
                    "relative_total_volume": 0.79,
                    "single_phase_density": 0.422,
                    "z_factor": 1.407
                },
                // Other stages ...
                {
                    "pressure": 3011.0,
                    "is_saturation_pressure": false,
                    "relative_oil_volume": 14.37,
                    "relative_total_volume": 1.315,
                    "single_phase_density": null,
                    "z_factor": null
                }
            ]
        }
    ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) COMPOSITION:
       - You put the page in this category if you see keywords "Constant Volume Depletion" and chemical component
       - Please Read the WHOLE COLUMNS of TABLE
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true

       - If the columns like this: 2600 psia, 2010 psia, 1000 psia, Residual Oil
          - Put the pressures columns inside Liberated Gas schema
          - Put the Residual Oil column inside Final Stage Oil schema

       - Liberated Gas structure:
          - Put each of the "pressure" inside "stages" key
          - Put ALL the "components" and its "molar_amount" inside each "pressure" which it refers to

        Structure:

{
  "sample_name": null,
  "experiments": [
    {
      "sample_name": null,
      "continued": false,
      "saturation_pressure_type": "Dewpoint",
      "name": "Constant Volume Depletion",
      "type": "CVD",
      "temperature": 106.0,
      "temperature_unit": "C",

      # First type
      "liberated_gas_compositions": {
        "components": [
          {
            "input_name": "CO2",
            "mw": 44.01
          },
          {
            "input_name": "Other",
            "mw": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0
          }
        ],
        "stages": [
          {
            "pressure": 2600,
            "composition": [
              {
                "component_name": "CO2",
                "molar_amount": 0.305
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "C30+",
                "molar_amount": 0.087
              }
            ]
          },
          {
            "pressure": 1300,
            "composition": [
              {
                "component_name": "2M-C6",
                "molar_amount": 0.123
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "Toluene",
                "molar_amount": 0.037
              }
            ]
          }
        ]
      },

       - Residual Oil structure:
          - Put ALL the "components" and its "molar_amount" inside "composition" key
          - Get the "final_stage_oil_mw" from the last row of table if mentioning "MW"

        Structure:

      # Second type
      "final_stage_oil_mw": 100.14,
      "final_stage_oil_density": 630.0,
      "final_stage_oil_density_unit": "kg/m3",
      "stock_tank_oil_density": 630.0,
      "stock_tank_oil_density_unit": "kg/m3",
      "final_stage_oil_composition": {
        "components": [
          {
            "input_name": "CO2",
            "mw": null,
            "molar_amount": 0.213,
            "mass_amount": null
          },
          {
            "input_name": "Other",
            "mw": null,
            "molar_amount": null,
            "mass_amount": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0,
            "molar_amount": 0.553,
            "mass_amount": null
          }
        ]
      }
    }
  ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) PROPERTIES table:
       - You put into this category If you see Pressure as row and Physical Properties as column (No composition)
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column Name | Key
       --------|-----------
       Total Recovery (mole %) | cumulative_moles_removed
       Liq. Density (g/cc) | oil_density

        Example JSON:

      {
          "sample_name": ..., # Put sample ID here
          "experiments": [
              {
                  "sample_name": ...,
                  "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                  "name": "Constant Volume Depletion",
                  "type": "CVD",
                  "temperature": 106.0,
                  "temperature_unit": "C",
                  "pressure_unit": "psia",
                  "oil_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_viscosity_unit": "...", # "cP"
                  "relative_oil_volume_unit": "...", # "%"
                  "incremental_moles_removed_unit": "...", # "%"
                  "cumulative_moles_removed_unit": "...", # "%"

                  # Properties data
                  "stages": [
                      # Fill here if the table displays properties as row and pressure as column, or otherwise
                      {
                          "pressure": 4661.0,
                          "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                          "relative_oil_volume": 0.0,
                          "incremental_moles_removed": null, # "%"
                          "cumulative_moles_removed": 0.0,
                          "oil_density": null,
                          "gas_z_factor": 0.922,
                          "gas_specific_gravity": null,
                          "gas_density": 0.339,
                          "gas_viscosity": 0.042,
                          "gas_plus_fraction_mw": null,
                      },
                      {
                          // Other stages ...
                      }
                      {
                          "pressure": 1300.0,
                          "is_saturation_pressure": false,
                          "relative_oil_volume": 13.18,
                          "incremental_moles_removed": null,
                          "cumulative_moles_removed": 67.06,
                          "oil_density": 0.63,
                          "gas_z_factor": 0.874,
                          "gas_specific_gravity": null,
                          "gas_density": 0.075,
                          "gas_viscosity": 0.015,
                          "gas_plus_fraction_mw": null,
                      }
                  ]
              }
          ]
      }

     - 1.4.5 If the page contains a Multi-Stage Separator (MSS) or Three Stage Separator table:
       - If you see "Two Stage", "Three Stage", "Four Stage" Separator, it is MSS. But, "Single Stage" is NOT MSS
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Stock tank oil data: If the title mention stock tank or tank oil
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If you see "Pressure Atm. bara", it means "pressure": 1 (atmospheric pressure means 1 bara)
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON

        Exception:
       - If you find page with title "Bo and GOR from Three Stage Separator test during depletion using the results from Differential Liberation ...", DO NOT extract the data.

        Example JSON:
{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                    "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                    "name": "Multi-stage Separator",
                    "type": "MSS",
                    "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "Dodecanes Plus",
                            "mw": null
                        }
                    ],
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.7579
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0024
                                }
                            ]
                        },
                        {
                            "stage_number": 1,
                            "composition": [
                                {
                                    "stage_number": 1,
                                    "component_name": "C1",
                                    "molar_amount": 0.6791
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 1,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0022
                                }
                            ]
                        },
                        {
                            "stage_number": 2,
                            "composition": [
                                {
                                    "stage_number": 2,
                                    "component_name": "C1",
                                    "molar_amount": 0.1999
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 2,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.019
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Stock tank oil
                "stock_tank_oil_molecular_weight": 145.78,
                "stock_tank_oil_density": 0.7843,
                "stock_tank_oil_density_unit": "g/cm3",
                "stock_tank_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.013,
                            "mass_amount": 0.0107
                        }
                    ]
                },
                "pressure_unit": "psia",
                "temperature_unit": "F",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",

                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 3724.0,
                        "is_saturation_pressure": true,
                        "temperature": 230.0,
                        "gor": 1802.83,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.1783,
                        "oil_density": 0.5016,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "temperature": 60.0,
                        "gor": 0.0,
                        "liberated_gas": 1802.83,
                        "oil_fvf": 1.0,
                        "oil_density": 0.7843,
                        "gas_z_factor": 0.9892,
                        "gas_specific_gravity": 1.316,
                        "gas_density": null,
                        "gas_viscosity": null
                    }
                ]
            }
    ]
}


     - 1.4.6 If the page contains a Differential Liberation (DLE) or Differential Vaporization (DV) table:
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Residual oil data: If mention residual oil or final stage
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity
       gas-oil ratio solution** | gor

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON
       ** in "Gas-Oil Ratio" column if you find "solution" and "liberated", take the "solution" and put to "gor" key in JSON

        Example JSON:

{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                "name": "Differential Liberation Expansion",
                "type": "DLE",
                "temperature": 229.7,
                "temperature_unit": "F",
                "dle_experiment_type": "Standard DLE Experiment",

                # // First part, Liberated gas
                "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "N2",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "C7+",
                            "mw": 114.01
                        }
                    ],
                    # Fill here if the table displays component as row and pressure as column, or otherwise
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.6859 # Composition in mole percent
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0085
                                }
                            ]
                        },
                        {
                            // Other stages ...
                        },
                        {
                            "stage_number": 9,
                            "composition": [
                                {
                                    "stage_number": 9,
                                    "component_name": "C1",
                                    "molar_amount": 0.1309
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 9,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0629
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Residual oil
                "evolved_gas_specific_gravity": null,
                "evolved_gas_composition_id": null,
                "evolved_gas_composition": null,
                "average_residual_oil_mw": 179.43,
                "average_residual_oil_density": 0.8128,
                "average_residual_oil_density_unit": "g/cm3",
                "residual_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.019,
                            "mass_amount": 0.0127
                        }
                    ]
                },
                "pressure_unit": "psia",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",
                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 8513.0,
                        "is_saturation_pressure": true,
                        "gor": 2847.67,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.5407,
                        "oil_density": 0.5714,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "gor": 0.0,
                        "liberated_gas": 2847.67,
                        "oil_fvf": 1.0975,
                        "oil_density": 0.7471,
                        "gas_z_factor": 0.9887,
                        "gas_specific_gravity": 2.1686,
                        "gas_density": null,
                        "gas_viscosity": 0.00925
                    }
                ]
            }
    ]
}

     - 1.4.7 If the page contains a Viscosity experiment (VISCO) table:
       - Identify measurement units for parameters.
       - Viscosity table has pressure as y-axis and viscosities as x-axis
       - Extract viscosity data and structure into "experiments".
       - Never come up with new structures or keys, just fill up in the specified JSON schema.

        Example JSON:

{
    "page": ...,
    "sample_name": ...,
    "experiments": [
        {
            "name": "Oil Viscosity",
            "type": "VISCO",
            "temperature": 229.7,
            "temperature_unit": "F",
            "pressure_unit": "psia",
            "oil_viscosity_unit": "cP",
            "gas_viscosity_unit": "cP",
            "stages": [
                {
                    "visco_id": 1018,
                    "pressure": 5413.0,
                    "oil_viscosity": 0.088,
                    "gas_viscosity": null
                },
                {
                    // Other stages ...
                },
                {
                    "visco_id": 1018,
                    "pressure": 13.0,
                    "oil_viscosity": 0.749,
                    "gas_viscosity": 0.00925
                }
            ]
        }
    ]
}

2. If any summary data or descriptive information is found:
   - Include it as key "Other_information", outside the "experiments" key in JSON.

   Example JSON:
   {
       "solution_gas_oil_ratio": 100,
       "separator_volume_factor": 300,
       "solution_gas_oil_ratio_unit": "scf/stb",
       "separator_volume_factor_unit": "bbl",
       ......
   }

3. Finally, you must stick to the following units

Unit shown | Unit in JSON
--------|-----------
g/cc | g/cm3
mole% | %
Vol/Vol | Sm3/Sm3
scf/sep bbl | scf/bbl
kg/Sm3 | kg/m3
psi | psia
Air=1 | SG

4. If you find Figure in the page, DO NOT extract any data from it. Just extract the title into json.

  {
    "figure_title": "Plot of dewpoint pressure"
  }

5. Dealing with Paraffinic-Naphtenes-Aromatics (PNA) composition

In some cases, PNA can be reported in compositional table, DLE liberated gas, or MSS liberated gas.

For example:

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| n-Hexane          | 0.086   | 0.351     | 86.2  |
| iso-Paraffins     | 0.154   | 0.627     | 86.2  |
| Naphthenes        | 0.033   | 0.109     | 70.1  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |
| n-Heptane         | 0.014   | 0.067     | 100.2 |
| iso-Paraffins     | 0.038   | 0.181     | 100.2 |
| Naphthenes        | 0.116   | 0.476     | 86.6  |
| Aromatics         | 0.030   | 0.112     | 78.1  |

You see for every C6 total and C7 total, there are iso-Paraffins (P), Naphthenes (N), and Aromatics (A).

Remove these PNA, so you just have C6 total and C7 total.

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |

From here, you just extract into corresponding JSON schema as defined in instructions 1 until 4
"
            }
          ]
        },
        {
          "role":"model",
          "parts":[
            {
              "text":"{
    "page": "33 of 119",
    "sample_name": "WFL-01718",
    "uncorrected": null,
    "last_component": "C36+",
    "flashed_oil_mw": 334.2,
    "flashed_oil_density": null,
    "flashed_oil_density_unit": null,
    "flashed_oil_temperature": null,
    "flashed_oil_temperature_unit": null,
    "flashed_oil_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 0.062,
                "mass_amount": 0.003
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 0.133,
                "mass_amount": 0.012
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 0.023,
                "mass_amount": 0.003
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 0.006,
                "mass_amount": 0.001
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 0.017,
                "mass_amount": 0.003
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.009,
                "mass_amount": 0.002
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 0.009,
                "mass_amount": 0.002
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 0.014,
                "mass_amount": 0.003
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 0.097,
                "mass_amount": 0.025
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 0.21,
                "mass_amount": 0.059
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 0.524,
                "mass_amount": 0.171
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 1.107,
                "mass_amount": 0.41
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 2.237,
                "mass_amount": 0.897
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 2.842,
                "mass_amount": 1.25
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 3.728,
                "mass_amount": 1.796
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 4.545,
                "mass_amount": 2.38
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 5.099,
                "mass_amount": 2.899
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 5.447,
                "mass_amount": 3.358
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 5.35,
                "mass_amount": 3.554
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 5.073,
                "mass_amount": 3.598
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 4.802,
                "mass_amount": 3.607
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 4.527,
                "mass_amount": 3.563
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 4.045,
                "mass_amount": 3.329
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 3.768,
                "mass_amount": 3.281
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 3.459,
                "mass_amount": 3.105
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 3.118,
                "mass_amount": 2.911
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 2.833,
                "mass_amount": 2.747
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 2.539,
                "mass_amount": 2.561
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 2.45,
                "mass_amount": 2.559
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 2.218,
                "mass_amount": 2.39
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 2.227,
                "mass_amount": 2.479
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 2.059,
                "mass_amount": 2.354
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 1.986,
                "mass_amount": 2.342
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 1.762,
                "mass_amount": 2.13
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 1.575,
                "mass_amount": 1.956
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 1.416,
                "mass_amount": 1.805
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 1.287,
                "mass_amount": 1.683
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 1.196,
                "mass_amount": 1.593
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 16.2,
                "mass_amount": 33.179
            },
            {
                "input_name": "Sum",
                "mw": null,
                "molar_amount": 100.0,
                "mass_amount": 100.0
            }
        ]
    },
    "flashed_gas_mw": 17.72,
    "flashed_gas_specific_gravity": 0.612,
    "flashed_gas_specific_gravity_unit": "SG",
    "flashed_gas_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": 0.497,
                "mass_amount": 0.785
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": 0.184,
                "mass_amount": 0.457
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 89.786,
                "mass_amount": 81.297
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 8.852,
                "mass_amount": 15.023
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 0.356,
                "mass_amount": 0.887
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 0.045,
                "mass_amount": 0.147
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 0.059,
                "mass_amount": 0.192
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.023,
                "mass_amount": 0.093
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 0.012,
                "mass_amount": 0.049
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 0.017,
                "mass_amount": 0.067
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 0.044,
                "mass_amount": 0.214
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 0.042,
                "mass_amount": 0.222
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 0.037,
                "mass_amount": 0.223
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 0.025,
                "mass_amount": 0.174
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 0.017,
                "mass_amount": 0.13
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 0.004,
                "mass_amount": 0.037
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.003
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Sum",
                "mw": null,
                "molar_amount": 100.0,
                "mass_amount": 100.0
            }
        ]
    },
    "recombined_fluid_mw": 189.0,
    "recombined_fluid_gor": null,
    "recombined_fluid_gor_unit": null,
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": 0.228,
                "mass_amount": 0.034
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": 0.084,
                "mass_amount": 0.02
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 41.229,
                "mass_amount": 3.5
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 4.134,
                "mass_amount": 0.658
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 0.176,
                "mass_amount": 0.041
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 0.024,
                "mass_amount": 0.007
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 0.036,
                "mass_amount": 0.011
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.016,
                "mass_amount": 0.006
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 0.011,
                "mass_amount": 0.004
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 0.015,
                "mass_amount": 0.006
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 0.073,
                "mass_amount": 0.033
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 0.133,
                "mass_amount": 0.066
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 0.3,
                "mass_amount": 0.173
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 0.611,
                "mass_amount": 0.4
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 1.218,
                "mass_amount": 0.864
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 1.54,
                "mass_amount": 1.198
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 2.018,
                "mass_amount": 1.719
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 2.459,
                "mass_amount": 2.278
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 2.759,
                "mass_amount": 2.774
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 2.948,
                "mass_amount": 3.214
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 2.895,
                "mass_amount": 3.401
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 2.745,
                "mass_amount": 3.443
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 2.599,
                "mass_amount": 3.452
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 2.45,
                "mass_amount": 3.41
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 2.189,
                "mass_amount": 3.186
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 2.039,
                "mass_amount": 3.14
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 1.872,
                "mass_amount": 2.971
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 1.687,
                "mass_amount": 2.786
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 1.533,
                "mass_amount": 2.629
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 1.374,
                "mass_amount": 2.451
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 1.326,
                "mass_amount": 2.449
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 1.201,
                "mass_amount": 2.287
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 1.205,
                "mass_amount": 2.372
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 1.114,
                "mass_amount": 2.253
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 1.075,
                "mass_amount": 2.241
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 0.953,
                "mass_amount": 2.038
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 0.852,
                "mass_amount": 1.872
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 0.766,
                "mass_amount": 1.727
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 0.696,
                "mass_amount": 1.611
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 0.647,
                "mass_amount": 1.524
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 8.767,
                "mass_amount": 31.752
            },
            {
                "input_name": "Sum",
                "mw": null,
                "molar_amount": 100.0,
                "mass_amount": 100.0
            }
        ]
    }
}"
            }
          ]
        }
    ]}
{"contents":[
        {
          "role":"user",
          "parts":[
            {
              "fileData":{
                "mimeType":"image/jpeg",
                "fileUri":"https://github.com/yohanesnuwara/sft-finetune-gemini/blob/main/images/RS-113242%20Preliminary%20Results_v4%20-%20%C3%98st%20Frigg_page-0034.jpg"
              }
            },
            {
              "text":"OCR the following page into complete JSON.

Your task is to parse and extract as many infomation as possible from the page and put into JSON like specified

Never come up with new structures or keys, just fill up in the specified JSON schema.

Page can be either full texts, full table, or texts with table.

1. Identify the type of page:
   - 1.1 If the page consists only of texts:

      Parse sentences into JSON and do not give full sentence or summary

      Example sentence:

      "Two sets of sample (CL01 & CL02) is transferred at 15 deg C and pressure 1 atm" (page A.1)

      JSON response

      {
          "page": "A.1",
          "conditioning": {
              "samples": ["CL01", "CL02"],
              "transfer_temp": 15,
              "transfer_temp_unit": "C",
              "transfer_pressure": 1,
              "transfer_pressure_unit": "atm"
              // ...
          }
      }

      Try to find these parameters inferred from "flash" keyword
      {
        "sep_pressure": ...,
        "sep_pressure_unit": ...,
        "sep_temperature": ...,
        "sep_temperature_unit": ...,
      }



   - 1.2 If the page consists of table of contents
     - Put each table title from the list in key "table_title"
     - Identify the "keyword" in the table title, into these categories
        - If mention composition then "composition"
        - If mention constant composition expansion or constant mass expansion then "CCE"
        - If mention constant volume depletion then "CVD"
        - If mention differential liberation expansion then "DLE"
        - If mention multistage separator then "MSS"
        - If mention viscosity then "VISCO"
     - Identify the "sample_name" from keywords like Cylinder, Sample, Chamber number, or if it is sample pair
     - Identify the "page_number"

    JSON response:

    {
        "page": "....",
        "list_content": [
            {
                "title": "...",
                "keyword": "composition",
                "sample_name": null,
                "page_number": 1
            },
            {
                "title": "...",
                "keyword": "CCE"
                "sample_name": "A01",
                "page_number": 2
            },
            {
                "title": "...",
                "keyword": "CVD",
                "sample_name": "A01+A02",
                "page_number": 3
            }
        ]
    }

   - 1.3 If the page consists of texts with table:
     - 1.3.1 If the page displays "sample inventory" or "sample summary" table:
       - This type of page can be recognized by structure of the table. If the table has Sample ID/name or Bottle no in the y-axis, and properties in the x-axis
       - Properties reported in this summary table such as sampling depth, GOR, density, molecular weight, reservoir temperature, reservoir pressure (Pres), viscosity
       - Do not confuse this table with experiment table
       - Extract data into the "sample_inventory" JSON schema.
       - Extract other relevant information into "Other_information".
       - If you do not find any of the keys, DO NOT create the key
       - Identify title of each table and decide the "type"
            - If mention MDT oil, then "type": "OFT"
            - If mention MDT water, then "type": "WATER"

       Example JSON:
        {
          "page": "...",
          "sample_inventory": {
            "data": [
              {
                "sample_name": "1.01",
                "type": "OFT", # put "OFT" if mention MDT oil, "WATER" if mention MDT water
                "sampling_date": "2023-04-26", # If mention Transfer Date
                "well_id": "23/1", # Well name
                "basin_id": null,
                "sub_basin_id": null,
                "field_id": "Volve", # Field name
                "field_segment_id": null,
                "formation_id": "Realgrunnen", # Formation name
                "formation_zone_id": null,
                "reservoir_pressure": 182.0,
                "reservoir_pressure_unit": "bara",
                "reservoir_temperature": 69.8,
                "reservoir_temperature_unit": "C",
                "true_vertical_depth": 1929.0, # If mention sampling depth m TVDSS (true vertical depth sub sea)
                "true_vertical_depth_unit": "m",
                "measured_depth": 1984.5, # If mention sampling depth m MD (measured depth)
                "measured_depth_unit": "m",
                "pressure_at_lab": 400.0,
                "pressure_at_lab_unit": "bara",
                "temperature_at_lab": 80.0,
                "temperature_at_lab_unit": "C",
                "pressure_when_sampled": 100,
                "pressure_when_sampled_unit": "bara",
                "temperature_when_sampled": 23,
                "temperature_when_sampled_unit": "C",
                "top_perforation_depth": 2000,
                "top_perforation_depth_unit": "m",
                "bottom_perforation_depth": 3000,
                "bottom_perforation_depth_unit": "m",
                "transfer_pressure": 450.0,
                "transfer_pressure_unit": "bara",
                "transfer_temperature": 80.0,
                "transfer_temperature_unit": "C",
                "drawdown_pressure": 100,
                "drawdown_pressure_unit": "bara",
                "flashed_oil_contamination": 2.0, # If mention Mud filtrate contamination in STO
                "flashed_oil_contamination": "mass%", # If the unit mentioned is Wt%
                "fluid_type": "Oil",
                "mud_base": "Oil", # put "Oil" if mention OBM, or "Water" if mention WBM
                //... # Other parameters
              },
              {
                "Sample Type": "REC", # If mention Recombined
                # Same as above
                //...
              }
            ]
          },
          "Other_information": {
            "remarks": "Additional details can be provided here."
          }
        }

   - 1.4 If the page consists of a table:
     - 1.4.1 If the page consists of an Information table or descriptions:
       - Extract physical parameters and values into a structured JSON format.
       - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
         - If found, set "sample_name" accordingly.
         - If not found, set "sample_name" to null.

       Important data:

       - If you find "density of stock tank oil", put into key "flashed_oil_density", then fill "flashed_oil_density_unit"
       - If you see gas oil ratio (GOR), put into key "recombined_fluid_gor", then fill "recombined_fluid_gor_unit

       Getting 'flashed_oil_temperature':
       If you see the following

        ```
        Separation conditions:    From:  80.0 °C and   400 bara
                                  To:    25.5 °C and   atm. pressure
        ```

       In this case, "flashed_oil_temperature": 25.5, "flashed_oil_temperature_unit": "C"
       Pick the number after "To:   " before "and atm.pressure"

       Example JSON:
        {
            "page": "...",
            "sample_name": "...",
            "parameter1": "...",
            "parameter1_unit": "...",
            "parameter2": "...",
            "parameter2_unit": "...",
            "parameter3": "...",
            "parameter4_unit": "...",

            # Important data
            "flashed_oil_density": ...,
            "flashed_oil_density_unit": "...",
            "flashed_oil_temperature": 20.5,
            "flashed_oil_temperature_unit": "C",
            "recombined_fluid_gor": ...,
            "recombined_fluid_gor_unit": "...",
            et cetera ...
        }

     - 1.4.2 If the page contains a Composition table :

        - Dynamically identify each fluid-type group by reading the top header row(s), matching these synonyms:
          - flashed_oil ↔ "Stock tank oil", "Flashed Liquid", "Stock tank oil"
          - flashed_gas ↔ "Stock tank gas", "Flashed gas"
          - recombined_fluid ↔ "Monophasic fluid", "Reservoir fluid"
        - Under each fluid-type header, locate its two sub-columns: one labeled "Mole %" → molar_amount, the other "Weight %" → mass_amount.
        - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
            - If found, set "sample_name" accordingly.
            - Sample name is just like ID consist of letter and number, without C10+ or C36+
            - If not found, set "sample_name" to null.
        - If the table title says "uncorrected" or "corrected", set "uncorrected": true/false.
        - Identify "last_component" from the final row label (e.g. "C36+"), include units on every top-level number, and fill only the keys in the prescribed schema—do not invent new ones.

        IMPORTANT!!!
        - In case there is blank cell in the table (value not reported)
        - If you do not find BOTH molar amount and mass amount of a component, do not extract it into JSON

        Example table with blanks:

      |Component         | Stock tank gas    | Stock tank oil    |  Reservoir fluid   | Mol weight  |
      |Mole%             | Weight% | Mole%   | Weight% | Mole%   |  Mole%   | Weight% |             |
      |Nitrogen          | 0.157   | 0.183   |         |         |  0.084   | 0.024   | 28.02       |
      |Carbon Dioxide    | 6.582   | 12.048  |         |         |  3.509   | 1.555   | 44.01       |
      |Hydrogen Sulphide | 0       | 0       |         |         |  0       | 0       | 34.08       |
      |Methane           | 73.927  | 49.324  | 0.115   | 0.01    |  39.466  | 6.376   | 16.04       |
      |Ethane            | 8.997   | 11.251  | 0.222   | 0.036   |  4.9     | 1.484   | 30.07       |


        Result JSON (referring to the table):

{
    "page": ...,
    "sample_name": "A001", # The name of sample
    "uncorrected": true, # false or null
    "last_component": "C10+",
    "flashed_oil_mw": 151.9, # oil molecular weight or MW
    "flashed_oil_density": 0.777, # oil density at stock-tank condition 15 degC
    "flashed_oil_density_unit": "g/cm3", # g/cm3, kg/m3
    "flashed_oil_temperature": 60.0, # temperature at flash
    "flashed_oil_temperature_unit": "F", # F, C, K, R
    "flashed_oil_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide molar_amount and mass_amount is null, so no need to extract
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 0.115,
                "mass_amount": 0.01
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 0.222,
                "mass_amount": 0.036
            }
        ]
    },
    "flashed_gas_mw": 23.4, # gas molecular weight or MW
    "flashed_gas_specific_gravity": 0.808, # also called relative density or ideal
    "flashed_gas_specific_gravity_unit": "SG", # if unit not mentioned then most likely SG
    "flashed_gas_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide has molar_amount and mass_amount, so extract it
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.157,
                "mass_amount": 0.183
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 6.582,
                "mass_amount": 12.048
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 73.997,
                "mass_amount": 49.324
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 8.997,
                "mass_amount": 11.251
            }
        ]
    },

    # Recombined is sometimes called as Reservoir Fluid or Monophasic
    "recombined_fluid_mw": 30.2, # reservoir fluid MW
    "recombined_fluid_gor": 12200.8, # Gas oil ratio or gas liquid ratio (GLR) or Rs
    "recombined_fluid_gor_unit": "scf/STB", # scf/STB, Sm3/Sm3, Sm3/m3, scf/bbl
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.084,
                "mass_amount": 0.024
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 3.509,
                "mass_amount": 1.555
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 39.466,
                "mass_amount": 6.376
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 4.9,
                "mass_amount": 1.484
            }
        ]
    }
}
     - 1.4.3 If the page contains a Constant Composition Expansion (CCE) or Constant Mass Expansion (CME) table:
       - Identify measurement units for parameters.
       - Always put as "CCE" not "CME"
       - Extract data and structure into the "experiments" JSON key.
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Stages 'order' key must always start from 0
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column name | Key
       --------|-----------
       Relative Volume (column) | relative_total_volume
       Relative Volumes (Vs/Vs,BP) | relative_total_volume
       RLD (column) | relative_oil_volume
       % Liq/Sat (Vliq/Vsat) | relative_oil_volume

       Note: relative_oil_volume always null BEFORE the saturation_pressure=True

       - You must stick to the following units

        Variable | Unit
        --------|-----------
        relative_total_volume_unit | Vtot/Vsat

       Example JSON:


{
    "page" : ...,
    "sample_name": ...,
    "experiments": [
        {
            "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
            "sample_name": 1184,
            "name": "Constant Composition Expansion",
            "type": "CCE",
            "temperature": 106.0,
            "temperature_unit": "C",
            "pressure_unit": "psia",
            "relative_oil_volume_unit": "Vo/Vsat (%)",
            "single_phase_density_unit": "g/cm3",
            "relative_total_volume_unit": "Vtot/Vsat",
            "stages": [
                {
                    "pressure": 9000.0,
                    "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                    "relative_oil_volume": null,
                    "relative_total_volume": 0.79,
                    "single_phase_density": 0.422,
                    "z_factor": 1.407
                },
                // Other stages ...
                {
                    "pressure": 3011.0,
                    "is_saturation_pressure": false,
                    "relative_oil_volume": 14.37,
                    "relative_total_volume": 1.315,
                    "single_phase_density": null,
                    "z_factor": null
                }
            ]
        }
    ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) COMPOSITION:
       - You put the page in this category if you see keywords "Constant Volume Depletion" and chemical component
       - Please Read the WHOLE COLUMNS of TABLE
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true

       - If the columns like this: 2600 psia, 2010 psia, 1000 psia, Residual Oil
          - Put the pressures columns inside Liberated Gas schema
          - Put the Residual Oil column inside Final Stage Oil schema

       - Liberated Gas structure:
          - Put each of the "pressure" inside "stages" key
          - Put ALL the "components" and its "molar_amount" inside each "pressure" which it refers to

        Structure:

{
  "sample_name": null,
  "experiments": [
    {
      "sample_name": null,
      "continued": false,
      "saturation_pressure_type": "Dewpoint",
      "name": "Constant Volume Depletion",
      "type": "CVD",
      "temperature": 106.0,
      "temperature_unit": "C",

      # First type
      "liberated_gas_compositions": {
        "components": [
          {
            "input_name": "CO2",
            "mw": 44.01
          },
          {
            "input_name": "Other",
            "mw": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0
          }
        ],
        "stages": [
          {
            "pressure": 2600,
            "composition": [
              {
                "component_name": "CO2",
                "molar_amount": 0.305
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "C30+",
                "molar_amount": 0.087
              }
            ]
          },
          {
            "pressure": 1300,
            "composition": [
              {
                "component_name": "2M-C6",
                "molar_amount": 0.123
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "Toluene",
                "molar_amount": 0.037
              }
            ]
          }
        ]
      },

       - Residual Oil structure:
          - Put ALL the "components" and its "molar_amount" inside "composition" key
          - Get the "final_stage_oil_mw" from the last row of table if mentioning "MW"

        Structure:

      # Second type
      "final_stage_oil_mw": 100.14,
      "final_stage_oil_density": 630.0,
      "final_stage_oil_density_unit": "kg/m3",
      "stock_tank_oil_density": 630.0,
      "stock_tank_oil_density_unit": "kg/m3",
      "final_stage_oil_composition": {
        "components": [
          {
            "input_name": "CO2",
            "mw": null,
            "molar_amount": 0.213,
            "mass_amount": null
          },
          {
            "input_name": "Other",
            "mw": null,
            "molar_amount": null,
            "mass_amount": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0,
            "molar_amount": 0.553,
            "mass_amount": null
          }
        ]
      }
    }
  ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) PROPERTIES table:
       - You put into this category If you see Pressure as row and Physical Properties as column (No composition)
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column Name | Key
       --------|-----------
       Total Recovery (mole %) | cumulative_moles_removed
       Liq. Density (g/cc) | oil_density

        Example JSON:

      {
          "sample_name": ..., # Put sample ID here
          "experiments": [
              {
                  "sample_name": ...,
                  "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                  "name": "Constant Volume Depletion",
                  "type": "CVD",
                  "temperature": 106.0,
                  "temperature_unit": "C",
                  "pressure_unit": "psia",
                  "oil_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_viscosity_unit": "...", # "cP"
                  "relative_oil_volume_unit": "...", # "%"
                  "incremental_moles_removed_unit": "...", # "%"
                  "cumulative_moles_removed_unit": "...", # "%"

                  # Properties data
                  "stages": [
                      # Fill here if the table displays properties as row and pressure as column, or otherwise
                      {
                          "pressure": 4661.0,
                          "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                          "relative_oil_volume": 0.0,
                          "incremental_moles_removed": null, # "%"
                          "cumulative_moles_removed": 0.0,
                          "oil_density": null,
                          "gas_z_factor": 0.922,
                          "gas_specific_gravity": null,
                          "gas_density": 0.339,
                          "gas_viscosity": 0.042,
                          "gas_plus_fraction_mw": null,
                      },
                      {
                          // Other stages ...
                      }
                      {
                          "pressure": 1300.0,
                          "is_saturation_pressure": false,
                          "relative_oil_volume": 13.18,
                          "incremental_moles_removed": null,
                          "cumulative_moles_removed": 67.06,
                          "oil_density": 0.63,
                          "gas_z_factor": 0.874,
                          "gas_specific_gravity": null,
                          "gas_density": 0.075,
                          "gas_viscosity": 0.015,
                          "gas_plus_fraction_mw": null,
                      }
                  ]
              }
          ]
      }

     - 1.4.5 If the page contains a Multi-Stage Separator (MSS) or Three Stage Separator table:
       - If you see "Two Stage", "Three Stage", "Four Stage" Separator, it is MSS. But, "Single Stage" is NOT MSS
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Stock tank oil data: If the title mention stock tank or tank oil
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If you see "Pressure Atm. bara", it means "pressure": 1 (atmospheric pressure means 1 bara)
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON

        Exception:
       - If you find page with title "Bo and GOR from Three Stage Separator test during depletion using the results from Differential Liberation ...", DO NOT extract the data.

        Example JSON:
{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                    "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                    "name": "Multi-stage Separator",
                    "type": "MSS",
                    "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "Dodecanes Plus",
                            "mw": null
                        }
                    ],
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.7579
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0024
                                }
                            ]
                        },
                        {
                            "stage_number": 1,
                            "composition": [
                                {
                                    "stage_number": 1,
                                    "component_name": "C1",
                                    "molar_amount": 0.6791
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 1,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0022
                                }
                            ]
                        },
                        {
                            "stage_number": 2,
                            "composition": [
                                {
                                    "stage_number": 2,
                                    "component_name": "C1",
                                    "molar_amount": 0.1999
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 2,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.019
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Stock tank oil
                "stock_tank_oil_molecular_weight": 145.78,
                "stock_tank_oil_density": 0.7843,
                "stock_tank_oil_density_unit": "g/cm3",
                "stock_tank_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.013,
                            "mass_amount": 0.0107
                        }
                    ]
                },
                "pressure_unit": "psia",
                "temperature_unit": "F",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",

                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 3724.0,
                        "is_saturation_pressure": true,
                        "temperature": 230.0,
                        "gor": 1802.83,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.1783,
                        "oil_density": 0.5016,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "temperature": 60.0,
                        "gor": 0.0,
                        "liberated_gas": 1802.83,
                        "oil_fvf": 1.0,
                        "oil_density": 0.7843,
                        "gas_z_factor": 0.9892,
                        "gas_specific_gravity": 1.316,
                        "gas_density": null,
                        "gas_viscosity": null
                    }
                ]
            }
    ]
}


     - 1.4.6 If the page contains a Differential Liberation (DLE) or Differential Vaporization (DV) table:
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Residual oil data: If mention residual oil or final stage
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity
       gas-oil ratio solution** | gor

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON
       ** in "Gas-Oil Ratio" column if you find "solution" and "liberated", take the "solution" and put to "gor" key in JSON

        Example JSON:

{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                "name": "Differential Liberation Expansion",
                "type": "DLE",
                "temperature": 229.7,
                "temperature_unit": "F",
                "dle_experiment_type": "Standard DLE Experiment",

                # // First part, Liberated gas
                "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "N2",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "C7+",
                            "mw": 114.01
                        }
                    ],
                    # Fill here if the table displays component as row and pressure as column, or otherwise
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.6859 # Composition in mole percent
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0085
                                }
                            ]
                        },
                        {
                            // Other stages ...
                        },
                        {
                            "stage_number": 9,
                            "composition": [
                                {
                                    "stage_number": 9,
                                    "component_name": "C1",
                                    "molar_amount": 0.1309
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 9,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0629
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Residual oil
                "evolved_gas_specific_gravity": null,
                "evolved_gas_composition_id": null,
                "evolved_gas_composition": null,
                "average_residual_oil_mw": 179.43,
                "average_residual_oil_density": 0.8128,
                "average_residual_oil_density_unit": "g/cm3",
                "residual_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.019,
                            "mass_amount": 0.0127
                        }
                    ]
                },
                "pressure_unit": "psia",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",
                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 8513.0,
                        "is_saturation_pressure": true,
                        "gor": 2847.67,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.5407,
                        "oil_density": 0.5714,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "gor": 0.0,
                        "liberated_gas": 2847.67,
                        "oil_fvf": 1.0975,
                        "oil_density": 0.7471,
                        "gas_z_factor": 0.9887,
                        "gas_specific_gravity": 2.1686,
                        "gas_density": null,
                        "gas_viscosity": 0.00925
                    }
                ]
            }
    ]
}

     - 1.4.7 If the page contains a Viscosity experiment (VISCO) table:
       - Identify measurement units for parameters.
       - Viscosity table has pressure as y-axis and viscosities as x-axis
       - Extract viscosity data and structure into "experiments".
       - Never come up with new structures or keys, just fill up in the specified JSON schema.

        Example JSON:

{
    "page": ...,
    "sample_name": ...,
    "experiments": [
        {
            "name": "Oil Viscosity",
            "type": "VISCO",
            "temperature": 229.7,
            "temperature_unit": "F",
            "pressure_unit": "psia",
            "oil_viscosity_unit": "cP",
            "gas_viscosity_unit": "cP",
            "stages": [
                {
                    "visco_id": 1018,
                    "pressure": 5413.0,
                    "oil_viscosity": 0.088,
                    "gas_viscosity": null
                },
                {
                    // Other stages ...
                },
                {
                    "visco_id": 1018,
                    "pressure": 13.0,
                    "oil_viscosity": 0.749,
                    "gas_viscosity": 0.00925
                }
            ]
        }
    ]
}

2. If any summary data or descriptive information is found:
   - Include it as key "Other_information", outside the "experiments" key in JSON.

   Example JSON:
   {
       "solution_gas_oil_ratio": 100,
       "separator_volume_factor": 300,
       "solution_gas_oil_ratio_unit": "scf/stb",
       "separator_volume_factor_unit": "bbl",
       ......
   }

3. Finally, you must stick to the following units

Unit shown | Unit in JSON
--------|-----------
g/cc | g/cm3
mole% | %
Vol/Vol | Sm3/Sm3
scf/sep bbl | scf/bbl
kg/Sm3 | kg/m3
psi | psia
Air=1 | SG

4. If you find Figure in the page, DO NOT extract any data from it. Just extract the title into json.

  {
    "figure_title": "Plot of dewpoint pressure"
  }

5. Dealing with Paraffinic-Naphtenes-Aromatics (PNA) composition

In some cases, PNA can be reported in compositional table, DLE liberated gas, or MSS liberated gas.

For example:

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| n-Hexane          | 0.086   | 0.351     | 86.2  |
| iso-Paraffins     | 0.154   | 0.627     | 86.2  |
| Naphthenes        | 0.033   | 0.109     | 70.1  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |
| n-Heptane         | 0.014   | 0.067     | 100.2 |
| iso-Paraffins     | 0.038   | 0.181     | 100.2 |
| Naphthenes        | 0.116   | 0.476     | 86.6  |
| Aromatics         | 0.030   | 0.112     | 78.1  |

You see for every C6 total and C7 total, there are iso-Paraffins (P), Naphthenes (N), and Aromatics (A).

Remove these PNA, so you just have C6 total and C7 total.

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |

From here, you just extract into corresponding JSON schema as defined in instructions 1 until 4
"
            }
          ]
        },
        {
          "role":"model",
          "parts":[
            {
              "text":"{
    "page": "34",
    "sample_name": "WFL-02018",
    "recombined_fluid_gor": 53.7,
    "recombined_fluid_gor_unit": "Sm3/Sm3",
    "flashed_oil_density": 911.0,
    "flashed_oil_density_unit": "kg/m3",
    "flashed_oil_temperature": 24.4,
    "flashed_oil_temperature_unit": "C",
    "flashed_gas_specific_gravity": 0.611,
    "flashed_gas_specific_gravity_unit": "SG",
    "flashed_oil_mw": 333.8,
    "flashed_oil_mw_unit": "g/mol",
    "flashed_oil_c7_plus_mw": 335.0,
    "flashed_oil_c7_plus_mw_unit": "g/mol",
    "flashed_oil_c7_plus_density": 911.0,
    "flashed_oil_c7_plus_density_unit": "kg/m3",
    "flashed_oil_c10_plus_mw": 339.0,
    "flashed_oil_c10_plus_mw_unit": "g/mol",
    "flashed_oil_c10_plus_density": 912.0,
    "flashed_oil_c10_plus_density_unit": "kg/m3",
    "Other_information": {
        "sampling_depth_md": 1984.5,
        "sampling_depth_md_unit": "m MD",
        "separator_temperature": 80.0,
        "separator_temperature_unit": "C",
        "separator_pressure": 400.0,
        "separator_pressure_unit": "bara",
        "flashed_oil_temperature": 24.4,
        "flashed_oil_temperature_unit": "C",
        "flashed_oil_pressure": 1.0,
        "flashed_oil_pressure_unit": "bara",
        "standard_conditions_gas_temperature": 15.0,
        "standard_conditions_gas_temperature_unit": "C",
        "standard_conditions_gas_pressure": 1.01325,
        "standard_conditions_gas_pressure_unit": "bara",
        "standard_conditions_oil_temperature": 15.0,
        "standard_conditions_oil_temperature_unit": "C",
        "standard_conditions_oil_pressure": 1.0,
        "standard_conditions_oil_pressure_unit": "bara"
    }
}"
            }
          ]
        }
    ]}
{"contents":[
        {
          "role":"user",
          "parts":[
            {
              "fileData":{
                "mimeType":"image/jpeg",
                "fileUri":"https://github.com/yohanesnuwara/sft-finetune-gemini/blob/main/images/RS-113242%20Preliminary%20Results_v4%20-%20%C3%98st%20Frigg_page-0037.jpg"
              }
            },
            {
              "text":"OCR the following page into complete JSON.

Your task is to parse and extract as many infomation as possible from the page and put into JSON like specified

Never come up with new structures or keys, just fill up in the specified JSON schema.

Page can be either full texts, full table, or texts with table.

1. Identify the type of page:
   - 1.1 If the page consists only of texts:

      Parse sentences into JSON and do not give full sentence or summary

      Example sentence:

      "Two sets of sample (CL01 & CL02) is transferred at 15 deg C and pressure 1 atm" (page A.1)

      JSON response

      {
          "page": "A.1",
          "conditioning": {
              "samples": ["CL01", "CL02"],
              "transfer_temp": 15,
              "transfer_temp_unit": "C",
              "transfer_pressure": 1,
              "transfer_pressure_unit": "atm"
              // ...
          }
      }

      Try to find these parameters inferred from "flash" keyword
      {
        "sep_pressure": ...,
        "sep_pressure_unit": ...,
        "sep_temperature": ...,
        "sep_temperature_unit": ...,
      }



   - 1.2 If the page consists of table of contents
     - Put each table title from the list in key "table_title"
     - Identify the "keyword" in the table title, into these categories
        - If mention composition then "composition"
        - If mention constant composition expansion or constant mass expansion then "CCE"
        - If mention constant volume depletion then "CVD"
        - If mention differential liberation expansion then "DLE"
        - If mention multistage separator then "MSS"
        - If mention viscosity then "VISCO"
     - Identify the "sample_name" from keywords like Cylinder, Sample, Chamber number, or if it is sample pair
     - Identify the "page_number"

    JSON response:

    {
        "page": "....",
        "list_content": [
            {
                "title": "...",
                "keyword": "composition",
                "sample_name": null,
                "page_number": 1
            },
            {
                "title": "...",
                "keyword": "CCE"
                "sample_name": "A01",
                "page_number": 2
            },
            {
                "title": "...",
                "keyword": "CVD",
                "sample_name": "A01+A02",
                "page_number": 3
            }
        ]
    }

   - 1.3 If the page consists of texts with table:
     - 1.3.1 If the page displays "sample inventory" or "sample summary" table:
       - This type of page can be recognized by structure of the table. If the table has Sample ID/name or Bottle no in the y-axis, and properties in the x-axis
       - Properties reported in this summary table such as sampling depth, GOR, density, molecular weight, reservoir temperature, reservoir pressure (Pres), viscosity
       - Do not confuse this table with experiment table
       - Extract data into the "sample_inventory" JSON schema.
       - Extract other relevant information into "Other_information".
       - If you do not find any of the keys, DO NOT create the key
       - Identify title of each table and decide the "type"
            - If mention MDT oil, then "type": "OFT"
            - If mention MDT water, then "type": "WATER"

       Example JSON:
        {
          "page": "...",
          "sample_inventory": {
            "data": [
              {
                "sample_name": "1.01",
                "type": "OFT", # put "OFT" if mention MDT oil, "WATER" if mention MDT water
                "sampling_date": "2023-04-26", # If mention Transfer Date
                "well_id": "23/1", # Well name
                "basin_id": null,
                "sub_basin_id": null,
                "field_id": "Volve", # Field name
                "field_segment_id": null,
                "formation_id": "Realgrunnen", # Formation name
                "formation_zone_id": null,
                "reservoir_pressure": 182.0,
                "reservoir_pressure_unit": "bara",
                "reservoir_temperature": 69.8,
                "reservoir_temperature_unit": "C",
                "true_vertical_depth": 1929.0, # If mention sampling depth m TVDSS (true vertical depth sub sea)
                "true_vertical_depth_unit": "m",
                "measured_depth": 1984.5, # If mention sampling depth m MD (measured depth)
                "measured_depth_unit": "m",
                "pressure_at_lab": 400.0,
                "pressure_at_lab_unit": "bara",
                "temperature_at_lab": 80.0,
                "temperature_at_lab_unit": "C",
                "pressure_when_sampled": 100,
                "pressure_when_sampled_unit": "bara",
                "temperature_when_sampled": 23,
                "temperature_when_sampled_unit": "C",
                "top_perforation_depth": 2000,
                "top_perforation_depth_unit": "m",
                "bottom_perforation_depth": 3000,
                "bottom_perforation_depth_unit": "m",
                "transfer_pressure": 450.0,
                "transfer_pressure_unit": "bara",
                "transfer_temperature": 80.0,
                "transfer_temperature_unit": "C",
                "drawdown_pressure": 100,
                "drawdown_pressure_unit": "bara",
                "flashed_oil_contamination": 2.0, # If mention Mud filtrate contamination in STO
                "flashed_oil_contamination": "mass%", # If the unit mentioned is Wt%
                "fluid_type": "Oil",
                "mud_base": "Oil", # put "Oil" if mention OBM, or "Water" if mention WBM
                //... # Other parameters
              },
              {
                "Sample Type": "REC", # If mention Recombined
                # Same as above
                //...
              }
            ]
          },
          "Other_information": {
            "remarks": "Additional details can be provided here."
          }
        }

   - 1.4 If the page consists of a table:
     - 1.4.1 If the page consists of an Information table or descriptions:
       - Extract physical parameters and values into a structured JSON format.
       - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
         - If found, set "sample_name" accordingly.
         - If not found, set "sample_name" to null.

       Important data:

       - If you find "density of stock tank oil", put into key "flashed_oil_density", then fill "flashed_oil_density_unit"
       - If you see gas oil ratio (GOR), put into key "recombined_fluid_gor", then fill "recombined_fluid_gor_unit

       Getting 'flashed_oil_temperature':
       If you see the following

        ```
        Separation conditions:    From:  80.0 °C and   400 bara
                                  To:    25.5 °C and   atm. pressure
        ```

       In this case, "flashed_oil_temperature": 25.5, "flashed_oil_temperature_unit": "C"
       Pick the number after "To:   " before "and atm.pressure"

       Example JSON:
        {
            "page": "...",
            "sample_name": "...",
            "parameter1": "...",
            "parameter1_unit": "...",
            "parameter2": "...",
            "parameter2_unit": "...",
            "parameter3": "...",
            "parameter4_unit": "...",

            # Important data
            "flashed_oil_density": ...,
            "flashed_oil_density_unit": "...",
            "flashed_oil_temperature": 20.5,
            "flashed_oil_temperature_unit": "C",
            "recombined_fluid_gor": ...,
            "recombined_fluid_gor_unit": "...",
            et cetera ...
        }

     - 1.4.2 If the page contains a Composition table :

        - Dynamically identify each fluid-type group by reading the top header row(s), matching these synonyms:
          - flashed_oil ↔ "Stock tank oil", "Flashed Liquid", "Stock tank oil"
          - flashed_gas ↔ "Stock tank gas", "Flashed gas"
          - recombined_fluid ↔ "Monophasic fluid", "Reservoir fluid"
        - Under each fluid-type header, locate its two sub-columns: one labeled "Mole %" → molar_amount, the other "Weight %" → mass_amount.
        - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
            - If found, set "sample_name" accordingly.
            - Sample name is just like ID consist of letter and number, without C10+ or C36+
            - If not found, set "sample_name" to null.
        - If the table title says "uncorrected" or "corrected", set "uncorrected": true/false.
        - Identify "last_component" from the final row label (e.g. "C36+"), include units on every top-level number, and fill only the keys in the prescribed schema—do not invent new ones.

        IMPORTANT!!!
        - In case there is blank cell in the table (value not reported)
        - If you do not find BOTH molar amount and mass amount of a component, do not extract it into JSON

        Example table with blanks:

      |Component         | Stock tank gas    | Stock tank oil    |  Reservoir fluid   | Mol weight  |
      |Mole%             | Weight% | Mole%   | Weight% | Mole%   |  Mole%   | Weight% |             |
      |Nitrogen          | 0.157   | 0.183   |         |         |  0.084   | 0.024   | 28.02       |
      |Carbon Dioxide    | 6.582   | 12.048  |         |         |  3.509   | 1.555   | 44.01       |
      |Hydrogen Sulphide | 0       | 0       |         |         |  0       | 0       | 34.08       |
      |Methane           | 73.927  | 49.324  | 0.115   | 0.01    |  39.466  | 6.376   | 16.04       |
      |Ethane            | 8.997   | 11.251  | 0.222   | 0.036   |  4.9     | 1.484   | 30.07       |


        Result JSON (referring to the table):

{
    "page": ...,
    "sample_name": "A001", # The name of sample
    "uncorrected": true, # false or null
    "last_component": "C10+",
    "flashed_oil_mw": 151.9, # oil molecular weight or MW
    "flashed_oil_density": 0.777, # oil density at stock-tank condition 15 degC
    "flashed_oil_density_unit": "g/cm3", # g/cm3, kg/m3
    "flashed_oil_temperature": 60.0, # temperature at flash
    "flashed_oil_temperature_unit": "F", # F, C, K, R
    "flashed_oil_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide molar_amount and mass_amount is null, so no need to extract
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 0.115,
                "mass_amount": 0.01
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 0.222,
                "mass_amount": 0.036
            }
        ]
    },
    "flashed_gas_mw": 23.4, # gas molecular weight or MW
    "flashed_gas_specific_gravity": 0.808, # also called relative density or ideal
    "flashed_gas_specific_gravity_unit": "SG", # if unit not mentioned then most likely SG
    "flashed_gas_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide has molar_amount and mass_amount, so extract it
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.157,
                "mass_amount": 0.183
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 6.582,
                "mass_amount": 12.048
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 73.997,
                "mass_amount": 49.324
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 8.997,
                "mass_amount": 11.251
            }
        ]
    },

    # Recombined is sometimes called as Reservoir Fluid or Monophasic
    "recombined_fluid_mw": 30.2, # reservoir fluid MW
    "recombined_fluid_gor": 12200.8, # Gas oil ratio or gas liquid ratio (GLR) or Rs
    "recombined_fluid_gor_unit": "scf/STB", # scf/STB, Sm3/Sm3, Sm3/m3, scf/bbl
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.084,
                "mass_amount": 0.024
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 3.509,
                "mass_amount": 1.555
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 39.466,
                "mass_amount": 6.376
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 4.9,
                "mass_amount": 1.484
            }
        ]
    }
}
     - 1.4.3 If the page contains a Constant Composition Expansion (CCE) or Constant Mass Expansion (CME) table:
       - Identify measurement units for parameters.
       - Always put as "CCE" not "CME"
       - Extract data and structure into the "experiments" JSON key.
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Stages 'order' key must always start from 0
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column name | Key
       --------|-----------
       Relative Volume (column) | relative_total_volume
       Relative Volumes (Vs/Vs,BP) | relative_total_volume
       RLD (column) | relative_oil_volume
       % Liq/Sat (Vliq/Vsat) | relative_oil_volume

       Note: relative_oil_volume always null BEFORE the saturation_pressure=True

       - You must stick to the following units

        Variable | Unit
        --------|-----------
        relative_total_volume_unit | Vtot/Vsat

       Example JSON:


{
    "page" : ...,
    "sample_name": ...,
    "experiments": [
        {
            "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
            "sample_name": 1184,
            "name": "Constant Composition Expansion",
            "type": "CCE",
            "temperature": 106.0,
            "temperature_unit": "C",
            "pressure_unit": "psia",
            "relative_oil_volume_unit": "Vo/Vsat (%)",
            "single_phase_density_unit": "g/cm3",
            "relative_total_volume_unit": "Vtot/Vsat",
            "stages": [
                {
                    "pressure": 9000.0,
                    "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                    "relative_oil_volume": null,
                    "relative_total_volume": 0.79,
                    "single_phase_density": 0.422,
                    "z_factor": 1.407
                },
                // Other stages ...
                {
                    "pressure": 3011.0,
                    "is_saturation_pressure": false,
                    "relative_oil_volume": 14.37,
                    "relative_total_volume": 1.315,
                    "single_phase_density": null,
                    "z_factor": null
                }
            ]
        }
    ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) COMPOSITION:
       - You put the page in this category if you see keywords "Constant Volume Depletion" and chemical component
       - Please Read the WHOLE COLUMNS of TABLE
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true

       - If the columns like this: 2600 psia, 2010 psia, 1000 psia, Residual Oil
          - Put the pressures columns inside Liberated Gas schema
          - Put the Residual Oil column inside Final Stage Oil schema

       - Liberated Gas structure:
          - Put each of the "pressure" inside "stages" key
          - Put ALL the "components" and its "molar_amount" inside each "pressure" which it refers to

        Structure:

{
  "sample_name": null,
  "experiments": [
    {
      "sample_name": null,
      "continued": false,
      "saturation_pressure_type": "Dewpoint",
      "name": "Constant Volume Depletion",
      "type": "CVD",
      "temperature": 106.0,
      "temperature_unit": "C",

      # First type
      "liberated_gas_compositions": {
        "components": [
          {
            "input_name": "CO2",
            "mw": 44.01
          },
          {
            "input_name": "Other",
            "mw": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0
          }
        ],
        "stages": [
          {
            "pressure": 2600,
            "composition": [
              {
                "component_name": "CO2",
                "molar_amount": 0.305
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "C30+",
                "molar_amount": 0.087
              }
            ]
          },
          {
            "pressure": 1300,
            "composition": [
              {
                "component_name": "2M-C6",
                "molar_amount": 0.123
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "Toluene",
                "molar_amount": 0.037
              }
            ]
          }
        ]
      },

       - Residual Oil structure:
          - Put ALL the "components" and its "molar_amount" inside "composition" key
          - Get the "final_stage_oil_mw" from the last row of table if mentioning "MW"

        Structure:

      # Second type
      "final_stage_oil_mw": 100.14,
      "final_stage_oil_density": 630.0,
      "final_stage_oil_density_unit": "kg/m3",
      "stock_tank_oil_density": 630.0,
      "stock_tank_oil_density_unit": "kg/m3",
      "final_stage_oil_composition": {
        "components": [
          {
            "input_name": "CO2",
            "mw": null,
            "molar_amount": 0.213,
            "mass_amount": null
          },
          {
            "input_name": "Other",
            "mw": null,
            "molar_amount": null,
            "mass_amount": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0,
            "molar_amount": 0.553,
            "mass_amount": null
          }
        ]
      }
    }
  ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) PROPERTIES table:
       - You put into this category If you see Pressure as row and Physical Properties as column (No composition)
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column Name | Key
       --------|-----------
       Total Recovery (mole %) | cumulative_moles_removed
       Liq. Density (g/cc) | oil_density

        Example JSON:

      {
          "sample_name": ..., # Put sample ID here
          "experiments": [
              {
                  "sample_name": ...,
                  "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                  "name": "Constant Volume Depletion",
                  "type": "CVD",
                  "temperature": 106.0,
                  "temperature_unit": "C",
                  "pressure_unit": "psia",
                  "oil_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_viscosity_unit": "...", # "cP"
                  "relative_oil_volume_unit": "...", # "%"
                  "incremental_moles_removed_unit": "...", # "%"
                  "cumulative_moles_removed_unit": "...", # "%"

                  # Properties data
                  "stages": [
                      # Fill here if the table displays properties as row and pressure as column, or otherwise
                      {
                          "pressure": 4661.0,
                          "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                          "relative_oil_volume": 0.0,
                          "incremental_moles_removed": null, # "%"
                          "cumulative_moles_removed": 0.0,
                          "oil_density": null,
                          "gas_z_factor": 0.922,
                          "gas_specific_gravity": null,
                          "gas_density": 0.339,
                          "gas_viscosity": 0.042,
                          "gas_plus_fraction_mw": null,
                      },
                      {
                          // Other stages ...
                      }
                      {
                          "pressure": 1300.0,
                          "is_saturation_pressure": false,
                          "relative_oil_volume": 13.18,
                          "incremental_moles_removed": null,
                          "cumulative_moles_removed": 67.06,
                          "oil_density": 0.63,
                          "gas_z_factor": 0.874,
                          "gas_specific_gravity": null,
                          "gas_density": 0.075,
                          "gas_viscosity": 0.015,
                          "gas_plus_fraction_mw": null,
                      }
                  ]
              }
          ]
      }

     - 1.4.5 If the page contains a Multi-Stage Separator (MSS) or Three Stage Separator table:
       - If you see "Two Stage", "Three Stage", "Four Stage" Separator, it is MSS. But, "Single Stage" is NOT MSS
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Stock tank oil data: If the title mention stock tank or tank oil
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If you see "Pressure Atm. bara", it means "pressure": 1 (atmospheric pressure means 1 bara)
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON

        Exception:
       - If you find page with title "Bo and GOR from Three Stage Separator test during depletion using the results from Differential Liberation ...", DO NOT extract the data.

        Example JSON:
{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                    "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                    "name": "Multi-stage Separator",
                    "type": "MSS",
                    "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "Dodecanes Plus",
                            "mw": null
                        }
                    ],
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.7579
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0024
                                }
                            ]
                        },
                        {
                            "stage_number": 1,
                            "composition": [
                                {
                                    "stage_number": 1,
                                    "component_name": "C1",
                                    "molar_amount": 0.6791
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 1,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0022
                                }
                            ]
                        },
                        {
                            "stage_number": 2,
                            "composition": [
                                {
                                    "stage_number": 2,
                                    "component_name": "C1",
                                    "molar_amount": 0.1999
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 2,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.019
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Stock tank oil
                "stock_tank_oil_molecular_weight": 145.78,
                "stock_tank_oil_density": 0.7843,
                "stock_tank_oil_density_unit": "g/cm3",
                "stock_tank_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.013,
                            "mass_amount": 0.0107
                        }
                    ]
                },
                "pressure_unit": "psia",
                "temperature_unit": "F",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",

                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 3724.0,
                        "is_saturation_pressure": true,
                        "temperature": 230.0,
                        "gor": 1802.83,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.1783,
                        "oil_density": 0.5016,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "temperature": 60.0,
                        "gor": 0.0,
                        "liberated_gas": 1802.83,
                        "oil_fvf": 1.0,
                        "oil_density": 0.7843,
                        "gas_z_factor": 0.9892,
                        "gas_specific_gravity": 1.316,
                        "gas_density": null,
                        "gas_viscosity": null
                    }
                ]
            }
    ]
}


     - 1.4.6 If the page contains a Differential Liberation (DLE) or Differential Vaporization (DV) table:
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Residual oil data: If mention residual oil or final stage
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity
       gas-oil ratio solution** | gor

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON
       ** in "Gas-Oil Ratio" column if you find "solution" and "liberated", take the "solution" and put to "gor" key in JSON

        Example JSON:

{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                "name": "Differential Liberation Expansion",
                "type": "DLE",
                "temperature": 229.7,
                "temperature_unit": "F",
                "dle_experiment_type": "Standard DLE Experiment",

                # // First part, Liberated gas
                "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "N2",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "C7+",
                            "mw": 114.01
                        }
                    ],
                    # Fill here if the table displays component as row and pressure as column, or otherwise
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.6859 # Composition in mole percent
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0085
                                }
                            ]
                        },
                        {
                            // Other stages ...
                        },
                        {
                            "stage_number": 9,
                            "composition": [
                                {
                                    "stage_number": 9,
                                    "component_name": "C1",
                                    "molar_amount": 0.1309
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 9,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0629
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Residual oil
                "evolved_gas_specific_gravity": null,
                "evolved_gas_composition_id": null,
                "evolved_gas_composition": null,
                "average_residual_oil_mw": 179.43,
                "average_residual_oil_density": 0.8128,
                "average_residual_oil_density_unit": "g/cm3",
                "residual_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.019,
                            "mass_amount": 0.0127
                        }
                    ]
                },
                "pressure_unit": "psia",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",
                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 8513.0,
                        "is_saturation_pressure": true,
                        "gor": 2847.67,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.5407,
                        "oil_density": 0.5714,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "gor": 0.0,
                        "liberated_gas": 2847.67,
                        "oil_fvf": 1.0975,
                        "oil_density": 0.7471,
                        "gas_z_factor": 0.9887,
                        "gas_specific_gravity": 2.1686,
                        "gas_density": null,
                        "gas_viscosity": 0.00925
                    }
                ]
            }
    ]
}

     - 1.4.7 If the page contains a Viscosity experiment (VISCO) table:
       - Identify measurement units for parameters.
       - Viscosity table has pressure as y-axis and viscosities as x-axis
       - Extract viscosity data and structure into "experiments".
       - Never come up with new structures or keys, just fill up in the specified JSON schema.

        Example JSON:

{
    "page": ...,
    "sample_name": ...,
    "experiments": [
        {
            "name": "Oil Viscosity",
            "type": "VISCO",
            "temperature": 229.7,
            "temperature_unit": "F",
            "pressure_unit": "psia",
            "oil_viscosity_unit": "cP",
            "gas_viscosity_unit": "cP",
            "stages": [
                {
                    "visco_id": 1018,
                    "pressure": 5413.0,
                    "oil_viscosity": 0.088,
                    "gas_viscosity": null
                },
                {
                    // Other stages ...
                },
                {
                    "visco_id": 1018,
                    "pressure": 13.0,
                    "oil_viscosity": 0.749,
                    "gas_viscosity": 0.00925
                }
            ]
        }
    ]
}

2. If any summary data or descriptive information is found:
   - Include it as key "Other_information", outside the "experiments" key in JSON.

   Example JSON:
   {
       "solution_gas_oil_ratio": 100,
       "separator_volume_factor": 300,
       "solution_gas_oil_ratio_unit": "scf/stb",
       "separator_volume_factor_unit": "bbl",
       ......
   }

3. Finally, you must stick to the following units

Unit shown | Unit in JSON
--------|-----------
g/cc | g/cm3
mole% | %
Vol/Vol | Sm3/Sm3
scf/sep bbl | scf/bbl
kg/Sm3 | kg/m3
psi | psia
Air=1 | SG

4. If you find Figure in the page, DO NOT extract any data from it. Just extract the title into json.

  {
    "figure_title": "Plot of dewpoint pressure"
  }

5. Dealing with Paraffinic-Naphtenes-Aromatics (PNA) composition

In some cases, PNA can be reported in compositional table, DLE liberated gas, or MSS liberated gas.

For example:

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| n-Hexane          | 0.086   | 0.351     | 86.2  |
| iso-Paraffins     | 0.154   | 0.627     | 86.2  |
| Naphthenes        | 0.033   | 0.109     | 70.1  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |
| n-Heptane         | 0.014   | 0.067     | 100.2 |
| iso-Paraffins     | 0.038   | 0.181     | 100.2 |
| Naphthenes        | 0.116   | 0.476     | 86.6  |
| Aromatics         | 0.030   | 0.112     | 78.1  |

You see for every C6 total and C7 total, there are iso-Paraffins (P), Naphthenes (N), and Aromatics (A).

Remove these PNA, so you just have C6 total and C7 total.

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |

From here, you just extract into corresponding JSON schema as defined in instructions 1 until 4
"
            }
          ]
        },
        {
          "role":"model",
          "parts":[
            {
              "text":"{
    "page": "37 of 119",
    "sample_name": "WFL-02018",
    "uncorrected": null,
    "last_component": "C36+",
    "flashed_oil_mw": 333.8,
    "flashed_oil_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 0.083,
                "mass_amount": 0.004
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 0.133,
                "mass_amount": 0.012
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 0.023,
                "mass_amount": 0.003
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 0.006,
                "mass_amount": 0.001
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 0.011,
                "mass_amount": 0.002
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.005,
                "mass_amount": 0.001
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 0.005,
                "mass_amount": 0.001
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 0.009,
                "mass_amount": 0.002
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 0.085,
                "mass_amount": 0.022
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 0.174,
                "mass_amount": 0.049
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 0.455,
                "mass_amount": 0.15
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 1.062,
                "mass_amount": 0.395
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 2.217,
                "mass_amount": 0.89
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 2.822,
                "mass_amount": 1.243
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 3.757,
                "mass_amount": 1.812
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 4.537,
                "mass_amount": 2.379
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 5.052,
                "mass_amount": 2.876
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 5.506,
                "mass_amount": 3.398
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 5.328,
                "mass_amount": 3.544
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 5.032,
                "mass_amount": 3.573
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 4.806,
                "mass_amount": 3.614
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 4.494,
                "mass_amount": 3.541
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 4.122,
                "mass_amount": 3.396
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 3.772,
                "mass_amount": 3.289
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 3.438,
                "mass_amount": 3.09
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 3.155,
                "mass_amount": 2.949
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 2.857,
                "mass_amount": 2.773
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 2.576,
                "mass_amount": 2.601
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 2.419,
                "mass_amount": 2.529
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 2.25,
                "mass_amount": 2.427
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 2.248,
                "mass_amount": 2.505
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 2.159,
                "mass_amount": 2.471
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 2.014,
                "mass_amount": 2.377
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 1.844,
                "mass_amount": 2.232
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 1.633,
                "mass_amount": 2.031
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 1.449,
                "mass_amount": 1.849
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 1.333,
                "mass_amount": 1.745
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 1.253,
                "mass_amount": 1.671
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 15.876,
                "mass_amount": 32.553
            }
        ]
    },
    "flashed_gas_mw": 17.7,
    "flashed_gas_specific_gravity": 0.611,
    "flashed_gas_specific_gravity_unit": "SG",
    "flashed_gas_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": 0.194,
                "mass_amount": 0.307
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": 0.202,
                "mass_amount": 0.502
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 90.039,
                "mass_amount": 81.627
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 8.904,
                "mass_amount": 15.129
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 0.35,
                "mass_amount": 0.872
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 0.042,
                "mass_amount": 0.138
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 0.051,
                "mass_amount": 0.168
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.024,
                "mass_amount": 0.097
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 0.008,
                "mass_amount": 0.033
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 0.011,
                "mass_amount": 0.046
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 0.041,
                "mass_amount": 0.199
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 0.036,
                "mass_amount": 0.189
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 0.033,
                "mass_amount": 0.207
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 0.03,
                "mass_amount": 0.206
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 0.025,
                "mass_amount": 0.193
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 0.009,
                "mass_amount": 0.076
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 0.001,
                "mass_amount": 0.012
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            }
        ]
    },
    "recombined_fluid_mw": 190.1,
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": 0.088,
                "mass_amount": 0.013
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": 0.092,
                "mass_amount": 0.021
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 40.965,
                "mass_amount": 3.456
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 4.119,
                "mass_amount": 0.651
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 0.171,
                "mass_amount": 0.04
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 0.022,
                "mass_amount": 0.007
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 0.03,
                "mass_amount": 0.009
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.013,
                "mass_amount": 0.005
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 0.006,
                "mass_amount": 0.002
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 0.01,
                "mass_amount": 0.004
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 0.065,
                "mass_amount": 0.029
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 0.111,
                "mass_amount": 0.055
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 0.264,
                "mass_amount": 0.152
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 0.593,
                "mass_amount": 0.387
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 1.221,
                "mass_amount": 0.861
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 1.544,
                "mass_amount": 1.194
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 2.05,
                "mass_amount": 1.736
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 2.475,
                "mass_amount": 2.278
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 2.756,
                "mass_amount": 2.754
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 3.004,
                "mass_amount": 3.254
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 2.907,
                "mass_amount": 3.394
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 2.745,
                "mass_amount": 3.422
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 2.622,
                "mass_amount": 3.461
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 2.452,
                "mass_amount": 3.391
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 2.249,
                "mass_amount": 3.252
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 2.058,
                "mass_amount": 3.15
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 1.875,
                "mass_amount": 2.959
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 1.721,
                "mass_amount": 2.824
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 1.558,
                "mass_amount": 2.656
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 1.405,
                "mass_amount": 2.491
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 1.319,
                "mass_amount": 2.422
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 1.228,
                "mass_amount": 2.324
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 1.226,
                "mass_amount": 2.399
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 1.178,
                "mass_amount": 2.366
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 1.099,
                "mass_amount": 2.276
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 1.006,
                "mass_amount": 2.138
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 0.891,
                "mass_amount": 1.945
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 0.79,
                "mass_amount": 1.771
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 0.727,
                "mass_amount": 1.671
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 0.684,
                "mass_amount": 1.6
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 8.661,
                "mass_amount": 31.176
            }
        ]
    }
}"
            }
          ]
        }
    ]}
{"contents":[
        {
          "role":"user",
          "parts":[
            {
              "fileData":{
                "mimeType":"image/jpeg",
                "fileUri":"https://github.com/yohanesnuwara/sft-finetune-gemini/blob/main/images/RS-113242%20Preliminary%20Results_v4%20-%20%C3%98st%20Frigg_page-0038.jpg"
              }
            },
            {
              "text":"OCR the following page into complete JSON.

Your task is to parse and extract as many infomation as possible from the page and put into JSON like specified

Never come up with new structures or keys, just fill up in the specified JSON schema.

Page can be either full texts, full table, or texts with table.

1. Identify the type of page:
   - 1.1 If the page consists only of texts:

      Parse sentences into JSON and do not give full sentence or summary

      Example sentence:

      "Two sets of sample (CL01 & CL02) is transferred at 15 deg C and pressure 1 atm" (page A.1)

      JSON response

      {
          "page": "A.1",
          "conditioning": {
              "samples": ["CL01", "CL02"],
              "transfer_temp": 15,
              "transfer_temp_unit": "C",
              "transfer_pressure": 1,
              "transfer_pressure_unit": "atm"
              // ...
          }
      }

      Try to find these parameters inferred from "flash" keyword
      {
        "sep_pressure": ...,
        "sep_pressure_unit": ...,
        "sep_temperature": ...,
        "sep_temperature_unit": ...,
      }



   - 1.2 If the page consists of table of contents
     - Put each table title from the list in key "table_title"
     - Identify the "keyword" in the table title, into these categories
        - If mention composition then "composition"
        - If mention constant composition expansion or constant mass expansion then "CCE"
        - If mention constant volume depletion then "CVD"
        - If mention differential liberation expansion then "DLE"
        - If mention multistage separator then "MSS"
        - If mention viscosity then "VISCO"
     - Identify the "sample_name" from keywords like Cylinder, Sample, Chamber number, or if it is sample pair
     - Identify the "page_number"

    JSON response:

    {
        "page": "....",
        "list_content": [
            {
                "title": "...",
                "keyword": "composition",
                "sample_name": null,
                "page_number": 1
            },
            {
                "title": "...",
                "keyword": "CCE"
                "sample_name": "A01",
                "page_number": 2
            },
            {
                "title": "...",
                "keyword": "CVD",
                "sample_name": "A01+A02",
                "page_number": 3
            }
        ]
    }

   - 1.3 If the page consists of texts with table:
     - 1.3.1 If the page displays "sample inventory" or "sample summary" table:
       - This type of page can be recognized by structure of the table. If the table has Sample ID/name or Bottle no in the y-axis, and properties in the x-axis
       - Properties reported in this summary table such as sampling depth, GOR, density, molecular weight, reservoir temperature, reservoir pressure (Pres), viscosity
       - Do not confuse this table with experiment table
       - Extract data into the "sample_inventory" JSON schema.
       - Extract other relevant information into "Other_information".
       - If you do not find any of the keys, DO NOT create the key
       - Identify title of each table and decide the "type"
            - If mention MDT oil, then "type": "OFT"
            - If mention MDT water, then "type": "WATER"

       Example JSON:
        {
          "page": "...",
          "sample_inventory": {
            "data": [
              {
                "sample_name": "1.01",
                "type": "OFT", # put "OFT" if mention MDT oil, "WATER" if mention MDT water
                "sampling_date": "2023-04-26", # If mention Transfer Date
                "well_id": "23/1", # Well name
                "basin_id": null,
                "sub_basin_id": null,
                "field_id": "Volve", # Field name
                "field_segment_id": null,
                "formation_id": "Realgrunnen", # Formation name
                "formation_zone_id": null,
                "reservoir_pressure": 182.0,
                "reservoir_pressure_unit": "bara",
                "reservoir_temperature": 69.8,
                "reservoir_temperature_unit": "C",
                "true_vertical_depth": 1929.0, # If mention sampling depth m TVDSS (true vertical depth sub sea)
                "true_vertical_depth_unit": "m",
                "measured_depth": 1984.5, # If mention sampling depth m MD (measured depth)
                "measured_depth_unit": "m",
                "pressure_at_lab": 400.0,
                "pressure_at_lab_unit": "bara",
                "temperature_at_lab": 80.0,
                "temperature_at_lab_unit": "C",
                "pressure_when_sampled": 100,
                "pressure_when_sampled_unit": "bara",
                "temperature_when_sampled": 23,
                "temperature_when_sampled_unit": "C",
                "top_perforation_depth": 2000,
                "top_perforation_depth_unit": "m",
                "bottom_perforation_depth": 3000,
                "bottom_perforation_depth_unit": "m",
                "transfer_pressure": 450.0,
                "transfer_pressure_unit": "bara",
                "transfer_temperature": 80.0,
                "transfer_temperature_unit": "C",
                "drawdown_pressure": 100,
                "drawdown_pressure_unit": "bara",
                "flashed_oil_contamination": 2.0, # If mention Mud filtrate contamination in STO
                "flashed_oil_contamination": "mass%", # If the unit mentioned is Wt%
                "fluid_type": "Oil",
                "mud_base": "Oil", # put "Oil" if mention OBM, or "Water" if mention WBM
                //... # Other parameters
              },
              {
                "Sample Type": "REC", # If mention Recombined
                # Same as above
                //...
              }
            ]
          },
          "Other_information": {
            "remarks": "Additional details can be provided here."
          }
        }

   - 1.4 If the page consists of a table:
     - 1.4.1 If the page consists of an Information table or descriptions:
       - Extract physical parameters and values into a structured JSON format.
       - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
         - If found, set "sample_name" accordingly.
         - If not found, set "sample_name" to null.

       Important data:

       - If you find "density of stock tank oil", put into key "flashed_oil_density", then fill "flashed_oil_density_unit"
       - If you see gas oil ratio (GOR), put into key "recombined_fluid_gor", then fill "recombined_fluid_gor_unit

       Getting 'flashed_oil_temperature':
       If you see the following

        ```
        Separation conditions:    From:  80.0 °C and   400 bara
                                  To:    25.5 °C and   atm. pressure
        ```

       In this case, "flashed_oil_temperature": 25.5, "flashed_oil_temperature_unit": "C"
       Pick the number after "To:   " before "and atm.pressure"

       Example JSON:
        {
            "page": "...",
            "sample_name": "...",
            "parameter1": "...",
            "parameter1_unit": "...",
            "parameter2": "...",
            "parameter2_unit": "...",
            "parameter3": "...",
            "parameter4_unit": "...",

            # Important data
            "flashed_oil_density": ...,
            "flashed_oil_density_unit": "...",
            "flashed_oil_temperature": 20.5,
            "flashed_oil_temperature_unit": "C",
            "recombined_fluid_gor": ...,
            "recombined_fluid_gor_unit": "...",
            et cetera ...
        }

     - 1.4.2 If the page contains a Composition table :

        - Dynamically identify each fluid-type group by reading the top header row(s), matching these synonyms:
          - flashed_oil ↔ "Stock tank oil", "Flashed Liquid", "Stock tank oil"
          - flashed_gas ↔ "Stock tank gas", "Flashed gas"
          - recombined_fluid ↔ "Monophasic fluid", "Reservoir fluid"
        - Under each fluid-type header, locate its two sub-columns: one labeled "Mole %" → molar_amount, the other "Weight %" → mass_amount.
        - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
            - If found, set "sample_name" accordingly.
            - Sample name is just like ID consist of letter and number, without C10+ or C36+
            - If not found, set "sample_name" to null.
        - If the table title says "uncorrected" or "corrected", set "uncorrected": true/false.
        - Identify "last_component" from the final row label (e.g. "C36+"), include units on every top-level number, and fill only the keys in the prescribed schema—do not invent new ones.

        IMPORTANT!!!
        - In case there is blank cell in the table (value not reported)
        - If you do not find BOTH molar amount and mass amount of a component, do not extract it into JSON

        Example table with blanks:

      |Component         | Stock tank gas    | Stock tank oil    |  Reservoir fluid   | Mol weight  |
      |Mole%             | Weight% | Mole%   | Weight% | Mole%   |  Mole%   | Weight% |             |
      |Nitrogen          | 0.157   | 0.183   |         |         |  0.084   | 0.024   | 28.02       |
      |Carbon Dioxide    | 6.582   | 12.048  |         |         |  3.509   | 1.555   | 44.01       |
      |Hydrogen Sulphide | 0       | 0       |         |         |  0       | 0       | 34.08       |
      |Methane           | 73.927  | 49.324  | 0.115   | 0.01    |  39.466  | 6.376   | 16.04       |
      |Ethane            | 8.997   | 11.251  | 0.222   | 0.036   |  4.9     | 1.484   | 30.07       |


        Result JSON (referring to the table):

{
    "page": ...,
    "sample_name": "A001", # The name of sample
    "uncorrected": true, # false or null
    "last_component": "C10+",
    "flashed_oil_mw": 151.9, # oil molecular weight or MW
    "flashed_oil_density": 0.777, # oil density at stock-tank condition 15 degC
    "flashed_oil_density_unit": "g/cm3", # g/cm3, kg/m3
    "flashed_oil_temperature": 60.0, # temperature at flash
    "flashed_oil_temperature_unit": "F", # F, C, K, R
    "flashed_oil_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide molar_amount and mass_amount is null, so no need to extract
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 0.115,
                "mass_amount": 0.01
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 0.222,
                "mass_amount": 0.036
            }
        ]
    },
    "flashed_gas_mw": 23.4, # gas molecular weight or MW
    "flashed_gas_specific_gravity": 0.808, # also called relative density or ideal
    "flashed_gas_specific_gravity_unit": "SG", # if unit not mentioned then most likely SG
    "flashed_gas_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide has molar_amount and mass_amount, so extract it
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.157,
                "mass_amount": 0.183
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 6.582,
                "mass_amount": 12.048
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 73.997,
                "mass_amount": 49.324
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 8.997,
                "mass_amount": 11.251
            }
        ]
    },

    # Recombined is sometimes called as Reservoir Fluid or Monophasic
    "recombined_fluid_mw": 30.2, # reservoir fluid MW
    "recombined_fluid_gor": 12200.8, # Gas oil ratio or gas liquid ratio (GLR) or Rs
    "recombined_fluid_gor_unit": "scf/STB", # scf/STB, Sm3/Sm3, Sm3/m3, scf/bbl
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.084,
                "mass_amount": 0.024
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 3.509,
                "mass_amount": 1.555
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 39.466,
                "mass_amount": 6.376
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 4.9,
                "mass_amount": 1.484
            }
        ]
    }
}
     - 1.4.3 If the page contains a Constant Composition Expansion (CCE) or Constant Mass Expansion (CME) table:
       - Identify measurement units for parameters.
       - Always put as "CCE" not "CME"
       - Extract data and structure into the "experiments" JSON key.
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Stages 'order' key must always start from 0
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column name | Key
       --------|-----------
       Relative Volume (column) | relative_total_volume
       Relative Volumes (Vs/Vs,BP) | relative_total_volume
       RLD (column) | relative_oil_volume
       % Liq/Sat (Vliq/Vsat) | relative_oil_volume

       Note: relative_oil_volume always null BEFORE the saturation_pressure=True

       - You must stick to the following units

        Variable | Unit
        --------|-----------
        relative_total_volume_unit | Vtot/Vsat

       Example JSON:


{
    "page" : ...,
    "sample_name": ...,
    "experiments": [
        {
            "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
            "sample_name": 1184,
            "name": "Constant Composition Expansion",
            "type": "CCE",
            "temperature": 106.0,
            "temperature_unit": "C",
            "pressure_unit": "psia",
            "relative_oil_volume_unit": "Vo/Vsat (%)",
            "single_phase_density_unit": "g/cm3",
            "relative_total_volume_unit": "Vtot/Vsat",
            "stages": [
                {
                    "pressure": 9000.0,
                    "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                    "relative_oil_volume": null,
                    "relative_total_volume": 0.79,
                    "single_phase_density": 0.422,
                    "z_factor": 1.407
                },
                // Other stages ...
                {
                    "pressure": 3011.0,
                    "is_saturation_pressure": false,
                    "relative_oil_volume": 14.37,
                    "relative_total_volume": 1.315,
                    "single_phase_density": null,
                    "z_factor": null
                }
            ]
        }
    ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) COMPOSITION:
       - You put the page in this category if you see keywords "Constant Volume Depletion" and chemical component
       - Please Read the WHOLE COLUMNS of TABLE
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true

       - If the columns like this: 2600 psia, 2010 psia, 1000 psia, Residual Oil
          - Put the pressures columns inside Liberated Gas schema
          - Put the Residual Oil column inside Final Stage Oil schema

       - Liberated Gas structure:
          - Put each of the "pressure" inside "stages" key
          - Put ALL the "components" and its "molar_amount" inside each "pressure" which it refers to

        Structure:

{
  "sample_name": null,
  "experiments": [
    {
      "sample_name": null,
      "continued": false,
      "saturation_pressure_type": "Dewpoint",
      "name": "Constant Volume Depletion",
      "type": "CVD",
      "temperature": 106.0,
      "temperature_unit": "C",

      # First type
      "liberated_gas_compositions": {
        "components": [
          {
            "input_name": "CO2",
            "mw": 44.01
          },
          {
            "input_name": "Other",
            "mw": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0
          }
        ],
        "stages": [
          {
            "pressure": 2600,
            "composition": [
              {
                "component_name": "CO2",
                "molar_amount": 0.305
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "C30+",
                "molar_amount": 0.087
              }
            ]
          },
          {
            "pressure": 1300,
            "composition": [
              {
                "component_name": "2M-C6",
                "molar_amount": 0.123
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "Toluene",
                "molar_amount": 0.037
              }
            ]
          }
        ]
      },

       - Residual Oil structure:
          - Put ALL the "components" and its "molar_amount" inside "composition" key
          - Get the "final_stage_oil_mw" from the last row of table if mentioning "MW"

        Structure:

      # Second type
      "final_stage_oil_mw": 100.14,
      "final_stage_oil_density": 630.0,
      "final_stage_oil_density_unit": "kg/m3",
      "stock_tank_oil_density": 630.0,
      "stock_tank_oil_density_unit": "kg/m3",
      "final_stage_oil_composition": {
        "components": [
          {
            "input_name": "CO2",
            "mw": null,
            "molar_amount": 0.213,
            "mass_amount": null
          },
          {
            "input_name": "Other",
            "mw": null,
            "molar_amount": null,
            "mass_amount": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0,
            "molar_amount": 0.553,
            "mass_amount": null
          }
        ]
      }
    }
  ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) PROPERTIES table:
       - You put into this category If you see Pressure as row and Physical Properties as column (No composition)
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column Name | Key
       --------|-----------
       Total Recovery (mole %) | cumulative_moles_removed
       Liq. Density (g/cc) | oil_density

        Example JSON:

      {
          "sample_name": ..., # Put sample ID here
          "experiments": [
              {
                  "sample_name": ...,
                  "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                  "name": "Constant Volume Depletion",
                  "type": "CVD",
                  "temperature": 106.0,
                  "temperature_unit": "C",
                  "pressure_unit": "psia",
                  "oil_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_viscosity_unit": "...", # "cP"
                  "relative_oil_volume_unit": "...", # "%"
                  "incremental_moles_removed_unit": "...", # "%"
                  "cumulative_moles_removed_unit": "...", # "%"

                  # Properties data
                  "stages": [
                      # Fill here if the table displays properties as row and pressure as column, or otherwise
                      {
                          "pressure": 4661.0,
                          "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                          "relative_oil_volume": 0.0,
                          "incremental_moles_removed": null, # "%"
                          "cumulative_moles_removed": 0.0,
                          "oil_density": null,
                          "gas_z_factor": 0.922,
                          "gas_specific_gravity": null,
                          "gas_density": 0.339,
                          "gas_viscosity": 0.042,
                          "gas_plus_fraction_mw": null,
                      },
                      {
                          // Other stages ...
                      }
                      {
                          "pressure": 1300.0,
                          "is_saturation_pressure": false,
                          "relative_oil_volume": 13.18,
                          "incremental_moles_removed": null,
                          "cumulative_moles_removed": 67.06,
                          "oil_density": 0.63,
                          "gas_z_factor": 0.874,
                          "gas_specific_gravity": null,
                          "gas_density": 0.075,
                          "gas_viscosity": 0.015,
                          "gas_plus_fraction_mw": null,
                      }
                  ]
              }
          ]
      }

     - 1.4.5 If the page contains a Multi-Stage Separator (MSS) or Three Stage Separator table:
       - If you see "Two Stage", "Three Stage", "Four Stage" Separator, it is MSS. But, "Single Stage" is NOT MSS
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Stock tank oil data: If the title mention stock tank or tank oil
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If you see "Pressure Atm. bara", it means "pressure": 1 (atmospheric pressure means 1 bara)
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON

        Exception:
       - If you find page with title "Bo and GOR from Three Stage Separator test during depletion using the results from Differential Liberation ...", DO NOT extract the data.

        Example JSON:
{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                    "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                    "name": "Multi-stage Separator",
                    "type": "MSS",
                    "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "Dodecanes Plus",
                            "mw": null
                        }
                    ],
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.7579
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0024
                                }
                            ]
                        },
                        {
                            "stage_number": 1,
                            "composition": [
                                {
                                    "stage_number": 1,
                                    "component_name": "C1",
                                    "molar_amount": 0.6791
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 1,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0022
                                }
                            ]
                        },
                        {
                            "stage_number": 2,
                            "composition": [
                                {
                                    "stage_number": 2,
                                    "component_name": "C1",
                                    "molar_amount": 0.1999
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 2,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.019
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Stock tank oil
                "stock_tank_oil_molecular_weight": 145.78,
                "stock_tank_oil_density": 0.7843,
                "stock_tank_oil_density_unit": "g/cm3",
                "stock_tank_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.013,
                            "mass_amount": 0.0107
                        }
                    ]
                },
                "pressure_unit": "psia",
                "temperature_unit": "F",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",

                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 3724.0,
                        "is_saturation_pressure": true,
                        "temperature": 230.0,
                        "gor": 1802.83,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.1783,
                        "oil_density": 0.5016,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "temperature": 60.0,
                        "gor": 0.0,
                        "liberated_gas": 1802.83,
                        "oil_fvf": 1.0,
                        "oil_density": 0.7843,
                        "gas_z_factor": 0.9892,
                        "gas_specific_gravity": 1.316,
                        "gas_density": null,
                        "gas_viscosity": null
                    }
                ]
            }
    ]
}


     - 1.4.6 If the page contains a Differential Liberation (DLE) or Differential Vaporization (DV) table:
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Residual oil data: If mention residual oil or final stage
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity
       gas-oil ratio solution** | gor

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON
       ** in "Gas-Oil Ratio" column if you find "solution" and "liberated", take the "solution" and put to "gor" key in JSON

        Example JSON:

{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                "name": "Differential Liberation Expansion",
                "type": "DLE",
                "temperature": 229.7,
                "temperature_unit": "F",
                "dle_experiment_type": "Standard DLE Experiment",

                # // First part, Liberated gas
                "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "N2",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "C7+",
                            "mw": 114.01
                        }
                    ],
                    # Fill here if the table displays component as row and pressure as column, or otherwise
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.6859 # Composition in mole percent
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0085
                                }
                            ]
                        },
                        {
                            // Other stages ...
                        },
                        {
                            "stage_number": 9,
                            "composition": [
                                {
                                    "stage_number": 9,
                                    "component_name": "C1",
                                    "molar_amount": 0.1309
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 9,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0629
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Residual oil
                "evolved_gas_specific_gravity": null,
                "evolved_gas_composition_id": null,
                "evolved_gas_composition": null,
                "average_residual_oil_mw": 179.43,
                "average_residual_oil_density": 0.8128,
                "average_residual_oil_density_unit": "g/cm3",
                "residual_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.019,
                            "mass_amount": 0.0127
                        }
                    ]
                },
                "pressure_unit": "psia",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",
                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 8513.0,
                        "is_saturation_pressure": true,
                        "gor": 2847.67,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.5407,
                        "oil_density": 0.5714,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "gor": 0.0,
                        "liberated_gas": 2847.67,
                        "oil_fvf": 1.0975,
                        "oil_density": 0.7471,
                        "gas_z_factor": 0.9887,
                        "gas_specific_gravity": 2.1686,
                        "gas_density": null,
                        "gas_viscosity": 0.00925
                    }
                ]
            }
    ]
}

     - 1.4.7 If the page contains a Viscosity experiment (VISCO) table:
       - Identify measurement units for parameters.
       - Viscosity table has pressure as y-axis and viscosities as x-axis
       - Extract viscosity data and structure into "experiments".
       - Never come up with new structures or keys, just fill up in the specified JSON schema.

        Example JSON:

{
    "page": ...,
    "sample_name": ...,
    "experiments": [
        {
            "name": "Oil Viscosity",
            "type": "VISCO",
            "temperature": 229.7,
            "temperature_unit": "F",
            "pressure_unit": "psia",
            "oil_viscosity_unit": "cP",
            "gas_viscosity_unit": "cP",
            "stages": [
                {
                    "visco_id": 1018,
                    "pressure": 5413.0,
                    "oil_viscosity": 0.088,
                    "gas_viscosity": null
                },
                {
                    // Other stages ...
                },
                {
                    "visco_id": 1018,
                    "pressure": 13.0,
                    "oil_viscosity": 0.749,
                    "gas_viscosity": 0.00925
                }
            ]
        }
    ]
}

2. If any summary data or descriptive information is found:
   - Include it as key "Other_information", outside the "experiments" key in JSON.

   Example JSON:
   {
       "solution_gas_oil_ratio": 100,
       "separator_volume_factor": 300,
       "solution_gas_oil_ratio_unit": "scf/stb",
       "separator_volume_factor_unit": "bbl",
       ......
   }

3. Finally, you must stick to the following units

Unit shown | Unit in JSON
--------|-----------
g/cc | g/cm3
mole% | %
Vol/Vol | Sm3/Sm3
scf/sep bbl | scf/bbl
kg/Sm3 | kg/m3
psi | psia
Air=1 | SG

4. If you find Figure in the page, DO NOT extract any data from it. Just extract the title into json.

  {
    "figure_title": "Plot of dewpoint pressure"
  }

5. Dealing with Paraffinic-Naphtenes-Aromatics (PNA) composition

In some cases, PNA can be reported in compositional table, DLE liberated gas, or MSS liberated gas.

For example:

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| n-Hexane          | 0.086   | 0.351     | 86.2  |
| iso-Paraffins     | 0.154   | 0.627     | 86.2  |
| Naphthenes        | 0.033   | 0.109     | 70.1  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |
| n-Heptane         | 0.014   | 0.067     | 100.2 |
| iso-Paraffins     | 0.038   | 0.181     | 100.2 |
| Naphthenes        | 0.116   | 0.476     | 86.6  |
| Aromatics         | 0.030   | 0.112     | 78.1  |

You see for every C6 total and C7 total, there are iso-Paraffins (P), Naphthenes (N), and Aromatics (A).

Remove these PNA, so you just have C6 total and C7 total.

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |

From here, you just extract into corresponding JSON schema as defined in instructions 1 until 4
"
            }
          ]
        },
        {
          "role":"model",
          "parts":[
            {
              "text":"{
    "page": "38",
    "sample_name": "MPCT-2210595",
    "recombined_fluid_gor": 55.9,
    "recombined_fluid_gor_unit": "Sm3/Sm3",
    "flashed_oil_density": 908.9,
    "flashed_oil_density_unit": "kg/m3",
    "flashed_gas_specific_gravity": 0.607,
    "flashed_gas_specific_gravity_unit": "SG",
    "flashed_oil_mw": 330.1,
    "flashed_oil_mw_unit": "g/mol",
    "flashed_oil_c7_plus_mw": 331.0,
    "flashed_oil_c7_plus_mw_unit": "g/mol",
    "flashed_oil_c7_plus_density": 909.0,
    "flashed_oil_c7_plus_density_unit": "kg/m3",
    "flashed_oil_c10_plus_mw": 335.0,
    "flashed_oil_c10_plus_mw_unit": "g/mol",
    "flashed_oil_c10_plus_density": 910.0,
    "flashed_oil_c10_plus_density_unit": "kg/m3",
    "flashed_oil_temperature": 22.5,
    "flashed_oil_temperature_unit": "C",
    "flashed_oil_pressure": 1.0,
    "flashed_oil_pressure_unit": "bara",
    "measured_depth": 1991.3,
    "measured_depth_unit": "m",
    "Other_information": {
        "separation_conditions_from_temperature": 80.0,
        "separation_conditions_from_temperature_unit": "C",
        "separation_conditions_from_pressure": 400.0,
        "separation_conditions_from_pressure_unit": "bara",
        "standard_conditions_gas_temperature": 15.0,
        "standard_conditions_gas_temperature_unit": "C",
        "standard_conditions_gas_pressure": 1.01325,
        "standard_conditions_gas_pressure_unit": "bara",
        "standard_conditions_oil_temperature": 15.0,
        "standard_conditions_oil_temperature_unit": "C",
        "standard_conditions_oil_pressure": 1.0,
        "standard_conditions_oil_pressure_unit": "bara"
    }
}"
            }
          ]
        }
    ]}
{"contents":[
        {
          "role":"user",
          "parts":[
            {
              "fileData":{
                "mimeType":"image/jpeg",
                "fileUri":"https://github.com/yohanesnuwara/sft-finetune-gemini/blob/main/images/RS-113242%20Preliminary%20Results_v4%20-%20%C3%98st%20Frigg_page-0041.jpg"
              }
            },
            {
              "text":"OCR the following page into complete JSON.

Your task is to parse and extract as many infomation as possible from the page and put into JSON like specified

Never come up with new structures or keys, just fill up in the specified JSON schema.

Page can be either full texts, full table, or texts with table.

1. Identify the type of page:
   - 1.1 If the page consists only of texts:

      Parse sentences into JSON and do not give full sentence or summary

      Example sentence:

      "Two sets of sample (CL01 & CL02) is transferred at 15 deg C and pressure 1 atm" (page A.1)

      JSON response

      {
          "page": "A.1",
          "conditioning": {
              "samples": ["CL01", "CL02"],
              "transfer_temp": 15,
              "transfer_temp_unit": "C",
              "transfer_pressure": 1,
              "transfer_pressure_unit": "atm"
              // ...
          }
      }

      Try to find these parameters inferred from "flash" keyword
      {
        "sep_pressure": ...,
        "sep_pressure_unit": ...,
        "sep_temperature": ...,
        "sep_temperature_unit": ...,
      }



   - 1.2 If the page consists of table of contents
     - Put each table title from the list in key "table_title"
     - Identify the "keyword" in the table title, into these categories
        - If mention composition then "composition"
        - If mention constant composition expansion or constant mass expansion then "CCE"
        - If mention constant volume depletion then "CVD"
        - If mention differential liberation expansion then "DLE"
        - If mention multistage separator then "MSS"
        - If mention viscosity then "VISCO"
     - Identify the "sample_name" from keywords like Cylinder, Sample, Chamber number, or if it is sample pair
     - Identify the "page_number"

    JSON response:

    {
        "page": "....",
        "list_content": [
            {
                "title": "...",
                "keyword": "composition",
                "sample_name": null,
                "page_number": 1
            },
            {
                "title": "...",
                "keyword": "CCE"
                "sample_name": "A01",
                "page_number": 2
            },
            {
                "title": "...",
                "keyword": "CVD",
                "sample_name": "A01+A02",
                "page_number": 3
            }
        ]
    }

   - 1.3 If the page consists of texts with table:
     - 1.3.1 If the page displays "sample inventory" or "sample summary" table:
       - This type of page can be recognized by structure of the table. If the table has Sample ID/name or Bottle no in the y-axis, and properties in the x-axis
       - Properties reported in this summary table such as sampling depth, GOR, density, molecular weight, reservoir temperature, reservoir pressure (Pres), viscosity
       - Do not confuse this table with experiment table
       - Extract data into the "sample_inventory" JSON schema.
       - Extract other relevant information into "Other_information".
       - If you do not find any of the keys, DO NOT create the key
       - Identify title of each table and decide the "type"
            - If mention MDT oil, then "type": "OFT"
            - If mention MDT water, then "type": "WATER"

       Example JSON:
        {
          "page": "...",
          "sample_inventory": {
            "data": [
              {
                "sample_name": "1.01",
                "type": "OFT", # put "OFT" if mention MDT oil, "WATER" if mention MDT water
                "sampling_date": "2023-04-26", # If mention Transfer Date
                "well_id": "23/1", # Well name
                "basin_id": null,
                "sub_basin_id": null,
                "field_id": "Volve", # Field name
                "field_segment_id": null,
                "formation_id": "Realgrunnen", # Formation name
                "formation_zone_id": null,
                "reservoir_pressure": 182.0,
                "reservoir_pressure_unit": "bara",
                "reservoir_temperature": 69.8,
                "reservoir_temperature_unit": "C",
                "true_vertical_depth": 1929.0, # If mention sampling depth m TVDSS (true vertical depth sub sea)
                "true_vertical_depth_unit": "m",
                "measured_depth": 1984.5, # If mention sampling depth m MD (measured depth)
                "measured_depth_unit": "m",
                "pressure_at_lab": 400.0,
                "pressure_at_lab_unit": "bara",
                "temperature_at_lab": 80.0,
                "temperature_at_lab_unit": "C",
                "pressure_when_sampled": 100,
                "pressure_when_sampled_unit": "bara",
                "temperature_when_sampled": 23,
                "temperature_when_sampled_unit": "C",
                "top_perforation_depth": 2000,
                "top_perforation_depth_unit": "m",
                "bottom_perforation_depth": 3000,
                "bottom_perforation_depth_unit": "m",
                "transfer_pressure": 450.0,
                "transfer_pressure_unit": "bara",
                "transfer_temperature": 80.0,
                "transfer_temperature_unit": "C",
                "drawdown_pressure": 100,
                "drawdown_pressure_unit": "bara",
                "flashed_oil_contamination": 2.0, # If mention Mud filtrate contamination in STO
                "flashed_oil_contamination": "mass%", # If the unit mentioned is Wt%
                "fluid_type": "Oil",
                "mud_base": "Oil", # put "Oil" if mention OBM, or "Water" if mention WBM
                //... # Other parameters
              },
              {
                "Sample Type": "REC", # If mention Recombined
                # Same as above
                //...
              }
            ]
          },
          "Other_information": {
            "remarks": "Additional details can be provided here."
          }
        }

   - 1.4 If the page consists of a table:
     - 1.4.1 If the page consists of an Information table or descriptions:
       - Extract physical parameters and values into a structured JSON format.
       - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
         - If found, set "sample_name" accordingly.
         - If not found, set "sample_name" to null.

       Important data:

       - If you find "density of stock tank oil", put into key "flashed_oil_density", then fill "flashed_oil_density_unit"
       - If you see gas oil ratio (GOR), put into key "recombined_fluid_gor", then fill "recombined_fluid_gor_unit

       Getting 'flashed_oil_temperature':
       If you see the following

        ```
        Separation conditions:    From:  80.0 °C and   400 bara
                                  To:    25.5 °C and   atm. pressure
        ```

       In this case, "flashed_oil_temperature": 25.5, "flashed_oil_temperature_unit": "C"
       Pick the number after "To:   " before "and atm.pressure"

       Example JSON:
        {
            "page": "...",
            "sample_name": "...",
            "parameter1": "...",
            "parameter1_unit": "...",
            "parameter2": "...",
            "parameter2_unit": "...",
            "parameter3": "...",
            "parameter4_unit": "...",

            # Important data
            "flashed_oil_density": ...,
            "flashed_oil_density_unit": "...",
            "flashed_oil_temperature": 20.5,
            "flashed_oil_temperature_unit": "C",
            "recombined_fluid_gor": ...,
            "recombined_fluid_gor_unit": "...",
            et cetera ...
        }

     - 1.4.2 If the page contains a Composition table :

        - Dynamically identify each fluid-type group by reading the top header row(s), matching these synonyms:
          - flashed_oil ↔ "Stock tank oil", "Flashed Liquid", "Stock tank oil"
          - flashed_gas ↔ "Stock tank gas", "Flashed gas"
          - recombined_fluid ↔ "Monophasic fluid", "Reservoir fluid"
        - Under each fluid-type header, locate its two sub-columns: one labeled "Mole %" → molar_amount, the other "Weight %" → mass_amount.
        - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
            - If found, set "sample_name" accordingly.
            - Sample name is just like ID consist of letter and number, without C10+ or C36+
            - If not found, set "sample_name" to null.
        - If the table title says "uncorrected" or "corrected", set "uncorrected": true/false.
        - Identify "last_component" from the final row label (e.g. "C36+"), include units on every top-level number, and fill only the keys in the prescribed schema—do not invent new ones.

        IMPORTANT!!!
        - In case there is blank cell in the table (value not reported)
        - If you do not find BOTH molar amount and mass amount of a component, do not extract it into JSON

        Example table with blanks:

      |Component         | Stock tank gas    | Stock tank oil    |  Reservoir fluid   | Mol weight  |
      |Mole%             | Weight% | Mole%   | Weight% | Mole%   |  Mole%   | Weight% |             |
      |Nitrogen          | 0.157   | 0.183   |         |         |  0.084   | 0.024   | 28.02       |
      |Carbon Dioxide    | 6.582   | 12.048  |         |         |  3.509   | 1.555   | 44.01       |
      |Hydrogen Sulphide | 0       | 0       |         |         |  0       | 0       | 34.08       |
      |Methane           | 73.927  | 49.324  | 0.115   | 0.01    |  39.466  | 6.376   | 16.04       |
      |Ethane            | 8.997   | 11.251  | 0.222   | 0.036   |  4.9     | 1.484   | 30.07       |


        Result JSON (referring to the table):

{
    "page": ...,
    "sample_name": "A001", # The name of sample
    "uncorrected": true, # false or null
    "last_component": "C10+",
    "flashed_oil_mw": 151.9, # oil molecular weight or MW
    "flashed_oil_density": 0.777, # oil density at stock-tank condition 15 degC
    "flashed_oil_density_unit": "g/cm3", # g/cm3, kg/m3
    "flashed_oil_temperature": 60.0, # temperature at flash
    "flashed_oil_temperature_unit": "F", # F, C, K, R
    "flashed_oil_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide molar_amount and mass_amount is null, so no need to extract
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 0.115,
                "mass_amount": 0.01
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 0.222,
                "mass_amount": 0.036
            }
        ]
    },
    "flashed_gas_mw": 23.4, # gas molecular weight or MW
    "flashed_gas_specific_gravity": 0.808, # also called relative density or ideal
    "flashed_gas_specific_gravity_unit": "SG", # if unit not mentioned then most likely SG
    "flashed_gas_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide has molar_amount and mass_amount, so extract it
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.157,
                "mass_amount": 0.183
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 6.582,
                "mass_amount": 12.048
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 73.997,
                "mass_amount": 49.324
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 8.997,
                "mass_amount": 11.251
            }
        ]
    },

    # Recombined is sometimes called as Reservoir Fluid or Monophasic
    "recombined_fluid_mw": 30.2, # reservoir fluid MW
    "recombined_fluid_gor": 12200.8, # Gas oil ratio or gas liquid ratio (GLR) or Rs
    "recombined_fluid_gor_unit": "scf/STB", # scf/STB, Sm3/Sm3, Sm3/m3, scf/bbl
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.084,
                "mass_amount": 0.024
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 3.509,
                "mass_amount": 1.555
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 39.466,
                "mass_amount": 6.376
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 4.9,
                "mass_amount": 1.484
            }
        ]
    }
}
     - 1.4.3 If the page contains a Constant Composition Expansion (CCE) or Constant Mass Expansion (CME) table:
       - Identify measurement units for parameters.
       - Always put as "CCE" not "CME"
       - Extract data and structure into the "experiments" JSON key.
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Stages 'order' key must always start from 0
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column name | Key
       --------|-----------
       Relative Volume (column) | relative_total_volume
       Relative Volumes (Vs/Vs,BP) | relative_total_volume
       RLD (column) | relative_oil_volume
       % Liq/Sat (Vliq/Vsat) | relative_oil_volume

       Note: relative_oil_volume always null BEFORE the saturation_pressure=True

       - You must stick to the following units

        Variable | Unit
        --------|-----------
        relative_total_volume_unit | Vtot/Vsat

       Example JSON:


{
    "page" : ...,
    "sample_name": ...,
    "experiments": [
        {
            "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
            "sample_name": 1184,
            "name": "Constant Composition Expansion",
            "type": "CCE",
            "temperature": 106.0,
            "temperature_unit": "C",
            "pressure_unit": "psia",
            "relative_oil_volume_unit": "Vo/Vsat (%)",
            "single_phase_density_unit": "g/cm3",
            "relative_total_volume_unit": "Vtot/Vsat",
            "stages": [
                {
                    "pressure": 9000.0,
                    "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                    "relative_oil_volume": null,
                    "relative_total_volume": 0.79,
                    "single_phase_density": 0.422,
                    "z_factor": 1.407
                },
                // Other stages ...
                {
                    "pressure": 3011.0,
                    "is_saturation_pressure": false,
                    "relative_oil_volume": 14.37,
                    "relative_total_volume": 1.315,
                    "single_phase_density": null,
                    "z_factor": null
                }
            ]
        }
    ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) COMPOSITION:
       - You put the page in this category if you see keywords "Constant Volume Depletion" and chemical component
       - Please Read the WHOLE COLUMNS of TABLE
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true

       - If the columns like this: 2600 psia, 2010 psia, 1000 psia, Residual Oil
          - Put the pressures columns inside Liberated Gas schema
          - Put the Residual Oil column inside Final Stage Oil schema

       - Liberated Gas structure:
          - Put each of the "pressure" inside "stages" key
          - Put ALL the "components" and its "molar_amount" inside each "pressure" which it refers to

        Structure:

{
  "sample_name": null,
  "experiments": [
    {
      "sample_name": null,
      "continued": false,
      "saturation_pressure_type": "Dewpoint",
      "name": "Constant Volume Depletion",
      "type": "CVD",
      "temperature": 106.0,
      "temperature_unit": "C",

      # First type
      "liberated_gas_compositions": {
        "components": [
          {
            "input_name": "CO2",
            "mw": 44.01
          },
          {
            "input_name": "Other",
            "mw": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0
          }
        ],
        "stages": [
          {
            "pressure": 2600,
            "composition": [
              {
                "component_name": "CO2",
                "molar_amount": 0.305
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "C30+",
                "molar_amount": 0.087
              }
            ]
          },
          {
            "pressure": 1300,
            "composition": [
              {
                "component_name": "2M-C6",
                "molar_amount": 0.123
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "Toluene",
                "molar_amount": 0.037
              }
            ]
          }
        ]
      },

       - Residual Oil structure:
          - Put ALL the "components" and its "molar_amount" inside "composition" key
          - Get the "final_stage_oil_mw" from the last row of table if mentioning "MW"

        Structure:

      # Second type
      "final_stage_oil_mw": 100.14,
      "final_stage_oil_density": 630.0,
      "final_stage_oil_density_unit": "kg/m3",
      "stock_tank_oil_density": 630.0,
      "stock_tank_oil_density_unit": "kg/m3",
      "final_stage_oil_composition": {
        "components": [
          {
            "input_name": "CO2",
            "mw": null,
            "molar_amount": 0.213,
            "mass_amount": null
          },
          {
            "input_name": "Other",
            "mw": null,
            "molar_amount": null,
            "mass_amount": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0,
            "molar_amount": 0.553,
            "mass_amount": null
          }
        ]
      }
    }
  ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) PROPERTIES table:
       - You put into this category If you see Pressure as row and Physical Properties as column (No composition)
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column Name | Key
       --------|-----------
       Total Recovery (mole %) | cumulative_moles_removed
       Liq. Density (g/cc) | oil_density

        Example JSON:

      {
          "sample_name": ..., # Put sample ID here
          "experiments": [
              {
                  "sample_name": ...,
                  "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                  "name": "Constant Volume Depletion",
                  "type": "CVD",
                  "temperature": 106.0,
                  "temperature_unit": "C",
                  "pressure_unit": "psia",
                  "oil_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_viscosity_unit": "...", # "cP"
                  "relative_oil_volume_unit": "...", # "%"
                  "incremental_moles_removed_unit": "...", # "%"
                  "cumulative_moles_removed_unit": "...", # "%"

                  # Properties data
                  "stages": [
                      # Fill here if the table displays properties as row and pressure as column, or otherwise
                      {
                          "pressure": 4661.0,
                          "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                          "relative_oil_volume": 0.0,
                          "incremental_moles_removed": null, # "%"
                          "cumulative_moles_removed": 0.0,
                          "oil_density": null,
                          "gas_z_factor": 0.922,
                          "gas_specific_gravity": null,
                          "gas_density": 0.339,
                          "gas_viscosity": 0.042,
                          "gas_plus_fraction_mw": null,
                      },
                      {
                          // Other stages ...
                      }
                      {
                          "pressure": 1300.0,
                          "is_saturation_pressure": false,
                          "relative_oil_volume": 13.18,
                          "incremental_moles_removed": null,
                          "cumulative_moles_removed": 67.06,
                          "oil_density": 0.63,
                          "gas_z_factor": 0.874,
                          "gas_specific_gravity": null,
                          "gas_density": 0.075,
                          "gas_viscosity": 0.015,
                          "gas_plus_fraction_mw": null,
                      }
                  ]
              }
          ]
      }

     - 1.4.5 If the page contains a Multi-Stage Separator (MSS) or Three Stage Separator table:
       - If you see "Two Stage", "Three Stage", "Four Stage" Separator, it is MSS. But, "Single Stage" is NOT MSS
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Stock tank oil data: If the title mention stock tank or tank oil
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If you see "Pressure Atm. bara", it means "pressure": 1 (atmospheric pressure means 1 bara)
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON

        Exception:
       - If you find page with title "Bo and GOR from Three Stage Separator test during depletion using the results from Differential Liberation ...", DO NOT extract the data.

        Example JSON:
{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                    "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                    "name": "Multi-stage Separator",
                    "type": "MSS",
                    "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "Dodecanes Plus",
                            "mw": null
                        }
                    ],
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.7579
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0024
                                }
                            ]
                        },
                        {
                            "stage_number": 1,
                            "composition": [
                                {
                                    "stage_number": 1,
                                    "component_name": "C1",
                                    "molar_amount": 0.6791
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 1,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0022
                                }
                            ]
                        },
                        {
                            "stage_number": 2,
                            "composition": [
                                {
                                    "stage_number": 2,
                                    "component_name": "C1",
                                    "molar_amount": 0.1999
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 2,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.019
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Stock tank oil
                "stock_tank_oil_molecular_weight": 145.78,
                "stock_tank_oil_density": 0.7843,
                "stock_tank_oil_density_unit": "g/cm3",
                "stock_tank_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.013,
                            "mass_amount": 0.0107
                        }
                    ]
                },
                "pressure_unit": "psia",
                "temperature_unit": "F",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",

                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 3724.0,
                        "is_saturation_pressure": true,
                        "temperature": 230.0,
                        "gor": 1802.83,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.1783,
                        "oil_density": 0.5016,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "temperature": 60.0,
                        "gor": 0.0,
                        "liberated_gas": 1802.83,
                        "oil_fvf": 1.0,
                        "oil_density": 0.7843,
                        "gas_z_factor": 0.9892,
                        "gas_specific_gravity": 1.316,
                        "gas_density": null,
                        "gas_viscosity": null
                    }
                ]
            }
    ]
}


     - 1.4.6 If the page contains a Differential Liberation (DLE) or Differential Vaporization (DV) table:
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Residual oil data: If mention residual oil or final stage
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity
       gas-oil ratio solution** | gor

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON
       ** in "Gas-Oil Ratio" column if you find "solution" and "liberated", take the "solution" and put to "gor" key in JSON

        Example JSON:

{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                "name": "Differential Liberation Expansion",
                "type": "DLE",
                "temperature": 229.7,
                "temperature_unit": "F",
                "dle_experiment_type": "Standard DLE Experiment",

                # // First part, Liberated gas
                "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "N2",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "C7+",
                            "mw": 114.01
                        }
                    ],
                    # Fill here if the table displays component as row and pressure as column, or otherwise
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.6859 # Composition in mole percent
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0085
                                }
                            ]
                        },
                        {
                            // Other stages ...
                        },
                        {
                            "stage_number": 9,
                            "composition": [
                                {
                                    "stage_number": 9,
                                    "component_name": "C1",
                                    "molar_amount": 0.1309
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 9,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0629
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Residual oil
                "evolved_gas_specific_gravity": null,
                "evolved_gas_composition_id": null,
                "evolved_gas_composition": null,
                "average_residual_oil_mw": 179.43,
                "average_residual_oil_density": 0.8128,
                "average_residual_oil_density_unit": "g/cm3",
                "residual_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.019,
                            "mass_amount": 0.0127
                        }
                    ]
                },
                "pressure_unit": "psia",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",
                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 8513.0,
                        "is_saturation_pressure": true,
                        "gor": 2847.67,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.5407,
                        "oil_density": 0.5714,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "gor": 0.0,
                        "liberated_gas": 2847.67,
                        "oil_fvf": 1.0975,
                        "oil_density": 0.7471,
                        "gas_z_factor": 0.9887,
                        "gas_specific_gravity": 2.1686,
                        "gas_density": null,
                        "gas_viscosity": 0.00925
                    }
                ]
            }
    ]
}

     - 1.4.7 If the page contains a Viscosity experiment (VISCO) table:
       - Identify measurement units for parameters.
       - Viscosity table has pressure as y-axis and viscosities as x-axis
       - Extract viscosity data and structure into "experiments".
       - Never come up with new structures or keys, just fill up in the specified JSON schema.

        Example JSON:

{
    "page": ...,
    "sample_name": ...,
    "experiments": [
        {
            "name": "Oil Viscosity",
            "type": "VISCO",
            "temperature": 229.7,
            "temperature_unit": "F",
            "pressure_unit": "psia",
            "oil_viscosity_unit": "cP",
            "gas_viscosity_unit": "cP",
            "stages": [
                {
                    "visco_id": 1018,
                    "pressure": 5413.0,
                    "oil_viscosity": 0.088,
                    "gas_viscosity": null
                },
                {
                    // Other stages ...
                },
                {
                    "visco_id": 1018,
                    "pressure": 13.0,
                    "oil_viscosity": 0.749,
                    "gas_viscosity": 0.00925
                }
            ]
        }
    ]
}

2. If any summary data or descriptive information is found:
   - Include it as key "Other_information", outside the "experiments" key in JSON.

   Example JSON:
   {
       "solution_gas_oil_ratio": 100,
       "separator_volume_factor": 300,
       "solution_gas_oil_ratio_unit": "scf/stb",
       "separator_volume_factor_unit": "bbl",
       ......
   }

3. Finally, you must stick to the following units

Unit shown | Unit in JSON
--------|-----------
g/cc | g/cm3
mole% | %
Vol/Vol | Sm3/Sm3
scf/sep bbl | scf/bbl
kg/Sm3 | kg/m3
psi | psia
Air=1 | SG

4. If you find Figure in the page, DO NOT extract any data from it. Just extract the title into json.

  {
    "figure_title": "Plot of dewpoint pressure"
  }

5. Dealing with Paraffinic-Naphtenes-Aromatics (PNA) composition

In some cases, PNA can be reported in compositional table, DLE liberated gas, or MSS liberated gas.

For example:

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| n-Hexane          | 0.086   | 0.351     | 86.2  |
| iso-Paraffins     | 0.154   | 0.627     | 86.2  |
| Naphthenes        | 0.033   | 0.109     | 70.1  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |
| n-Heptane         | 0.014   | 0.067     | 100.2 |
| iso-Paraffins     | 0.038   | 0.181     | 100.2 |
| Naphthenes        | 0.116   | 0.476     | 86.6  |
| Aromatics         | 0.030   | 0.112     | 78.1  |

You see for every C6 total and C7 total, there are iso-Paraffins (P), Naphthenes (N), and Aromatics (A).

Remove these PNA, so you just have C6 total and C7 total.

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |

From here, you just extract into corresponding JSON schema as defined in instructions 1 until 4
"
            }
          ]
        },
        {
          "role":"model",
          "parts":[
            {
              "text":"{
    "page": "41",
    "sample_name": "MPCT-2210595",
    "uncorrected": true,
    "last_component": "C36+",
    "flashed_gas_mw": 17.57,
    "flashed_gas_specific_gravity": 0.607,
    "flashed_gas_specific_gravity_unit": "SG",
    "flashed_gas_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": 0.364,
                "mass_amount": 0.58
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": 0.215,
                "mass_amount": 0.538
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 90.317,
                "mass_amount": 82.454
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 8.567,
                "mass_amount": 14.66
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 0.352,
                "mass_amount": 0.882
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 0.033,
                "mass_amount": 0.109
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 0.04,
                "mass_amount": 0.131
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.018,
                "mass_amount": 0.075
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 0.004,
                "mass_amount": 0.014
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 0.005,
                "mass_amount": 0.019
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 0.021,
                "mass_amount": 0.105
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 0.017,
                "mass_amount": 0.09
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 0.016,
                "mass_amount": 0.095
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 0.016,
                "mass_amount": 0.111
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 0.014,
                "mass_amount": 0.108
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 0.003,
                "mass_amount": 0.028
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            }
        ]
    },
    "flashed_oil_mw": 330.1,
    "flashed_oil_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 0.103,
                "mass_amount": 0.005
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 0.187,
                "mass_amount": 0.017
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 0.03,
                "mass_amount": 0.004
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 0.011,
                "mass_amount": 0.002
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 0.017,
                "mass_amount": 0.003
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.009,
                "mass_amount": 0.002
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 0.005,
                "mass_amount": 0.001
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 0.009,
                "mass_amount": 0.002
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 0.08,
                "mass_amount": 0.021
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 0.146,
                "mass_amount": 0.042
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 0.435,
                "mass_amount": 0.146
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 1.096,
                "mass_amount": 0.412
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 2.224,
                "mass_amount": 0.903
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 2.759,
                "mass_amount": 1.229
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 3.729,
                "mass_amount": 1.819
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 5.098,
                "mass_amount": 2.703
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 6.669,
                "mass_amount": 3.839
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 6.278,
                "mass_amount": 3.918
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 5.391,
                "mass_amount": 3.626
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 4.833,
                "mass_amount": 3.47
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 4.579,
                "mass_amount": 3.482
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 4.288,
                "mass_amount": 3.417
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 3.842,
                "mass_amount": 3.201
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 3.581,
                "mass_amount": 3.157
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 3.253,
                "mass_amount": 2.957
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 2.987,
                "mass_amount": 2.824
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 2.681,
                "mass_amount": 2.632
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 2.397,
                "mass_amount": 2.447
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 2.244,
                "mass_amount": 2.373
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 2.136,
                "mass_amount": 2.33
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 2.092,
                "mass_amount": 2.358
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 1.955,
                "mass_amount": 2.263
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 1.883,
                "mass_amount": 2.248
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 1.677,
                "mass_amount": 2.053
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 1.509,
                "mass_amount": 1.897
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 1.354,
                "mass_amount": 1.748
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 1.24,
                "mass_amount": 1.642
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 1.156,
                "mass_amount": 1.559
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 16.034,
                "mass_amount": 33.248
            }
        ]
    },
    "recombined_fluid_mw": 185.7,
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": 0.168,
                "mass_amount": 0.025
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": 0.099,
                "mass_amount": 0.024
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 41.793,
                "mass_amount": 3.611
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 4.06,
                "mass_amount": 0.657
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 0.179,
                "mass_amount": 0.042
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 0.021,
                "mass_amount": 0.007
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 0.027,
                "mass_amount": 0.009
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.013,
                "mass_amount": 0.005
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 0.004,
                "mass_amount": 0.002
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 0.007,
                "mass_amount": 0.003
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 0.053,
                "mass_amount": 0.025
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 0.086,
                "mass_amount": 0.044
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 0.241,
                "mass_amount": 0.144
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 0.597,
                "mass_amount": 0.399
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 1.203,
                "mass_amount": 0.868
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 1.486,
                "mass_amount": 1.176
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 2.006,
                "mass_amount": 1.739
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 2.742,
                "mass_amount": 2.585
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 3.587,
                "mass_amount": 3.671
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 3.377,
                "mass_amount": 3.747
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 2.9,
                "mass_amount": 3.467
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 2.599,
                "mass_amount": 3.318
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 2.463,
                "mass_amount": 3.33
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 2.307,
                "mass_amount": 3.268
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 2.066,
                "mass_amount": 3.061
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 1.926,
                "mass_amount": 3.019
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 1.75,
                "mass_amount": 2.828
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 1.607,
                "mass_amount": 2.7
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 1.442,
                "mass_amount": 2.517
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 1.289,
                "mass_amount": 2.34
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 1.207,
                "mass_amount": 2.269
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 1.149,
                "mass_amount": 2.228
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 1.125,
                "mass_amount": 2.255
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 1.052,
                "mass_amount": 2.164
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 1.013,
                "mass_amount": 2.15
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 0.902,
                "mass_amount": 1.963
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 0.812,
                "mass_amount": 1.814
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 0.728,
                "mass_amount": 1.672
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 0.667,
                "mass_amount": 1.57
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 0.622,
                "mass_amount": 1.491
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 8.624,
                "mass_amount": 31.794
            }
        ]
    }
}"
            }
          ]
        }
    ]}
{"contents":[
        {
          "role":"user",
          "parts":[
            {
              "fileData":{
                "mimeType":"image/jpeg",
                "fileUri":"https://github.com/yohanesnuwara/sft-finetune-gemini/blob/main/images/RS-113242%20Preliminary%20Results_v4%20-%20%C3%98st%20Frigg_page-0046.jpg"
              }
            },
            {
              "text":"OCR the following page into complete JSON.

Your task is to parse and extract as many infomation as possible from the page and put into JSON like specified

Never come up with new structures or keys, just fill up in the specified JSON schema.

Page can be either full texts, full table, or texts with table.

1. Identify the type of page:
   - 1.1 If the page consists only of texts:

      Parse sentences into JSON and do not give full sentence or summary

      Example sentence:

      "Two sets of sample (CL01 & CL02) is transferred at 15 deg C and pressure 1 atm" (page A.1)

      JSON response

      {
          "page": "A.1",
          "conditioning": {
              "samples": ["CL01", "CL02"],
              "transfer_temp": 15,
              "transfer_temp_unit": "C",
              "transfer_pressure": 1,
              "transfer_pressure_unit": "atm"
              // ...
          }
      }

      Try to find these parameters inferred from "flash" keyword
      {
        "sep_pressure": ...,
        "sep_pressure_unit": ...,
        "sep_temperature": ...,
        "sep_temperature_unit": ...,
      }



   - 1.2 If the page consists of table of contents
     - Put each table title from the list in key "table_title"
     - Identify the "keyword" in the table title, into these categories
        - If mention composition then "composition"
        - If mention constant composition expansion or constant mass expansion then "CCE"
        - If mention constant volume depletion then "CVD"
        - If mention differential liberation expansion then "DLE"
        - If mention multistage separator then "MSS"
        - If mention viscosity then "VISCO"
     - Identify the "sample_name" from keywords like Cylinder, Sample, Chamber number, or if it is sample pair
     - Identify the "page_number"

    JSON response:

    {
        "page": "....",
        "list_content": [
            {
                "title": "...",
                "keyword": "composition",
                "sample_name": null,
                "page_number": 1
            },
            {
                "title": "...",
                "keyword": "CCE"
                "sample_name": "A01",
                "page_number": 2
            },
            {
                "title": "...",
                "keyword": "CVD",
                "sample_name": "A01+A02",
                "page_number": 3
            }
        ]
    }

   - 1.3 If the page consists of texts with table:
     - 1.3.1 If the page displays "sample inventory" or "sample summary" table:
       - This type of page can be recognized by structure of the table. If the table has Sample ID/name or Bottle no in the y-axis, and properties in the x-axis
       - Properties reported in this summary table such as sampling depth, GOR, density, molecular weight, reservoir temperature, reservoir pressure (Pres), viscosity
       - Do not confuse this table with experiment table
       - Extract data into the "sample_inventory" JSON schema.
       - Extract other relevant information into "Other_information".
       - If you do not find any of the keys, DO NOT create the key
       - Identify title of each table and decide the "type"
            - If mention MDT oil, then "type": "OFT"
            - If mention MDT water, then "type": "WATER"

       Example JSON:
        {
          "page": "...",
          "sample_inventory": {
            "data": [
              {
                "sample_name": "1.01",
                "type": "OFT", # put "OFT" if mention MDT oil, "WATER" if mention MDT water
                "sampling_date": "2023-04-26", # If mention Transfer Date
                "well_id": "23/1", # Well name
                "basin_id": null,
                "sub_basin_id": null,
                "field_id": "Volve", # Field name
                "field_segment_id": null,
                "formation_id": "Realgrunnen", # Formation name
                "formation_zone_id": null,
                "reservoir_pressure": 182.0,
                "reservoir_pressure_unit": "bara",
                "reservoir_temperature": 69.8,
                "reservoir_temperature_unit": "C",
                "true_vertical_depth": 1929.0, # If mention sampling depth m TVDSS (true vertical depth sub sea)
                "true_vertical_depth_unit": "m",
                "measured_depth": 1984.5, # If mention sampling depth m MD (measured depth)
                "measured_depth_unit": "m",
                "pressure_at_lab": 400.0,
                "pressure_at_lab_unit": "bara",
                "temperature_at_lab": 80.0,
                "temperature_at_lab_unit": "C",
                "pressure_when_sampled": 100,
                "pressure_when_sampled_unit": "bara",
                "temperature_when_sampled": 23,
                "temperature_when_sampled_unit": "C",
                "top_perforation_depth": 2000,
                "top_perforation_depth_unit": "m",
                "bottom_perforation_depth": 3000,
                "bottom_perforation_depth_unit": "m",
                "transfer_pressure": 450.0,
                "transfer_pressure_unit": "bara",
                "transfer_temperature": 80.0,
                "transfer_temperature_unit": "C",
                "drawdown_pressure": 100,
                "drawdown_pressure_unit": "bara",
                "flashed_oil_contamination": 2.0, # If mention Mud filtrate contamination in STO
                "flashed_oil_contamination": "mass%", # If the unit mentioned is Wt%
                "fluid_type": "Oil",
                "mud_base": "Oil", # put "Oil" if mention OBM, or "Water" if mention WBM
                //... # Other parameters
              },
              {
                "Sample Type": "REC", # If mention Recombined
                # Same as above
                //...
              }
            ]
          },
          "Other_information": {
            "remarks": "Additional details can be provided here."
          }
        }

   - 1.4 If the page consists of a table:
     - 1.4.1 If the page consists of an Information table or descriptions:
       - Extract physical parameters and values into a structured JSON format.
       - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
         - If found, set "sample_name" accordingly.
         - If not found, set "sample_name" to null.

       Important data:

       - If you find "density of stock tank oil", put into key "flashed_oil_density", then fill "flashed_oil_density_unit"
       - If you see gas oil ratio (GOR), put into key "recombined_fluid_gor", then fill "recombined_fluid_gor_unit

       Getting 'flashed_oil_temperature':
       If you see the following

        ```
        Separation conditions:    From:  80.0 °C and   400 bara
                                  To:    25.5 °C and   atm. pressure
        ```

       In this case, "flashed_oil_temperature": 25.5, "flashed_oil_temperature_unit": "C"
       Pick the number after "To:   " before "and atm.pressure"

       Example JSON:
        {
            "page": "...",
            "sample_name": "...",
            "parameter1": "...",
            "parameter1_unit": "...",
            "parameter2": "...",
            "parameter2_unit": "...",
            "parameter3": "...",
            "parameter4_unit": "...",

            # Important data
            "flashed_oil_density": ...,
            "flashed_oil_density_unit": "...",
            "flashed_oil_temperature": 20.5,
            "flashed_oil_temperature_unit": "C",
            "recombined_fluid_gor": ...,
            "recombined_fluid_gor_unit": "...",
            et cetera ...
        }

     - 1.4.2 If the page contains a Composition table :

        - Dynamically identify each fluid-type group by reading the top header row(s), matching these synonyms:
          - flashed_oil ↔ "Stock tank oil", "Flashed Liquid", "Stock tank oil"
          - flashed_gas ↔ "Stock tank gas", "Flashed gas"
          - recombined_fluid ↔ "Monophasic fluid", "Reservoir fluid"
        - Under each fluid-type header, locate its two sub-columns: one labeled "Mole %" → molar_amount, the other "Weight %" → mass_amount.
        - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
            - If found, set "sample_name" accordingly.
            - Sample name is just like ID consist of letter and number, without C10+ or C36+
            - If not found, set "sample_name" to null.
        - If the table title says "uncorrected" or "corrected", set "uncorrected": true/false.
        - Identify "last_component" from the final row label (e.g. "C36+"), include units on every top-level number, and fill only the keys in the prescribed schema—do not invent new ones.

        IMPORTANT!!!
        - In case there is blank cell in the table (value not reported)
        - If you do not find BOTH molar amount and mass amount of a component, do not extract it into JSON

        Example table with blanks:

      |Component         | Stock tank gas    | Stock tank oil    |  Reservoir fluid   | Mol weight  |
      |Mole%             | Weight% | Mole%   | Weight% | Mole%   |  Mole%   | Weight% |             |
      |Nitrogen          | 0.157   | 0.183   |         |         |  0.084   | 0.024   | 28.02       |
      |Carbon Dioxide    | 6.582   | 12.048  |         |         |  3.509   | 1.555   | 44.01       |
      |Hydrogen Sulphide | 0       | 0       |         |         |  0       | 0       | 34.08       |
      |Methane           | 73.927  | 49.324  | 0.115   | 0.01    |  39.466  | 6.376   | 16.04       |
      |Ethane            | 8.997   | 11.251  | 0.222   | 0.036   |  4.9     | 1.484   | 30.07       |


        Result JSON (referring to the table):

{
    "page": ...,
    "sample_name": "A001", # The name of sample
    "uncorrected": true, # false or null
    "last_component": "C10+",
    "flashed_oil_mw": 151.9, # oil molecular weight or MW
    "flashed_oil_density": 0.777, # oil density at stock-tank condition 15 degC
    "flashed_oil_density_unit": "g/cm3", # g/cm3, kg/m3
    "flashed_oil_temperature": 60.0, # temperature at flash
    "flashed_oil_temperature_unit": "F", # F, C, K, R
    "flashed_oil_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide molar_amount and mass_amount is null, so no need to extract
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 0.115,
                "mass_amount": 0.01
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 0.222,
                "mass_amount": 0.036
            }
        ]
    },
    "flashed_gas_mw": 23.4, # gas molecular weight or MW
    "flashed_gas_specific_gravity": 0.808, # also called relative density or ideal
    "flashed_gas_specific_gravity_unit": "SG", # if unit not mentioned then most likely SG
    "flashed_gas_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide has molar_amount and mass_amount, so extract it
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.157,
                "mass_amount": 0.183
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 6.582,
                "mass_amount": 12.048
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 73.997,
                "mass_amount": 49.324
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 8.997,
                "mass_amount": 11.251
            }
        ]
    },

    # Recombined is sometimes called as Reservoir Fluid or Monophasic
    "recombined_fluid_mw": 30.2, # reservoir fluid MW
    "recombined_fluid_gor": 12200.8, # Gas oil ratio or gas liquid ratio (GLR) or Rs
    "recombined_fluid_gor_unit": "scf/STB", # scf/STB, Sm3/Sm3, Sm3/m3, scf/bbl
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.084,
                "mass_amount": 0.024
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 3.509,
                "mass_amount": 1.555
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 39.466,
                "mass_amount": 6.376
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 4.9,
                "mass_amount": 1.484
            }
        ]
    }
}
     - 1.4.3 If the page contains a Constant Composition Expansion (CCE) or Constant Mass Expansion (CME) table:
       - Identify measurement units for parameters.
       - Always put as "CCE" not "CME"
       - Extract data and structure into the "experiments" JSON key.
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Stages 'order' key must always start from 0
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column name | Key
       --------|-----------
       Relative Volume (column) | relative_total_volume
       Relative Volumes (Vs/Vs,BP) | relative_total_volume
       RLD (column) | relative_oil_volume
       % Liq/Sat (Vliq/Vsat) | relative_oil_volume

       Note: relative_oil_volume always null BEFORE the saturation_pressure=True

       - You must stick to the following units

        Variable | Unit
        --------|-----------
        relative_total_volume_unit | Vtot/Vsat

       Example JSON:


{
    "page" : ...,
    "sample_name": ...,
    "experiments": [
        {
            "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
            "sample_name": 1184,
            "name": "Constant Composition Expansion",
            "type": "CCE",
            "temperature": 106.0,
            "temperature_unit": "C",
            "pressure_unit": "psia",
            "relative_oil_volume_unit": "Vo/Vsat (%)",
            "single_phase_density_unit": "g/cm3",
            "relative_total_volume_unit": "Vtot/Vsat",
            "stages": [
                {
                    "pressure": 9000.0,
                    "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                    "relative_oil_volume": null,
                    "relative_total_volume": 0.79,
                    "single_phase_density": 0.422,
                    "z_factor": 1.407
                },
                // Other stages ...
                {
                    "pressure": 3011.0,
                    "is_saturation_pressure": false,
                    "relative_oil_volume": 14.37,
                    "relative_total_volume": 1.315,
                    "single_phase_density": null,
                    "z_factor": null
                }
            ]
        }
    ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) COMPOSITION:
       - You put the page in this category if you see keywords "Constant Volume Depletion" and chemical component
       - Please Read the WHOLE COLUMNS of TABLE
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true

       - If the columns like this: 2600 psia, 2010 psia, 1000 psia, Residual Oil
          - Put the pressures columns inside Liberated Gas schema
          - Put the Residual Oil column inside Final Stage Oil schema

       - Liberated Gas structure:
          - Put each of the "pressure" inside "stages" key
          - Put ALL the "components" and its "molar_amount" inside each "pressure" which it refers to

        Structure:

{
  "sample_name": null,
  "experiments": [
    {
      "sample_name": null,
      "continued": false,
      "saturation_pressure_type": "Dewpoint",
      "name": "Constant Volume Depletion",
      "type": "CVD",
      "temperature": 106.0,
      "temperature_unit": "C",

      # First type
      "liberated_gas_compositions": {
        "components": [
          {
            "input_name": "CO2",
            "mw": 44.01
          },
          {
            "input_name": "Other",
            "mw": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0
          }
        ],
        "stages": [
          {
            "pressure": 2600,
            "composition": [
              {
                "component_name": "CO2",
                "molar_amount": 0.305
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "C30+",
                "molar_amount": 0.087
              }
            ]
          },
          {
            "pressure": 1300,
            "composition": [
              {
                "component_name": "2M-C6",
                "molar_amount": 0.123
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "Toluene",
                "molar_amount": 0.037
              }
            ]
          }
        ]
      },

       - Residual Oil structure:
          - Put ALL the "components" and its "molar_amount" inside "composition" key
          - Get the "final_stage_oil_mw" from the last row of table if mentioning "MW"

        Structure:

      # Second type
      "final_stage_oil_mw": 100.14,
      "final_stage_oil_density": 630.0,
      "final_stage_oil_density_unit": "kg/m3",
      "stock_tank_oil_density": 630.0,
      "stock_tank_oil_density_unit": "kg/m3",
      "final_stage_oil_composition": {
        "components": [
          {
            "input_name": "CO2",
            "mw": null,
            "molar_amount": 0.213,
            "mass_amount": null
          },
          {
            "input_name": "Other",
            "mw": null,
            "molar_amount": null,
            "mass_amount": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0,
            "molar_amount": 0.553,
            "mass_amount": null
          }
        ]
      }
    }
  ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) PROPERTIES table:
       - You put into this category If you see Pressure as row and Physical Properties as column (No composition)
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column Name | Key
       --------|-----------
       Total Recovery (mole %) | cumulative_moles_removed
       Liq. Density (g/cc) | oil_density

        Example JSON:

      {
          "sample_name": ..., # Put sample ID here
          "experiments": [
              {
                  "sample_name": ...,
                  "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                  "name": "Constant Volume Depletion",
                  "type": "CVD",
                  "temperature": 106.0,
                  "temperature_unit": "C",
                  "pressure_unit": "psia",
                  "oil_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_viscosity_unit": "...", # "cP"
                  "relative_oil_volume_unit": "...", # "%"
                  "incremental_moles_removed_unit": "...", # "%"
                  "cumulative_moles_removed_unit": "...", # "%"

                  # Properties data
                  "stages": [
                      # Fill here if the table displays properties as row and pressure as column, or otherwise
                      {
                          "pressure": 4661.0,
                          "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                          "relative_oil_volume": 0.0,
                          "incremental_moles_removed": null, # "%"
                          "cumulative_moles_removed": 0.0,
                          "oil_density": null,
                          "gas_z_factor": 0.922,
                          "gas_specific_gravity": null,
                          "gas_density": 0.339,
                          "gas_viscosity": 0.042,
                          "gas_plus_fraction_mw": null,
                      },
                      {
                          // Other stages ...
                      }
                      {
                          "pressure": 1300.0,
                          "is_saturation_pressure": false,
                          "relative_oil_volume": 13.18,
                          "incremental_moles_removed": null,
                          "cumulative_moles_removed": 67.06,
                          "oil_density": 0.63,
                          "gas_z_factor": 0.874,
                          "gas_specific_gravity": null,
                          "gas_density": 0.075,
                          "gas_viscosity": 0.015,
                          "gas_plus_fraction_mw": null,
                      }
                  ]
              }
          ]
      }

     - 1.4.5 If the page contains a Multi-Stage Separator (MSS) or Three Stage Separator table:
       - If you see "Two Stage", "Three Stage", "Four Stage" Separator, it is MSS. But, "Single Stage" is NOT MSS
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Stock tank oil data: If the title mention stock tank or tank oil
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If you see "Pressure Atm. bara", it means "pressure": 1 (atmospheric pressure means 1 bara)
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON

        Exception:
       - If you find page with title "Bo and GOR from Three Stage Separator test during depletion using the results from Differential Liberation ...", DO NOT extract the data.

        Example JSON:
{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                    "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                    "name": "Multi-stage Separator",
                    "type": "MSS",
                    "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "Dodecanes Plus",
                            "mw": null
                        }
                    ],
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.7579
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0024
                                }
                            ]
                        },
                        {
                            "stage_number": 1,
                            "composition": [
                                {
                                    "stage_number": 1,
                                    "component_name": "C1",
                                    "molar_amount": 0.6791
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 1,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0022
                                }
                            ]
                        },
                        {
                            "stage_number": 2,
                            "composition": [
                                {
                                    "stage_number": 2,
                                    "component_name": "C1",
                                    "molar_amount": 0.1999
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 2,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.019
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Stock tank oil
                "stock_tank_oil_molecular_weight": 145.78,
                "stock_tank_oil_density": 0.7843,
                "stock_tank_oil_density_unit": "g/cm3",
                "stock_tank_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.013,
                            "mass_amount": 0.0107
                        }
                    ]
                },
                "pressure_unit": "psia",
                "temperature_unit": "F",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",

                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 3724.0,
                        "is_saturation_pressure": true,
                        "temperature": 230.0,
                        "gor": 1802.83,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.1783,
                        "oil_density": 0.5016,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "temperature": 60.0,
                        "gor": 0.0,
                        "liberated_gas": 1802.83,
                        "oil_fvf": 1.0,
                        "oil_density": 0.7843,
                        "gas_z_factor": 0.9892,
                        "gas_specific_gravity": 1.316,
                        "gas_density": null,
                        "gas_viscosity": null
                    }
                ]
            }
    ]
}


     - 1.4.6 If the page contains a Differential Liberation (DLE) or Differential Vaporization (DV) table:
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Residual oil data: If mention residual oil or final stage
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity
       gas-oil ratio solution** | gor

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON
       ** in "Gas-Oil Ratio" column if you find "solution" and "liberated", take the "solution" and put to "gor" key in JSON

        Example JSON:

{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                "name": "Differential Liberation Expansion",
                "type": "DLE",
                "temperature": 229.7,
                "temperature_unit": "F",
                "dle_experiment_type": "Standard DLE Experiment",

                # // First part, Liberated gas
                "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "N2",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "C7+",
                            "mw": 114.01
                        }
                    ],
                    # Fill here if the table displays component as row and pressure as column, or otherwise
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.6859 # Composition in mole percent
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0085
                                }
                            ]
                        },
                        {
                            // Other stages ...
                        },
                        {
                            "stage_number": 9,
                            "composition": [
                                {
                                    "stage_number": 9,
                                    "component_name": "C1",
                                    "molar_amount": 0.1309
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 9,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0629
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Residual oil
                "evolved_gas_specific_gravity": null,
                "evolved_gas_composition_id": null,
                "evolved_gas_composition": null,
                "average_residual_oil_mw": 179.43,
                "average_residual_oil_density": 0.8128,
                "average_residual_oil_density_unit": "g/cm3",
                "residual_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.019,
                            "mass_amount": 0.0127
                        }
                    ]
                },
                "pressure_unit": "psia",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",
                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 8513.0,
                        "is_saturation_pressure": true,
                        "gor": 2847.67,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.5407,
                        "oil_density": 0.5714,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "gor": 0.0,
                        "liberated_gas": 2847.67,
                        "oil_fvf": 1.0975,
                        "oil_density": 0.7471,
                        "gas_z_factor": 0.9887,
                        "gas_specific_gravity": 2.1686,
                        "gas_density": null,
                        "gas_viscosity": 0.00925
                    }
                ]
            }
    ]
}

     - 1.4.7 If the page contains a Viscosity experiment (VISCO) table:
       - Identify measurement units for parameters.
       - Viscosity table has pressure as y-axis and viscosities as x-axis
       - Extract viscosity data and structure into "experiments".
       - Never come up with new structures or keys, just fill up in the specified JSON schema.

        Example JSON:

{
    "page": ...,
    "sample_name": ...,
    "experiments": [
        {
            "name": "Oil Viscosity",
            "type": "VISCO",
            "temperature": 229.7,
            "temperature_unit": "F",
            "pressure_unit": "psia",
            "oil_viscosity_unit": "cP",
            "gas_viscosity_unit": "cP",
            "stages": [
                {
                    "visco_id": 1018,
                    "pressure": 5413.0,
                    "oil_viscosity": 0.088,
                    "gas_viscosity": null
                },
                {
                    // Other stages ...
                },
                {
                    "visco_id": 1018,
                    "pressure": 13.0,
                    "oil_viscosity": 0.749,
                    "gas_viscosity": 0.00925
                }
            ]
        }
    ]
}

2. If any summary data or descriptive information is found:
   - Include it as key "Other_information", outside the "experiments" key in JSON.

   Example JSON:
   {
       "solution_gas_oil_ratio": 100,
       "separator_volume_factor": 300,
       "solution_gas_oil_ratio_unit": "scf/stb",
       "separator_volume_factor_unit": "bbl",
       ......
   }

3. Finally, you must stick to the following units

Unit shown | Unit in JSON
--------|-----------
g/cc | g/cm3
mole% | %
Vol/Vol | Sm3/Sm3
scf/sep bbl | scf/bbl
kg/Sm3 | kg/m3
psi | psia
Air=1 | SG

4. If you find Figure in the page, DO NOT extract any data from it. Just extract the title into json.

  {
    "figure_title": "Plot of dewpoint pressure"
  }

5. Dealing with Paraffinic-Naphtenes-Aromatics (PNA) composition

In some cases, PNA can be reported in compositional table, DLE liberated gas, or MSS liberated gas.

For example:

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| n-Hexane          | 0.086   | 0.351     | 86.2  |
| iso-Paraffins     | 0.154   | 0.627     | 86.2  |
| Naphthenes        | 0.033   | 0.109     | 70.1  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |
| n-Heptane         | 0.014   | 0.067     | 100.2 |
| iso-Paraffins     | 0.038   | 0.181     | 100.2 |
| Naphthenes        | 0.116   | 0.476     | 86.6  |
| Aromatics         | 0.030   | 0.112     | 78.1  |

You see for every C6 total and C7 total, there are iso-Paraffins (P), Naphthenes (N), and Aromatics (A).

Remove these PNA, so you just have C6 total and C7 total.

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |

From here, you just extract into corresponding JSON schema as defined in instructions 1 until 4
"
            }
          ]
        },
        {
          "role":"model",
          "parts":[
            {
              "text":"{
    "page": "46 of 119",
    "sample_name": "SR-02374",
    "measured_depth": 1991.3,
    "measured_depth_unit": "m",
    "transfer_temperature": 80.0,
    "transfer_temperature_unit": "C",
    "transfer_pressure": 400.0,
    "transfer_pressure_unit": "bara",
    "flashed_oil_temperature": 23.1,
    "flashed_oil_temperature_unit": "C",
    "recombined_fluid_gor": 56.2,
    "recombined_fluid_gor_unit": "Sm3/Sm3",
    "flashed_oil_density": 908.6,
    "flashed_oil_density_unit": "kg/m3",
    "flashed_gas_specific_gravity": 0.606,
    "flashed_gas_specific_gravity_unit": "SG",
    "flashed_oil_mw": 329.2,
    "flashed_oil_mw_unit": "g/mol",
    "flashed_oil_c7_plus_mw": 331.0,
    "flashed_oil_c7_plus_mw_unit": "g/mol",
    "flashed_oil_c7_plus_density": 909.0,
    "flashed_oil_c7_plus_density_unit": "kg/m3",
    "flashed_oil_c10_plus_mw": 334.0,
    "flashed_oil_c10_plus_mw_unit": "g/mol",
    "flashed_oil_c10_plus_density": 910.0,
    "flashed_oil_c10_plus_density_unit": "kg/m3",
    "Other_information": {
        "table_title": "Table 4.7-1 Results from Single Stage Separation of reservoir fluid, bottle no.: SR-02374, uncorrected for mud filtrate contamination",
        "standard_conditions_gas": "15 \u00b0C and 1.01325 bara",
        "standard_conditions_oil": "15 \u00b0C and atmospheric pressure"
    }
}"
            }
          ]
        }
    ]}
{"contents":[
        {
          "role":"user",
          "parts":[
            {
              "fileData":{
                "mimeType":"image/jpeg",
                "fileUri":"https://github.com/yohanesnuwara/sft-finetune-gemini/blob/main/images/RS-113242%20Preliminary%20Results_v4%20-%20%C3%98st%20Frigg_page-0049.jpg"
              }
            },
            {
              "text":"OCR the following page into complete JSON.

Your task is to parse and extract as many infomation as possible from the page and put into JSON like specified

Never come up with new structures or keys, just fill up in the specified JSON schema.

Page can be either full texts, full table, or texts with table.

1. Identify the type of page:
   - 1.1 If the page consists only of texts:

      Parse sentences into JSON and do not give full sentence or summary

      Example sentence:

      "Two sets of sample (CL01 & CL02) is transferred at 15 deg C and pressure 1 atm" (page A.1)

      JSON response

      {
          "page": "A.1",
          "conditioning": {
              "samples": ["CL01", "CL02"],
              "transfer_temp": 15,
              "transfer_temp_unit": "C",
              "transfer_pressure": 1,
              "transfer_pressure_unit": "atm"
              // ...
          }
      }

      Try to find these parameters inferred from "flash" keyword
      {
        "sep_pressure": ...,
        "sep_pressure_unit": ...,
        "sep_temperature": ...,
        "sep_temperature_unit": ...,
      }



   - 1.2 If the page consists of table of contents
     - Put each table title from the list in key "table_title"
     - Identify the "keyword" in the table title, into these categories
        - If mention composition then "composition"
        - If mention constant composition expansion or constant mass expansion then "CCE"
        - If mention constant volume depletion then "CVD"
        - If mention differential liberation expansion then "DLE"
        - If mention multistage separator then "MSS"
        - If mention viscosity then "VISCO"
     - Identify the "sample_name" from keywords like Cylinder, Sample, Chamber number, or if it is sample pair
     - Identify the "page_number"

    JSON response:

    {
        "page": "....",
        "list_content": [
            {
                "title": "...",
                "keyword": "composition",
                "sample_name": null,
                "page_number": 1
            },
            {
                "title": "...",
                "keyword": "CCE"
                "sample_name": "A01",
                "page_number": 2
            },
            {
                "title": "...",
                "keyword": "CVD",
                "sample_name": "A01+A02",
                "page_number": 3
            }
        ]
    }

   - 1.3 If the page consists of texts with table:
     - 1.3.1 If the page displays "sample inventory" or "sample summary" table:
       - This type of page can be recognized by structure of the table. If the table has Sample ID/name or Bottle no in the y-axis, and properties in the x-axis
       - Properties reported in this summary table such as sampling depth, GOR, density, molecular weight, reservoir temperature, reservoir pressure (Pres), viscosity
       - Do not confuse this table with experiment table
       - Extract data into the "sample_inventory" JSON schema.
       - Extract other relevant information into "Other_information".
       - If you do not find any of the keys, DO NOT create the key
       - Identify title of each table and decide the "type"
            - If mention MDT oil, then "type": "OFT"
            - If mention MDT water, then "type": "WATER"

       Example JSON:
        {
          "page": "...",
          "sample_inventory": {
            "data": [
              {
                "sample_name": "1.01",
                "type": "OFT", # put "OFT" if mention MDT oil, "WATER" if mention MDT water
                "sampling_date": "2023-04-26", # If mention Transfer Date
                "well_id": "23/1", # Well name
                "basin_id": null,
                "sub_basin_id": null,
                "field_id": "Volve", # Field name
                "field_segment_id": null,
                "formation_id": "Realgrunnen", # Formation name
                "formation_zone_id": null,
                "reservoir_pressure": 182.0,
                "reservoir_pressure_unit": "bara",
                "reservoir_temperature": 69.8,
                "reservoir_temperature_unit": "C",
                "true_vertical_depth": 1929.0, # If mention sampling depth m TVDSS (true vertical depth sub sea)
                "true_vertical_depth_unit": "m",
                "measured_depth": 1984.5, # If mention sampling depth m MD (measured depth)
                "measured_depth_unit": "m",
                "pressure_at_lab": 400.0,
                "pressure_at_lab_unit": "bara",
                "temperature_at_lab": 80.0,
                "temperature_at_lab_unit": "C",
                "pressure_when_sampled": 100,
                "pressure_when_sampled_unit": "bara",
                "temperature_when_sampled": 23,
                "temperature_when_sampled_unit": "C",
                "top_perforation_depth": 2000,
                "top_perforation_depth_unit": "m",
                "bottom_perforation_depth": 3000,
                "bottom_perforation_depth_unit": "m",
                "transfer_pressure": 450.0,
                "transfer_pressure_unit": "bara",
                "transfer_temperature": 80.0,
                "transfer_temperature_unit": "C",
                "drawdown_pressure": 100,
                "drawdown_pressure_unit": "bara",
                "flashed_oil_contamination": 2.0, # If mention Mud filtrate contamination in STO
                "flashed_oil_contamination": "mass%", # If the unit mentioned is Wt%
                "fluid_type": "Oil",
                "mud_base": "Oil", # put "Oil" if mention OBM, or "Water" if mention WBM
                //... # Other parameters
              },
              {
                "Sample Type": "REC", # If mention Recombined
                # Same as above
                //...
              }
            ]
          },
          "Other_information": {
            "remarks": "Additional details can be provided here."
          }
        }

   - 1.4 If the page consists of a table:
     - 1.4.1 If the page consists of an Information table or descriptions:
       - Extract physical parameters and values into a structured JSON format.
       - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
         - If found, set "sample_name" accordingly.
         - If not found, set "sample_name" to null.

       Important data:

       - If you find "density of stock tank oil", put into key "flashed_oil_density", then fill "flashed_oil_density_unit"
       - If you see gas oil ratio (GOR), put into key "recombined_fluid_gor", then fill "recombined_fluid_gor_unit

       Getting 'flashed_oil_temperature':
       If you see the following

        ```
        Separation conditions:    From:  80.0 °C and   400 bara
                                  To:    25.5 °C and   atm. pressure
        ```

       In this case, "flashed_oil_temperature": 25.5, "flashed_oil_temperature_unit": "C"
       Pick the number after "To:   " before "and atm.pressure"

       Example JSON:
        {
            "page": "...",
            "sample_name": "...",
            "parameter1": "...",
            "parameter1_unit": "...",
            "parameter2": "...",
            "parameter2_unit": "...",
            "parameter3": "...",
            "parameter4_unit": "...",

            # Important data
            "flashed_oil_density": ...,
            "flashed_oil_density_unit": "...",
            "flashed_oil_temperature": 20.5,
            "flashed_oil_temperature_unit": "C",
            "recombined_fluid_gor": ...,
            "recombined_fluid_gor_unit": "...",
            et cetera ...
        }

     - 1.4.2 If the page contains a Composition table :

        - Dynamically identify each fluid-type group by reading the top header row(s), matching these synonyms:
          - flashed_oil ↔ "Stock tank oil", "Flashed Liquid", "Stock tank oil"
          - flashed_gas ↔ "Stock tank gas", "Flashed gas"
          - recombined_fluid ↔ "Monophasic fluid", "Reservoir fluid"
        - Under each fluid-type header, locate its two sub-columns: one labeled "Mole %" → molar_amount, the other "Weight %" → mass_amount.
        - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
            - If found, set "sample_name" accordingly.
            - Sample name is just like ID consist of letter and number, without C10+ or C36+
            - If not found, set "sample_name" to null.
        - If the table title says "uncorrected" or "corrected", set "uncorrected": true/false.
        - Identify "last_component" from the final row label (e.g. "C36+"), include units on every top-level number, and fill only the keys in the prescribed schema—do not invent new ones.

        IMPORTANT!!!
        - In case there is blank cell in the table (value not reported)
        - If you do not find BOTH molar amount and mass amount of a component, do not extract it into JSON

        Example table with blanks:

      |Component         | Stock tank gas    | Stock tank oil    |  Reservoir fluid   | Mol weight  |
      |Mole%             | Weight% | Mole%   | Weight% | Mole%   |  Mole%   | Weight% |             |
      |Nitrogen          | 0.157   | 0.183   |         |         |  0.084   | 0.024   | 28.02       |
      |Carbon Dioxide    | 6.582   | 12.048  |         |         |  3.509   | 1.555   | 44.01       |
      |Hydrogen Sulphide | 0       | 0       |         |         |  0       | 0       | 34.08       |
      |Methane           | 73.927  | 49.324  | 0.115   | 0.01    |  39.466  | 6.376   | 16.04       |
      |Ethane            | 8.997   | 11.251  | 0.222   | 0.036   |  4.9     | 1.484   | 30.07       |


        Result JSON (referring to the table):

{
    "page": ...,
    "sample_name": "A001", # The name of sample
    "uncorrected": true, # false or null
    "last_component": "C10+",
    "flashed_oil_mw": 151.9, # oil molecular weight or MW
    "flashed_oil_density": 0.777, # oil density at stock-tank condition 15 degC
    "flashed_oil_density_unit": "g/cm3", # g/cm3, kg/m3
    "flashed_oil_temperature": 60.0, # temperature at flash
    "flashed_oil_temperature_unit": "F", # F, C, K, R
    "flashed_oil_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide molar_amount and mass_amount is null, so no need to extract
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 0.115,
                "mass_amount": 0.01
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 0.222,
                "mass_amount": 0.036
            }
        ]
    },
    "flashed_gas_mw": 23.4, # gas molecular weight or MW
    "flashed_gas_specific_gravity": 0.808, # also called relative density or ideal
    "flashed_gas_specific_gravity_unit": "SG", # if unit not mentioned then most likely SG
    "flashed_gas_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide has molar_amount and mass_amount, so extract it
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.157,
                "mass_amount": 0.183
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 6.582,
                "mass_amount": 12.048
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 73.997,
                "mass_amount": 49.324
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 8.997,
                "mass_amount": 11.251
            }
        ]
    },

    # Recombined is sometimes called as Reservoir Fluid or Monophasic
    "recombined_fluid_mw": 30.2, # reservoir fluid MW
    "recombined_fluid_gor": 12200.8, # Gas oil ratio or gas liquid ratio (GLR) or Rs
    "recombined_fluid_gor_unit": "scf/STB", # scf/STB, Sm3/Sm3, Sm3/m3, scf/bbl
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.084,
                "mass_amount": 0.024
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 3.509,
                "mass_amount": 1.555
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 39.466,
                "mass_amount": 6.376
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 4.9,
                "mass_amount": 1.484
            }
        ]
    }
}
     - 1.4.3 If the page contains a Constant Composition Expansion (CCE) or Constant Mass Expansion (CME) table:
       - Identify measurement units for parameters.
       - Always put as "CCE" not "CME"
       - Extract data and structure into the "experiments" JSON key.
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Stages 'order' key must always start from 0
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column name | Key
       --------|-----------
       Relative Volume (column) | relative_total_volume
       Relative Volumes (Vs/Vs,BP) | relative_total_volume
       RLD (column) | relative_oil_volume
       % Liq/Sat (Vliq/Vsat) | relative_oil_volume

       Note: relative_oil_volume always null BEFORE the saturation_pressure=True

       - You must stick to the following units

        Variable | Unit
        --------|-----------
        relative_total_volume_unit | Vtot/Vsat

       Example JSON:


{
    "page" : ...,
    "sample_name": ...,
    "experiments": [
        {
            "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
            "sample_name": 1184,
            "name": "Constant Composition Expansion",
            "type": "CCE",
            "temperature": 106.0,
            "temperature_unit": "C",
            "pressure_unit": "psia",
            "relative_oil_volume_unit": "Vo/Vsat (%)",
            "single_phase_density_unit": "g/cm3",
            "relative_total_volume_unit": "Vtot/Vsat",
            "stages": [
                {
                    "pressure": 9000.0,
                    "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                    "relative_oil_volume": null,
                    "relative_total_volume": 0.79,
                    "single_phase_density": 0.422,
                    "z_factor": 1.407
                },
                // Other stages ...
                {
                    "pressure": 3011.0,
                    "is_saturation_pressure": false,
                    "relative_oil_volume": 14.37,
                    "relative_total_volume": 1.315,
                    "single_phase_density": null,
                    "z_factor": null
                }
            ]
        }
    ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) COMPOSITION:
       - You put the page in this category if you see keywords "Constant Volume Depletion" and chemical component
       - Please Read the WHOLE COLUMNS of TABLE
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true

       - If the columns like this: 2600 psia, 2010 psia, 1000 psia, Residual Oil
          - Put the pressures columns inside Liberated Gas schema
          - Put the Residual Oil column inside Final Stage Oil schema

       - Liberated Gas structure:
          - Put each of the "pressure" inside "stages" key
          - Put ALL the "components" and its "molar_amount" inside each "pressure" which it refers to

        Structure:

{
  "sample_name": null,
  "experiments": [
    {
      "sample_name": null,
      "continued": false,
      "saturation_pressure_type": "Dewpoint",
      "name": "Constant Volume Depletion",
      "type": "CVD",
      "temperature": 106.0,
      "temperature_unit": "C",

      # First type
      "liberated_gas_compositions": {
        "components": [
          {
            "input_name": "CO2",
            "mw": 44.01
          },
          {
            "input_name": "Other",
            "mw": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0
          }
        ],
        "stages": [
          {
            "pressure": 2600,
            "composition": [
              {
                "component_name": "CO2",
                "molar_amount": 0.305
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "C30+",
                "molar_amount": 0.087
              }
            ]
          },
          {
            "pressure": 1300,
            "composition": [
              {
                "component_name": "2M-C6",
                "molar_amount": 0.123
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "Toluene",
                "molar_amount": 0.037
              }
            ]
          }
        ]
      },

       - Residual Oil structure:
          - Put ALL the "components" and its "molar_amount" inside "composition" key
          - Get the "final_stage_oil_mw" from the last row of table if mentioning "MW"

        Structure:

      # Second type
      "final_stage_oil_mw": 100.14,
      "final_stage_oil_density": 630.0,
      "final_stage_oil_density_unit": "kg/m3",
      "stock_tank_oil_density": 630.0,
      "stock_tank_oil_density_unit": "kg/m3",
      "final_stage_oil_composition": {
        "components": [
          {
            "input_name": "CO2",
            "mw": null,
            "molar_amount": 0.213,
            "mass_amount": null
          },
          {
            "input_name": "Other",
            "mw": null,
            "molar_amount": null,
            "mass_amount": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0,
            "molar_amount": 0.553,
            "mass_amount": null
          }
        ]
      }
    }
  ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) PROPERTIES table:
       - You put into this category If you see Pressure as row and Physical Properties as column (No composition)
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column Name | Key
       --------|-----------
       Total Recovery (mole %) | cumulative_moles_removed
       Liq. Density (g/cc) | oil_density

        Example JSON:

      {
          "sample_name": ..., # Put sample ID here
          "experiments": [
              {
                  "sample_name": ...,
                  "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                  "name": "Constant Volume Depletion",
                  "type": "CVD",
                  "temperature": 106.0,
                  "temperature_unit": "C",
                  "pressure_unit": "psia",
                  "oil_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_viscosity_unit": "...", # "cP"
                  "relative_oil_volume_unit": "...", # "%"
                  "incremental_moles_removed_unit": "...", # "%"
                  "cumulative_moles_removed_unit": "...", # "%"

                  # Properties data
                  "stages": [
                      # Fill here if the table displays properties as row and pressure as column, or otherwise
                      {
                          "pressure": 4661.0,
                          "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                          "relative_oil_volume": 0.0,
                          "incremental_moles_removed": null, # "%"
                          "cumulative_moles_removed": 0.0,
                          "oil_density": null,
                          "gas_z_factor": 0.922,
                          "gas_specific_gravity": null,
                          "gas_density": 0.339,
                          "gas_viscosity": 0.042,
                          "gas_plus_fraction_mw": null,
                      },
                      {
                          // Other stages ...
                      }
                      {
                          "pressure": 1300.0,
                          "is_saturation_pressure": false,
                          "relative_oil_volume": 13.18,
                          "incremental_moles_removed": null,
                          "cumulative_moles_removed": 67.06,
                          "oil_density": 0.63,
                          "gas_z_factor": 0.874,
                          "gas_specific_gravity": null,
                          "gas_density": 0.075,
                          "gas_viscosity": 0.015,
                          "gas_plus_fraction_mw": null,
                      }
                  ]
              }
          ]
      }

     - 1.4.5 If the page contains a Multi-Stage Separator (MSS) or Three Stage Separator table:
       - If you see "Two Stage", "Three Stage", "Four Stage" Separator, it is MSS. But, "Single Stage" is NOT MSS
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Stock tank oil data: If the title mention stock tank or tank oil
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If you see "Pressure Atm. bara", it means "pressure": 1 (atmospheric pressure means 1 bara)
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON

        Exception:
       - If you find page with title "Bo and GOR from Three Stage Separator test during depletion using the results from Differential Liberation ...", DO NOT extract the data.

        Example JSON:
{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                    "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                    "name": "Multi-stage Separator",
                    "type": "MSS",
                    "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "Dodecanes Plus",
                            "mw": null
                        }
                    ],
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.7579
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0024
                                }
                            ]
                        },
                        {
                            "stage_number": 1,
                            "composition": [
                                {
                                    "stage_number": 1,
                                    "component_name": "C1",
                                    "molar_amount": 0.6791
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 1,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0022
                                }
                            ]
                        },
                        {
                            "stage_number": 2,
                            "composition": [
                                {
                                    "stage_number": 2,
                                    "component_name": "C1",
                                    "molar_amount": 0.1999
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 2,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.019
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Stock tank oil
                "stock_tank_oil_molecular_weight": 145.78,
                "stock_tank_oil_density": 0.7843,
                "stock_tank_oil_density_unit": "g/cm3",
                "stock_tank_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.013,
                            "mass_amount": 0.0107
                        }
                    ]
                },
                "pressure_unit": "psia",
                "temperature_unit": "F",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",

                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 3724.0,
                        "is_saturation_pressure": true,
                        "temperature": 230.0,
                        "gor": 1802.83,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.1783,
                        "oil_density": 0.5016,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "temperature": 60.0,
                        "gor": 0.0,
                        "liberated_gas": 1802.83,
                        "oil_fvf": 1.0,
                        "oil_density": 0.7843,
                        "gas_z_factor": 0.9892,
                        "gas_specific_gravity": 1.316,
                        "gas_density": null,
                        "gas_viscosity": null
                    }
                ]
            }
    ]
}


     - 1.4.6 If the page contains a Differential Liberation (DLE) or Differential Vaporization (DV) table:
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Residual oil data: If mention residual oil or final stage
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity
       gas-oil ratio solution** | gor

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON
       ** in "Gas-Oil Ratio" column if you find "solution" and "liberated", take the "solution" and put to "gor" key in JSON

        Example JSON:

{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                "name": "Differential Liberation Expansion",
                "type": "DLE",
                "temperature": 229.7,
                "temperature_unit": "F",
                "dle_experiment_type": "Standard DLE Experiment",

                # // First part, Liberated gas
                "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "N2",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "C7+",
                            "mw": 114.01
                        }
                    ],
                    # Fill here if the table displays component as row and pressure as column, or otherwise
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.6859 # Composition in mole percent
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0085
                                }
                            ]
                        },
                        {
                            // Other stages ...
                        },
                        {
                            "stage_number": 9,
                            "composition": [
                                {
                                    "stage_number": 9,
                                    "component_name": "C1",
                                    "molar_amount": 0.1309
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 9,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0629
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Residual oil
                "evolved_gas_specific_gravity": null,
                "evolved_gas_composition_id": null,
                "evolved_gas_composition": null,
                "average_residual_oil_mw": 179.43,
                "average_residual_oil_density": 0.8128,
                "average_residual_oil_density_unit": "g/cm3",
                "residual_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.019,
                            "mass_amount": 0.0127
                        }
                    ]
                },
                "pressure_unit": "psia",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",
                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 8513.0,
                        "is_saturation_pressure": true,
                        "gor": 2847.67,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.5407,
                        "oil_density": 0.5714,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "gor": 0.0,
                        "liberated_gas": 2847.67,
                        "oil_fvf": 1.0975,
                        "oil_density": 0.7471,
                        "gas_z_factor": 0.9887,
                        "gas_specific_gravity": 2.1686,
                        "gas_density": null,
                        "gas_viscosity": 0.00925
                    }
                ]
            }
    ]
}

     - 1.4.7 If the page contains a Viscosity experiment (VISCO) table:
       - Identify measurement units for parameters.
       - Viscosity table has pressure as y-axis and viscosities as x-axis
       - Extract viscosity data and structure into "experiments".
       - Never come up with new structures or keys, just fill up in the specified JSON schema.

        Example JSON:

{
    "page": ...,
    "sample_name": ...,
    "experiments": [
        {
            "name": "Oil Viscosity",
            "type": "VISCO",
            "temperature": 229.7,
            "temperature_unit": "F",
            "pressure_unit": "psia",
            "oil_viscosity_unit": "cP",
            "gas_viscosity_unit": "cP",
            "stages": [
                {
                    "visco_id": 1018,
                    "pressure": 5413.0,
                    "oil_viscosity": 0.088,
                    "gas_viscosity": null
                },
                {
                    // Other stages ...
                },
                {
                    "visco_id": 1018,
                    "pressure": 13.0,
                    "oil_viscosity": 0.749,
                    "gas_viscosity": 0.00925
                }
            ]
        }
    ]
}

2. If any summary data or descriptive information is found:
   - Include it as key "Other_information", outside the "experiments" key in JSON.

   Example JSON:
   {
       "solution_gas_oil_ratio": 100,
       "separator_volume_factor": 300,
       "solution_gas_oil_ratio_unit": "scf/stb",
       "separator_volume_factor_unit": "bbl",
       ......
   }

3. Finally, you must stick to the following units

Unit shown | Unit in JSON
--------|-----------
g/cc | g/cm3
mole% | %
Vol/Vol | Sm3/Sm3
scf/sep bbl | scf/bbl
kg/Sm3 | kg/m3
psi | psia
Air=1 | SG

4. If you find Figure in the page, DO NOT extract any data from it. Just extract the title into json.

  {
    "figure_title": "Plot of dewpoint pressure"
  }

5. Dealing with Paraffinic-Naphtenes-Aromatics (PNA) composition

In some cases, PNA can be reported in compositional table, DLE liberated gas, or MSS liberated gas.

For example:

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| n-Hexane          | 0.086   | 0.351     | 86.2  |
| iso-Paraffins     | 0.154   | 0.627     | 86.2  |
| Naphthenes        | 0.033   | 0.109     | 70.1  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |
| n-Heptane         | 0.014   | 0.067     | 100.2 |
| iso-Paraffins     | 0.038   | 0.181     | 100.2 |
| Naphthenes        | 0.116   | 0.476     | 86.6  |
| Aromatics         | 0.030   | 0.112     | 78.1  |

You see for every C6 total and C7 total, there are iso-Paraffins (P), Naphthenes (N), and Aromatics (A).

Remove these PNA, so you just have C6 total and C7 total.

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |

From here, you just extract into corresponding JSON schema as defined in instructions 1 until 4
"
            }
          ]
        },
        {
          "role":"model",
          "parts":[
            {
              "text":"{
    "page": "49",
    "sample_name": "SR-02374",
    "uncorrected": true,
    "last_component": "C36+",
    "flashed_oil_mw": 329.2,
    "flashed_oil_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 0.185,
                "mass_amount": 0.009
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 0.197,
                "mass_amount": 0.018
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 0.03,
                "mass_amount": 0.004
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 0.006,
                "mass_amount": 0.001
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 0.017,
                "mass_amount": 0.003
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.009,
                "mass_amount": 0.002
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 0.005,
                "mass_amount": 0.001
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 0.009,
                "mass_amount": 0.002
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 0.076,
                "mass_amount": 0.02
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 0.139,
                "mass_amount": 0.04
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 0.409,
                "mass_amount": 0.138
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 1.085,
                "mass_amount": 0.409
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 2.206,
                "mass_amount": 0.898
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 2.754,
                "mass_amount": 1.23
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 3.723,
                "mass_amount": 1.821
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 5.073,
                "mass_amount": 2.697
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 6.601,
                "mass_amount": 3.81
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 6.246,
                "mass_amount": 3.909
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 5.4,
                "mass_amount": 3.642
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 4.86,
                "mass_amount": 3.499
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 4.608,
                "mass_amount": 3.514
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 4.322,
                "mass_amount": 3.453
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 3.875,
                "mass_amount": 3.237
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 3.611,
                "mass_amount": 3.192
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 3.286,
                "mass_amount": 2.995
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 3.016,
                "mass_amount": 2.859
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 2.708,
                "mass_amount": 2.666
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 2.423,
                "mass_amount": 2.481
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 2.274,
                "mass_amount": 2.411
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 2.162,
                "mass_amount": 2.365
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 2.101,
                "mass_amount": 2.375
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 1.949,
                "mass_amount": 2.262
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 1.889,
                "mass_amount": 2.261
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 1.685,
                "mass_amount": 2.068
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 1.51,
                "mass_amount": 1.904
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 1.361,
                "mass_amount": 1.761
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 1.244,
                "mass_amount": 1.652
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 1.161,
                "mass_amount": 1.569
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 15.786,
                "mass_amount": 32.822
            }
        ]
    },
    "flashed_gas_mw": 17.56,
    "flashed_gas_specific_gravity": 0.606,
    "flashed_gas_specific_gravity_unit": "SG",
    "flashed_gas_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": 0.261,
                "mass_amount": 0.417
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": 0.209,
                "mass_amount": 0.525
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 90.362,
                "mass_amount": 82.565
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 8.632,
                "mass_amount": 14.783
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 0.358,
                "mass_amount": 0.9
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 0.034,
                "mass_amount": 0.111
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 0.041,
                "mass_amount": 0.137
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.018,
                "mass_amount": 0.075
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 0.004,
                "mass_amount": 0.016
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 0.005,
                "mass_amount": 0.021
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 0.022,
                "mass_amount": 0.105
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 0.015,
                "mass_amount": 0.079
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 0.013,
                "mass_amount": 0.08
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 0.013,
                "mass_amount": 0.088
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 0.01,
                "mass_amount": 0.079
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 0.002,
                "mass_amount": 0.018
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            }
        ]
    },
    "recombined_fluid_mw": 185.0,
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": 0.121,
                "mass_amount": 0.018
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": 0.097,
                "mass_amount": 0.023
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 41.908,
                "mass_amount": 3.634
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 4.1,
                "mass_amount": 0.666
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 0.182,
                "mass_amount": 0.043
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 0.019,
                "mass_amount": 0.006
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 0.028,
                "mass_amount": 0.009
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.013,
                "mass_amount": 0.005
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 0.004,
                "mass_amount": 0.002
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 0.007,
                "mass_amount": 0.003
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 0.051,
                "mass_amount": 0.024
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 0.081,
                "mass_amount": 0.042
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 0.226,
                "mass_amount": 0.135
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 0.589,
                "mass_amount": 0.395
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 1.19,
                "mass_amount": 0.862
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 1.481,
                "mass_amount": 1.177
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 2.0,
                "mass_amount": 1.741
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 2.726,
                "mass_amount": 2.579
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 3.547,
                "mass_amount": 3.643
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 3.356,
                "mass_amount": 3.737
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 2.902,
                "mass_amount": 3.482
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 2.611,
                "mass_amount": 3.345
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 2.476,
                "mass_amount": 3.36
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 2.322,
                "mass_amount": 3.301
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 2.082,
                "mass_amount": 3.095
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 1.94,
                "mass_amount": 3.052
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 1.766,
                "mass_amount": 2.863
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 1.621,
                "mass_amount": 2.733
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 1.455,
                "mass_amount": 2.549
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 1.302,
                "mass_amount": 2.372
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 1.222,
                "mass_amount": 2.305
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 1.162,
                "mass_amount": 2.261
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 1.129,
                "mass_amount": 2.271
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 1.047,
                "mass_amount": 2.163
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 1.015,
                "mass_amount": 2.162
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 0.905,
                "mass_amount": 1.977
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 0.811,
                "mass_amount": 1.82
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 0.731,
                "mass_amount": 1.684
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 0.669,
                "mass_amount": 1.579
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 0.624,
                "mass_amount": 1.5
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 8.482,
                "mass_amount": 31.381
            }
        ]
    }
}"
            }
          ]
        }
    ]}
{"contents":[
        {
          "role":"user",
          "parts":[
            {
              "fileData":{
                "mimeType":"image/jpeg",
                "fileUri":"https://github.com/yohanesnuwara/sft-finetune-gemini/blob/main/images/RS-113242%20Preliminary%20Results_v4%20-%20%C3%98st%20Frigg_page-0054.jpg"
              }
            },
            {
              "text":"OCR the following page into complete JSON.

Your task is to parse and extract as many infomation as possible from the page and put into JSON like specified

Never come up with new structures or keys, just fill up in the specified JSON schema.

Page can be either full texts, full table, or texts with table.

1. Identify the type of page:
   - 1.1 If the page consists only of texts:

      Parse sentences into JSON and do not give full sentence or summary

      Example sentence:

      "Two sets of sample (CL01 & CL02) is transferred at 15 deg C and pressure 1 atm" (page A.1)

      JSON response

      {
          "page": "A.1",
          "conditioning": {
              "samples": ["CL01", "CL02"],
              "transfer_temp": 15,
              "transfer_temp_unit": "C",
              "transfer_pressure": 1,
              "transfer_pressure_unit": "atm"
              // ...
          }
      }

      Try to find these parameters inferred from "flash" keyword
      {
        "sep_pressure": ...,
        "sep_pressure_unit": ...,
        "sep_temperature": ...,
        "sep_temperature_unit": ...,
      }



   - 1.2 If the page consists of table of contents
     - Put each table title from the list in key "table_title"
     - Identify the "keyword" in the table title, into these categories
        - If mention composition then "composition"
        - If mention constant composition expansion or constant mass expansion then "CCE"
        - If mention constant volume depletion then "CVD"
        - If mention differential liberation expansion then "DLE"
        - If mention multistage separator then "MSS"
        - If mention viscosity then "VISCO"
     - Identify the "sample_name" from keywords like Cylinder, Sample, Chamber number, or if it is sample pair
     - Identify the "page_number"

    JSON response:

    {
        "page": "....",
        "list_content": [
            {
                "title": "...",
                "keyword": "composition",
                "sample_name": null,
                "page_number": 1
            },
            {
                "title": "...",
                "keyword": "CCE"
                "sample_name": "A01",
                "page_number": 2
            },
            {
                "title": "...",
                "keyword": "CVD",
                "sample_name": "A01+A02",
                "page_number": 3
            }
        ]
    }

   - 1.3 If the page consists of texts with table:
     - 1.3.1 If the page displays "sample inventory" or "sample summary" table:
       - This type of page can be recognized by structure of the table. If the table has Sample ID/name or Bottle no in the y-axis, and properties in the x-axis
       - Properties reported in this summary table such as sampling depth, GOR, density, molecular weight, reservoir temperature, reservoir pressure (Pres), viscosity
       - Do not confuse this table with experiment table
       - Extract data into the "sample_inventory" JSON schema.
       - Extract other relevant information into "Other_information".
       - If you do not find any of the keys, DO NOT create the key
       - Identify title of each table and decide the "type"
            - If mention MDT oil, then "type": "OFT"
            - If mention MDT water, then "type": "WATER"

       Example JSON:
        {
          "page": "...",
          "sample_inventory": {
            "data": [
              {
                "sample_name": "1.01",
                "type": "OFT", # put "OFT" if mention MDT oil, "WATER" if mention MDT water
                "sampling_date": "2023-04-26", # If mention Transfer Date
                "well_id": "23/1", # Well name
                "basin_id": null,
                "sub_basin_id": null,
                "field_id": "Volve", # Field name
                "field_segment_id": null,
                "formation_id": "Realgrunnen", # Formation name
                "formation_zone_id": null,
                "reservoir_pressure": 182.0,
                "reservoir_pressure_unit": "bara",
                "reservoir_temperature": 69.8,
                "reservoir_temperature_unit": "C",
                "true_vertical_depth": 1929.0, # If mention sampling depth m TVDSS (true vertical depth sub sea)
                "true_vertical_depth_unit": "m",
                "measured_depth": 1984.5, # If mention sampling depth m MD (measured depth)
                "measured_depth_unit": "m",
                "pressure_at_lab": 400.0,
                "pressure_at_lab_unit": "bara",
                "temperature_at_lab": 80.0,
                "temperature_at_lab_unit": "C",
                "pressure_when_sampled": 100,
                "pressure_when_sampled_unit": "bara",
                "temperature_when_sampled": 23,
                "temperature_when_sampled_unit": "C",
                "top_perforation_depth": 2000,
                "top_perforation_depth_unit": "m",
                "bottom_perforation_depth": 3000,
                "bottom_perforation_depth_unit": "m",
                "transfer_pressure": 450.0,
                "transfer_pressure_unit": "bara",
                "transfer_temperature": 80.0,
                "transfer_temperature_unit": "C",
                "drawdown_pressure": 100,
                "drawdown_pressure_unit": "bara",
                "flashed_oil_contamination": 2.0, # If mention Mud filtrate contamination in STO
                "flashed_oil_contamination": "mass%", # If the unit mentioned is Wt%
                "fluid_type": "Oil",
                "mud_base": "Oil", # put "Oil" if mention OBM, or "Water" if mention WBM
                //... # Other parameters
              },
              {
                "Sample Type": "REC", # If mention Recombined
                # Same as above
                //...
              }
            ]
          },
          "Other_information": {
            "remarks": "Additional details can be provided here."
          }
        }

   - 1.4 If the page consists of a table:
     - 1.4.1 If the page consists of an Information table or descriptions:
       - Extract physical parameters and values into a structured JSON format.
       - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
         - If found, set "sample_name" accordingly.
         - If not found, set "sample_name" to null.

       Important data:

       - If you find "density of stock tank oil", put into key "flashed_oil_density", then fill "flashed_oil_density_unit"
       - If you see gas oil ratio (GOR), put into key "recombined_fluid_gor", then fill "recombined_fluid_gor_unit

       Getting 'flashed_oil_temperature':
       If you see the following

        ```
        Separation conditions:    From:  80.0 °C and   400 bara
                                  To:    25.5 °C and   atm. pressure
        ```

       In this case, "flashed_oil_temperature": 25.5, "flashed_oil_temperature_unit": "C"
       Pick the number after "To:   " before "and atm.pressure"

       Example JSON:
        {
            "page": "...",
            "sample_name": "...",
            "parameter1": "...",
            "parameter1_unit": "...",
            "parameter2": "...",
            "parameter2_unit": "...",
            "parameter3": "...",
            "parameter4_unit": "...",

            # Important data
            "flashed_oil_density": ...,
            "flashed_oil_density_unit": "...",
            "flashed_oil_temperature": 20.5,
            "flashed_oil_temperature_unit": "C",
            "recombined_fluid_gor": ...,
            "recombined_fluid_gor_unit": "...",
            et cetera ...
        }

     - 1.4.2 If the page contains a Composition table :

        - Dynamically identify each fluid-type group by reading the top header row(s), matching these synonyms:
          - flashed_oil ↔ "Stock tank oil", "Flashed Liquid", "Stock tank oil"
          - flashed_gas ↔ "Stock tank gas", "Flashed gas"
          - recombined_fluid ↔ "Monophasic fluid", "Reservoir fluid"
        - Under each fluid-type header, locate its two sub-columns: one labeled "Mole %" → molar_amount, the other "Weight %" → mass_amount.
        - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
            - If found, set "sample_name" accordingly.
            - Sample name is just like ID consist of letter and number, without C10+ or C36+
            - If not found, set "sample_name" to null.
        - If the table title says "uncorrected" or "corrected", set "uncorrected": true/false.
        - Identify "last_component" from the final row label (e.g. "C36+"), include units on every top-level number, and fill only the keys in the prescribed schema—do not invent new ones.

        IMPORTANT!!!
        - In case there is blank cell in the table (value not reported)
        - If you do not find BOTH molar amount and mass amount of a component, do not extract it into JSON

        Example table with blanks:

      |Component         | Stock tank gas    | Stock tank oil    |  Reservoir fluid   | Mol weight  |
      |Mole%             | Weight% | Mole%   | Weight% | Mole%   |  Mole%   | Weight% |             |
      |Nitrogen          | 0.157   | 0.183   |         |         |  0.084   | 0.024   | 28.02       |
      |Carbon Dioxide    | 6.582   | 12.048  |         |         |  3.509   | 1.555   | 44.01       |
      |Hydrogen Sulphide | 0       | 0       |         |         |  0       | 0       | 34.08       |
      |Methane           | 73.927  | 49.324  | 0.115   | 0.01    |  39.466  | 6.376   | 16.04       |
      |Ethane            | 8.997   | 11.251  | 0.222   | 0.036   |  4.9     | 1.484   | 30.07       |


        Result JSON (referring to the table):

{
    "page": ...,
    "sample_name": "A001", # The name of sample
    "uncorrected": true, # false or null
    "last_component": "C10+",
    "flashed_oil_mw": 151.9, # oil molecular weight or MW
    "flashed_oil_density": 0.777, # oil density at stock-tank condition 15 degC
    "flashed_oil_density_unit": "g/cm3", # g/cm3, kg/m3
    "flashed_oil_temperature": 60.0, # temperature at flash
    "flashed_oil_temperature_unit": "F", # F, C, K, R
    "flashed_oil_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide molar_amount and mass_amount is null, so no need to extract
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 0.115,
                "mass_amount": 0.01
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 0.222,
                "mass_amount": 0.036
            }
        ]
    },
    "flashed_gas_mw": 23.4, # gas molecular weight or MW
    "flashed_gas_specific_gravity": 0.808, # also called relative density or ideal
    "flashed_gas_specific_gravity_unit": "SG", # if unit not mentioned then most likely SG
    "flashed_gas_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide has molar_amount and mass_amount, so extract it
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.157,
                "mass_amount": 0.183
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 6.582,
                "mass_amount": 12.048
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 73.997,
                "mass_amount": 49.324
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 8.997,
                "mass_amount": 11.251
            }
        ]
    },

    # Recombined is sometimes called as Reservoir Fluid or Monophasic
    "recombined_fluid_mw": 30.2, # reservoir fluid MW
    "recombined_fluid_gor": 12200.8, # Gas oil ratio or gas liquid ratio (GLR) or Rs
    "recombined_fluid_gor_unit": "scf/STB", # scf/STB, Sm3/Sm3, Sm3/m3, scf/bbl
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.084,
                "mass_amount": 0.024
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 3.509,
                "mass_amount": 1.555
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 39.466,
                "mass_amount": 6.376
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 4.9,
                "mass_amount": 1.484
            }
        ]
    }
}
     - 1.4.3 If the page contains a Constant Composition Expansion (CCE) or Constant Mass Expansion (CME) table:
       - Identify measurement units for parameters.
       - Always put as "CCE" not "CME"
       - Extract data and structure into the "experiments" JSON key.
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Stages 'order' key must always start from 0
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column name | Key
       --------|-----------
       Relative Volume (column) | relative_total_volume
       Relative Volumes (Vs/Vs,BP) | relative_total_volume
       RLD (column) | relative_oil_volume
       % Liq/Sat (Vliq/Vsat) | relative_oil_volume

       Note: relative_oil_volume always null BEFORE the saturation_pressure=True

       - You must stick to the following units

        Variable | Unit
        --------|-----------
        relative_total_volume_unit | Vtot/Vsat

       Example JSON:


{
    "page" : ...,
    "sample_name": ...,
    "experiments": [
        {
            "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
            "sample_name": 1184,
            "name": "Constant Composition Expansion",
            "type": "CCE",
            "temperature": 106.0,
            "temperature_unit": "C",
            "pressure_unit": "psia",
            "relative_oil_volume_unit": "Vo/Vsat (%)",
            "single_phase_density_unit": "g/cm3",
            "relative_total_volume_unit": "Vtot/Vsat",
            "stages": [
                {
                    "pressure": 9000.0,
                    "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                    "relative_oil_volume": null,
                    "relative_total_volume": 0.79,
                    "single_phase_density": 0.422,
                    "z_factor": 1.407
                },
                // Other stages ...
                {
                    "pressure": 3011.0,
                    "is_saturation_pressure": false,
                    "relative_oil_volume": 14.37,
                    "relative_total_volume": 1.315,
                    "single_phase_density": null,
                    "z_factor": null
                }
            ]
        }
    ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) COMPOSITION:
       - You put the page in this category if you see keywords "Constant Volume Depletion" and chemical component
       - Please Read the WHOLE COLUMNS of TABLE
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true

       - If the columns like this: 2600 psia, 2010 psia, 1000 psia, Residual Oil
          - Put the pressures columns inside Liberated Gas schema
          - Put the Residual Oil column inside Final Stage Oil schema

       - Liberated Gas structure:
          - Put each of the "pressure" inside "stages" key
          - Put ALL the "components" and its "molar_amount" inside each "pressure" which it refers to

        Structure:

{
  "sample_name": null,
  "experiments": [
    {
      "sample_name": null,
      "continued": false,
      "saturation_pressure_type": "Dewpoint",
      "name": "Constant Volume Depletion",
      "type": "CVD",
      "temperature": 106.0,
      "temperature_unit": "C",

      # First type
      "liberated_gas_compositions": {
        "components": [
          {
            "input_name": "CO2",
            "mw": 44.01
          },
          {
            "input_name": "Other",
            "mw": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0
          }
        ],
        "stages": [
          {
            "pressure": 2600,
            "composition": [
              {
                "component_name": "CO2",
                "molar_amount": 0.305
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "C30+",
                "molar_amount": 0.087
              }
            ]
          },
          {
            "pressure": 1300,
            "composition": [
              {
                "component_name": "2M-C6",
                "molar_amount": 0.123
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "Toluene",
                "molar_amount": 0.037
              }
            ]
          }
        ]
      },

       - Residual Oil structure:
          - Put ALL the "components" and its "molar_amount" inside "composition" key
          - Get the "final_stage_oil_mw" from the last row of table if mentioning "MW"

        Structure:

      # Second type
      "final_stage_oil_mw": 100.14,
      "final_stage_oil_density": 630.0,
      "final_stage_oil_density_unit": "kg/m3",
      "stock_tank_oil_density": 630.0,
      "stock_tank_oil_density_unit": "kg/m3",
      "final_stage_oil_composition": {
        "components": [
          {
            "input_name": "CO2",
            "mw": null,
            "molar_amount": 0.213,
            "mass_amount": null
          },
          {
            "input_name": "Other",
            "mw": null,
            "molar_amount": null,
            "mass_amount": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0,
            "molar_amount": 0.553,
            "mass_amount": null
          }
        ]
      }
    }
  ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) PROPERTIES table:
       - You put into this category If you see Pressure as row and Physical Properties as column (No composition)
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column Name | Key
       --------|-----------
       Total Recovery (mole %) | cumulative_moles_removed
       Liq. Density (g/cc) | oil_density

        Example JSON:

      {
          "sample_name": ..., # Put sample ID here
          "experiments": [
              {
                  "sample_name": ...,
                  "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                  "name": "Constant Volume Depletion",
                  "type": "CVD",
                  "temperature": 106.0,
                  "temperature_unit": "C",
                  "pressure_unit": "psia",
                  "oil_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_viscosity_unit": "...", # "cP"
                  "relative_oil_volume_unit": "...", # "%"
                  "incremental_moles_removed_unit": "...", # "%"
                  "cumulative_moles_removed_unit": "...", # "%"

                  # Properties data
                  "stages": [
                      # Fill here if the table displays properties as row and pressure as column, or otherwise
                      {
                          "pressure": 4661.0,
                          "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                          "relative_oil_volume": 0.0,
                          "incremental_moles_removed": null, # "%"
                          "cumulative_moles_removed": 0.0,
                          "oil_density": null,
                          "gas_z_factor": 0.922,
                          "gas_specific_gravity": null,
                          "gas_density": 0.339,
                          "gas_viscosity": 0.042,
                          "gas_plus_fraction_mw": null,
                      },
                      {
                          // Other stages ...
                      }
                      {
                          "pressure": 1300.0,
                          "is_saturation_pressure": false,
                          "relative_oil_volume": 13.18,
                          "incremental_moles_removed": null,
                          "cumulative_moles_removed": 67.06,
                          "oil_density": 0.63,
                          "gas_z_factor": 0.874,
                          "gas_specific_gravity": null,
                          "gas_density": 0.075,
                          "gas_viscosity": 0.015,
                          "gas_plus_fraction_mw": null,
                      }
                  ]
              }
          ]
      }

     - 1.4.5 If the page contains a Multi-Stage Separator (MSS) or Three Stage Separator table:
       - If you see "Two Stage", "Three Stage", "Four Stage" Separator, it is MSS. But, "Single Stage" is NOT MSS
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Stock tank oil data: If the title mention stock tank or tank oil
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If you see "Pressure Atm. bara", it means "pressure": 1 (atmospheric pressure means 1 bara)
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON

        Exception:
       - If you find page with title "Bo and GOR from Three Stage Separator test during depletion using the results from Differential Liberation ...", DO NOT extract the data.

        Example JSON:
{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                    "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                    "name": "Multi-stage Separator",
                    "type": "MSS",
                    "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "Dodecanes Plus",
                            "mw": null
                        }
                    ],
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.7579
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0024
                                }
                            ]
                        },
                        {
                            "stage_number": 1,
                            "composition": [
                                {
                                    "stage_number": 1,
                                    "component_name": "C1",
                                    "molar_amount": 0.6791
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 1,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0022
                                }
                            ]
                        },
                        {
                            "stage_number": 2,
                            "composition": [
                                {
                                    "stage_number": 2,
                                    "component_name": "C1",
                                    "molar_amount": 0.1999
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 2,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.019
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Stock tank oil
                "stock_tank_oil_molecular_weight": 145.78,
                "stock_tank_oil_density": 0.7843,
                "stock_tank_oil_density_unit": "g/cm3",
                "stock_tank_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.013,
                            "mass_amount": 0.0107
                        }
                    ]
                },
                "pressure_unit": "psia",
                "temperature_unit": "F",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",

                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 3724.0,
                        "is_saturation_pressure": true,
                        "temperature": 230.0,
                        "gor": 1802.83,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.1783,
                        "oil_density": 0.5016,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "temperature": 60.0,
                        "gor": 0.0,
                        "liberated_gas": 1802.83,
                        "oil_fvf": 1.0,
                        "oil_density": 0.7843,
                        "gas_z_factor": 0.9892,
                        "gas_specific_gravity": 1.316,
                        "gas_density": null,
                        "gas_viscosity": null
                    }
                ]
            }
    ]
}


     - 1.4.6 If the page contains a Differential Liberation (DLE) or Differential Vaporization (DV) table:
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Residual oil data: If mention residual oil or final stage
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity
       gas-oil ratio solution** | gor

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON
       ** in "Gas-Oil Ratio" column if you find "solution" and "liberated", take the "solution" and put to "gor" key in JSON

        Example JSON:

{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                "name": "Differential Liberation Expansion",
                "type": "DLE",
                "temperature": 229.7,
                "temperature_unit": "F",
                "dle_experiment_type": "Standard DLE Experiment",

                # // First part, Liberated gas
                "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "N2",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "C7+",
                            "mw": 114.01
                        }
                    ],
                    # Fill here if the table displays component as row and pressure as column, or otherwise
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.6859 # Composition in mole percent
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0085
                                }
                            ]
                        },
                        {
                            // Other stages ...
                        },
                        {
                            "stage_number": 9,
                            "composition": [
                                {
                                    "stage_number": 9,
                                    "component_name": "C1",
                                    "molar_amount": 0.1309
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 9,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0629
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Residual oil
                "evolved_gas_specific_gravity": null,
                "evolved_gas_composition_id": null,
                "evolved_gas_composition": null,
                "average_residual_oil_mw": 179.43,
                "average_residual_oil_density": 0.8128,
                "average_residual_oil_density_unit": "g/cm3",
                "residual_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.019,
                            "mass_amount": 0.0127
                        }
                    ]
                },
                "pressure_unit": "psia",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",
                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 8513.0,
                        "is_saturation_pressure": true,
                        "gor": 2847.67,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.5407,
                        "oil_density": 0.5714,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "gor": 0.0,
                        "liberated_gas": 2847.67,
                        "oil_fvf": 1.0975,
                        "oil_density": 0.7471,
                        "gas_z_factor": 0.9887,
                        "gas_specific_gravity": 2.1686,
                        "gas_density": null,
                        "gas_viscosity": 0.00925
                    }
                ]
            }
    ]
}

     - 1.4.7 If the page contains a Viscosity experiment (VISCO) table:
       - Identify measurement units for parameters.
       - Viscosity table has pressure as y-axis and viscosities as x-axis
       - Extract viscosity data and structure into "experiments".
       - Never come up with new structures or keys, just fill up in the specified JSON schema.

        Example JSON:

{
    "page": ...,
    "sample_name": ...,
    "experiments": [
        {
            "name": "Oil Viscosity",
            "type": "VISCO",
            "temperature": 229.7,
            "temperature_unit": "F",
            "pressure_unit": "psia",
            "oil_viscosity_unit": "cP",
            "gas_viscosity_unit": "cP",
            "stages": [
                {
                    "visco_id": 1018,
                    "pressure": 5413.0,
                    "oil_viscosity": 0.088,
                    "gas_viscosity": null
                },
                {
                    // Other stages ...
                },
                {
                    "visco_id": 1018,
                    "pressure": 13.0,
                    "oil_viscosity": 0.749,
                    "gas_viscosity": 0.00925
                }
            ]
        }
    ]
}

2. If any summary data or descriptive information is found:
   - Include it as key "Other_information", outside the "experiments" key in JSON.

   Example JSON:
   {
       "solution_gas_oil_ratio": 100,
       "separator_volume_factor": 300,
       "solution_gas_oil_ratio_unit": "scf/stb",
       "separator_volume_factor_unit": "bbl",
       ......
   }

3. Finally, you must stick to the following units

Unit shown | Unit in JSON
--------|-----------
g/cc | g/cm3
mole% | %
Vol/Vol | Sm3/Sm3
scf/sep bbl | scf/bbl
kg/Sm3 | kg/m3
psi | psia
Air=1 | SG

4. If you find Figure in the page, DO NOT extract any data from it. Just extract the title into json.

  {
    "figure_title": "Plot of dewpoint pressure"
  }

5. Dealing with Paraffinic-Naphtenes-Aromatics (PNA) composition

In some cases, PNA can be reported in compositional table, DLE liberated gas, or MSS liberated gas.

For example:

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| n-Hexane          | 0.086   | 0.351     | 86.2  |
| iso-Paraffins     | 0.154   | 0.627     | 86.2  |
| Naphthenes        | 0.033   | 0.109     | 70.1  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |
| n-Heptane         | 0.014   | 0.067     | 100.2 |
| iso-Paraffins     | 0.038   | 0.181     | 100.2 |
| Naphthenes        | 0.116   | 0.476     | 86.6  |
| Aromatics         | 0.030   | 0.112     | 78.1  |

You see for every C6 total and C7 total, there are iso-Paraffins (P), Naphthenes (N), and Aromatics (A).

Remove these PNA, so you just have C6 total and C7 total.

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |

From here, you just extract into corresponding JSON schema as defined in instructions 1 until 4
"
            }
          ]
        },
        {
          "role":"model",
          "parts":[
            {
              "text":"{
    "page": "Page 54 of 119",
    "sample_name": "WFL-01777",
    "sampling_depth": 1991.3,
    "sampling_depth_unit": "m MD",
    "flashed_oil_temperature": 25.5,
    "flashed_oil_temperature_unit": "C",
    "flashed_oil_pressure": 1.01325,
    "flashed_oil_pressure_unit": "bara",
    "recombined_fluid_gor": 58.8,
    "recombined_fluid_gor_unit": "Sm3/Sm3",
    "oil_fvf_reservoir_pressure": 1.142,
    "oil_fvf_reservoir_pressure_unit": "m3/Sm3",
    "oil_fvf_saturation_pressure": 1.143,
    "oil_fvf_saturation_pressure_unit": "m3/Sm3",
    "flashed_oil_density": 909.2,
    "flashed_oil_density_unit": "kg/m3",
    "flashed_oil_temperature_at_density": 15.0,
    "flashed_oil_temperature_at_density_unit": "C",
    "calculated_oil_density_at_pb": 833.9,
    "calculated_oil_density_at_pb_unit": "kg/m3",
    "gas_specific_gravity": 0.606,
    "gas_specific_gravity_unit": "SG",
    "flashed_oil_mw": 330.8,
    "flashed_oil_mw_unit": "g/mol",
    "flashed_oil_c7_plus_mw": 332.0,
    "flashed_oil_c7_plus_mw_unit": "g/mol",
    "flashed_oil_c7_plus_density": 910.0,
    "flashed_oil_c7_plus_density_unit": "kg/m3",
    "flashed_oil_c10_plus_mw": 335.0,
    "flashed_oil_c10_plus_mw_unit": "g/mol",
    "flashed_oil_c10_plus_density": 910.0,
    "flashed_oil_c10_plus_density_unit": "kg/m3",
    "oil_density_at_pb_by_pycnometer": 829.8,
    "oil_density_at_pb_by_pycnometer_unit": "kg/m3",
    "Other_information": {
        "unocorrected": true,
        "mud_filtrate_contamination": true,
        "standard_conditions_gas_temperature": 15.0,
        "standard_conditions_gas_temperature_unit": "C",
        "standard_conditions_gas_pressure": 1.01325,
        "standard_conditions_gas_pressure_unit": "bara",
        "standard_conditions_oil_temperature": 15.0,
        "standard_conditions_oil_temperature_unit": "C",
        "standard_conditions_oil_pressure": 1.01325,
        "standard_conditions_oil_pressure_unit": "bara"
    }
}"
            }
          ]
        }
    ]}
{"contents":[
        {
          "role":"user",
          "parts":[
            {
              "fileData":{
                "mimeType":"image/jpeg",
                "fileUri":"https://github.com/yohanesnuwara/sft-finetune-gemini/blob/main/images/RS-113242%20Preliminary%20Results_v4%20-%20%C3%98st%20Frigg_page-0057.jpg"
              }
            },
            {
              "text":"OCR the following page into complete JSON.

Your task is to parse and extract as many infomation as possible from the page and put into JSON like specified

Never come up with new structures or keys, just fill up in the specified JSON schema.

Page can be either full texts, full table, or texts with table.

1. Identify the type of page:
   - 1.1 If the page consists only of texts:

      Parse sentences into JSON and do not give full sentence or summary

      Example sentence:

      "Two sets of sample (CL01 & CL02) is transferred at 15 deg C and pressure 1 atm" (page A.1)

      JSON response

      {
          "page": "A.1",
          "conditioning": {
              "samples": ["CL01", "CL02"],
              "transfer_temp": 15,
              "transfer_temp_unit": "C",
              "transfer_pressure": 1,
              "transfer_pressure_unit": "atm"
              // ...
          }
      }

      Try to find these parameters inferred from "flash" keyword
      {
        "sep_pressure": ...,
        "sep_pressure_unit": ...,
        "sep_temperature": ...,
        "sep_temperature_unit": ...,
      }



   - 1.2 If the page consists of table of contents
     - Put each table title from the list in key "table_title"
     - Identify the "keyword" in the table title, into these categories
        - If mention composition then "composition"
        - If mention constant composition expansion or constant mass expansion then "CCE"
        - If mention constant volume depletion then "CVD"
        - If mention differential liberation expansion then "DLE"
        - If mention multistage separator then "MSS"
        - If mention viscosity then "VISCO"
     - Identify the "sample_name" from keywords like Cylinder, Sample, Chamber number, or if it is sample pair
     - Identify the "page_number"

    JSON response:

    {
        "page": "....",
        "list_content": [
            {
                "title": "...",
                "keyword": "composition",
                "sample_name": null,
                "page_number": 1
            },
            {
                "title": "...",
                "keyword": "CCE"
                "sample_name": "A01",
                "page_number": 2
            },
            {
                "title": "...",
                "keyword": "CVD",
                "sample_name": "A01+A02",
                "page_number": 3
            }
        ]
    }

   - 1.3 If the page consists of texts with table:
     - 1.3.1 If the page displays "sample inventory" or "sample summary" table:
       - This type of page can be recognized by structure of the table. If the table has Sample ID/name or Bottle no in the y-axis, and properties in the x-axis
       - Properties reported in this summary table such as sampling depth, GOR, density, molecular weight, reservoir temperature, reservoir pressure (Pres), viscosity
       - Do not confuse this table with experiment table
       - Extract data into the "sample_inventory" JSON schema.
       - Extract other relevant information into "Other_information".
       - If you do not find any of the keys, DO NOT create the key
       - Identify title of each table and decide the "type"
            - If mention MDT oil, then "type": "OFT"
            - If mention MDT water, then "type": "WATER"

       Example JSON:
        {
          "page": "...",
          "sample_inventory": {
            "data": [
              {
                "sample_name": "1.01",
                "type": "OFT", # put "OFT" if mention MDT oil, "WATER" if mention MDT water
                "sampling_date": "2023-04-26", # If mention Transfer Date
                "well_id": "23/1", # Well name
                "basin_id": null,
                "sub_basin_id": null,
                "field_id": "Volve", # Field name
                "field_segment_id": null,
                "formation_id": "Realgrunnen", # Formation name
                "formation_zone_id": null,
                "reservoir_pressure": 182.0,
                "reservoir_pressure_unit": "bara",
                "reservoir_temperature": 69.8,
                "reservoir_temperature_unit": "C",
                "true_vertical_depth": 1929.0, # If mention sampling depth m TVDSS (true vertical depth sub sea)
                "true_vertical_depth_unit": "m",
                "measured_depth": 1984.5, # If mention sampling depth m MD (measured depth)
                "measured_depth_unit": "m",
                "pressure_at_lab": 400.0,
                "pressure_at_lab_unit": "bara",
                "temperature_at_lab": 80.0,
                "temperature_at_lab_unit": "C",
                "pressure_when_sampled": 100,
                "pressure_when_sampled_unit": "bara",
                "temperature_when_sampled": 23,
                "temperature_when_sampled_unit": "C",
                "top_perforation_depth": 2000,
                "top_perforation_depth_unit": "m",
                "bottom_perforation_depth": 3000,
                "bottom_perforation_depth_unit": "m",
                "transfer_pressure": 450.0,
                "transfer_pressure_unit": "bara",
                "transfer_temperature": 80.0,
                "transfer_temperature_unit": "C",
                "drawdown_pressure": 100,
                "drawdown_pressure_unit": "bara",
                "flashed_oil_contamination": 2.0, # If mention Mud filtrate contamination in STO
                "flashed_oil_contamination": "mass%", # If the unit mentioned is Wt%
                "fluid_type": "Oil",
                "mud_base": "Oil", # put "Oil" if mention OBM, or "Water" if mention WBM
                //... # Other parameters
              },
              {
                "Sample Type": "REC", # If mention Recombined
                # Same as above
                //...
              }
            ]
          },
          "Other_information": {
            "remarks": "Additional details can be provided here."
          }
        }

   - 1.4 If the page consists of a table:
     - 1.4.1 If the page consists of an Information table or descriptions:
       - Extract physical parameters and values into a structured JSON format.
       - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
         - If found, set "sample_name" accordingly.
         - If not found, set "sample_name" to null.

       Important data:

       - If you find "density of stock tank oil", put into key "flashed_oil_density", then fill "flashed_oil_density_unit"
       - If you see gas oil ratio (GOR), put into key "recombined_fluid_gor", then fill "recombined_fluid_gor_unit

       Getting 'flashed_oil_temperature':
       If you see the following

        ```
        Separation conditions:    From:  80.0 °C and   400 bara
                                  To:    25.5 °C and   atm. pressure
        ```

       In this case, "flashed_oil_temperature": 25.5, "flashed_oil_temperature_unit": "C"
       Pick the number after "To:   " before "and atm.pressure"

       Example JSON:
        {
            "page": "...",
            "sample_name": "...",
            "parameter1": "...",
            "parameter1_unit": "...",
            "parameter2": "...",
            "parameter2_unit": "...",
            "parameter3": "...",
            "parameter4_unit": "...",

            # Important data
            "flashed_oil_density": ...,
            "flashed_oil_density_unit": "...",
            "flashed_oil_temperature": 20.5,
            "flashed_oil_temperature_unit": "C",
            "recombined_fluid_gor": ...,
            "recombined_fluid_gor_unit": "...",
            et cetera ...
        }

     - 1.4.2 If the page contains a Composition table :

        - Dynamically identify each fluid-type group by reading the top header row(s), matching these synonyms:
          - flashed_oil ↔ "Stock tank oil", "Flashed Liquid", "Stock tank oil"
          - flashed_gas ↔ "Stock tank gas", "Flashed gas"
          - recombined_fluid ↔ "Monophasic fluid", "Reservoir fluid"
        - Under each fluid-type header, locate its two sub-columns: one labeled "Mole %" → molar_amount, the other "Weight %" → mass_amount.
        - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
            - If found, set "sample_name" accordingly.
            - Sample name is just like ID consist of letter and number, without C10+ or C36+
            - If not found, set "sample_name" to null.
        - If the table title says "uncorrected" or "corrected", set "uncorrected": true/false.
        - Identify "last_component" from the final row label (e.g. "C36+"), include units on every top-level number, and fill only the keys in the prescribed schema—do not invent new ones.

        IMPORTANT!!!
        - In case there is blank cell in the table (value not reported)
        - If you do not find BOTH molar amount and mass amount of a component, do not extract it into JSON

        Example table with blanks:

      |Component         | Stock tank gas    | Stock tank oil    |  Reservoir fluid   | Mol weight  |
      |Mole%             | Weight% | Mole%   | Weight% | Mole%   |  Mole%   | Weight% |             |
      |Nitrogen          | 0.157   | 0.183   |         |         |  0.084   | 0.024   | 28.02       |
      |Carbon Dioxide    | 6.582   | 12.048  |         |         |  3.509   | 1.555   | 44.01       |
      |Hydrogen Sulphide | 0       | 0       |         |         |  0       | 0       | 34.08       |
      |Methane           | 73.927  | 49.324  | 0.115   | 0.01    |  39.466  | 6.376   | 16.04       |
      |Ethane            | 8.997   | 11.251  | 0.222   | 0.036   |  4.9     | 1.484   | 30.07       |


        Result JSON (referring to the table):

{
    "page": ...,
    "sample_name": "A001", # The name of sample
    "uncorrected": true, # false or null
    "last_component": "C10+",
    "flashed_oil_mw": 151.9, # oil molecular weight or MW
    "flashed_oil_density": 0.777, # oil density at stock-tank condition 15 degC
    "flashed_oil_density_unit": "g/cm3", # g/cm3, kg/m3
    "flashed_oil_temperature": 60.0, # temperature at flash
    "flashed_oil_temperature_unit": "F", # F, C, K, R
    "flashed_oil_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide molar_amount and mass_amount is null, so no need to extract
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 0.115,
                "mass_amount": 0.01
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 0.222,
                "mass_amount": 0.036
            }
        ]
    },
    "flashed_gas_mw": 23.4, # gas molecular weight or MW
    "flashed_gas_specific_gravity": 0.808, # also called relative density or ideal
    "flashed_gas_specific_gravity_unit": "SG", # if unit not mentioned then most likely SG
    "flashed_gas_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide has molar_amount and mass_amount, so extract it
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.157,
                "mass_amount": 0.183
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 6.582,
                "mass_amount": 12.048
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 73.997,
                "mass_amount": 49.324
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 8.997,
                "mass_amount": 11.251
            }
        ]
    },

    # Recombined is sometimes called as Reservoir Fluid or Monophasic
    "recombined_fluid_mw": 30.2, # reservoir fluid MW
    "recombined_fluid_gor": 12200.8, # Gas oil ratio or gas liquid ratio (GLR) or Rs
    "recombined_fluid_gor_unit": "scf/STB", # scf/STB, Sm3/Sm3, Sm3/m3, scf/bbl
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.084,
                "mass_amount": 0.024
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 3.509,
                "mass_amount": 1.555
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 39.466,
                "mass_amount": 6.376
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 4.9,
                "mass_amount": 1.484
            }
        ]
    }
}
     - 1.4.3 If the page contains a Constant Composition Expansion (CCE) or Constant Mass Expansion (CME) table:
       - Identify measurement units for parameters.
       - Always put as "CCE" not "CME"
       - Extract data and structure into the "experiments" JSON key.
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Stages 'order' key must always start from 0
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column name | Key
       --------|-----------
       Relative Volume (column) | relative_total_volume
       Relative Volumes (Vs/Vs,BP) | relative_total_volume
       RLD (column) | relative_oil_volume
       % Liq/Sat (Vliq/Vsat) | relative_oil_volume

       Note: relative_oil_volume always null BEFORE the saturation_pressure=True

       - You must stick to the following units

        Variable | Unit
        --------|-----------
        relative_total_volume_unit | Vtot/Vsat

       Example JSON:


{
    "page" : ...,
    "sample_name": ...,
    "experiments": [
        {
            "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
            "sample_name": 1184,
            "name": "Constant Composition Expansion",
            "type": "CCE",
            "temperature": 106.0,
            "temperature_unit": "C",
            "pressure_unit": "psia",
            "relative_oil_volume_unit": "Vo/Vsat (%)",
            "single_phase_density_unit": "g/cm3",
            "relative_total_volume_unit": "Vtot/Vsat",
            "stages": [
                {
                    "pressure": 9000.0,
                    "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                    "relative_oil_volume": null,
                    "relative_total_volume": 0.79,
                    "single_phase_density": 0.422,
                    "z_factor": 1.407
                },
                // Other stages ...
                {
                    "pressure": 3011.0,
                    "is_saturation_pressure": false,
                    "relative_oil_volume": 14.37,
                    "relative_total_volume": 1.315,
                    "single_phase_density": null,
                    "z_factor": null
                }
            ]
        }
    ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) COMPOSITION:
       - You put the page in this category if you see keywords "Constant Volume Depletion" and chemical component
       - Please Read the WHOLE COLUMNS of TABLE
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true

       - If the columns like this: 2600 psia, 2010 psia, 1000 psia, Residual Oil
          - Put the pressures columns inside Liberated Gas schema
          - Put the Residual Oil column inside Final Stage Oil schema

       - Liberated Gas structure:
          - Put each of the "pressure" inside "stages" key
          - Put ALL the "components" and its "molar_amount" inside each "pressure" which it refers to

        Structure:

{
  "sample_name": null,
  "experiments": [
    {
      "sample_name": null,
      "continued": false,
      "saturation_pressure_type": "Dewpoint",
      "name": "Constant Volume Depletion",
      "type": "CVD",
      "temperature": 106.0,
      "temperature_unit": "C",

      # First type
      "liberated_gas_compositions": {
        "components": [
          {
            "input_name": "CO2",
            "mw": 44.01
          },
          {
            "input_name": "Other",
            "mw": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0
          }
        ],
        "stages": [
          {
            "pressure": 2600,
            "composition": [
              {
                "component_name": "CO2",
                "molar_amount": 0.305
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "C30+",
                "molar_amount": 0.087
              }
            ]
          },
          {
            "pressure": 1300,
            "composition": [
              {
                "component_name": "2M-C6",
                "molar_amount": 0.123
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "Toluene",
                "molar_amount": 0.037
              }
            ]
          }
        ]
      },

       - Residual Oil structure:
          - Put ALL the "components" and its "molar_amount" inside "composition" key
          - Get the "final_stage_oil_mw" from the last row of table if mentioning "MW"

        Structure:

      # Second type
      "final_stage_oil_mw": 100.14,
      "final_stage_oil_density": 630.0,
      "final_stage_oil_density_unit": "kg/m3",
      "stock_tank_oil_density": 630.0,
      "stock_tank_oil_density_unit": "kg/m3",
      "final_stage_oil_composition": {
        "components": [
          {
            "input_name": "CO2",
            "mw": null,
            "molar_amount": 0.213,
            "mass_amount": null
          },
          {
            "input_name": "Other",
            "mw": null,
            "molar_amount": null,
            "mass_amount": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0,
            "molar_amount": 0.553,
            "mass_amount": null
          }
        ]
      }
    }
  ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) PROPERTIES table:
       - You put into this category If you see Pressure as row and Physical Properties as column (No composition)
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column Name | Key
       --------|-----------
       Total Recovery (mole %) | cumulative_moles_removed
       Liq. Density (g/cc) | oil_density

        Example JSON:

      {
          "sample_name": ..., # Put sample ID here
          "experiments": [
              {
                  "sample_name": ...,
                  "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                  "name": "Constant Volume Depletion",
                  "type": "CVD",
                  "temperature": 106.0,
                  "temperature_unit": "C",
                  "pressure_unit": "psia",
                  "oil_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_viscosity_unit": "...", # "cP"
                  "relative_oil_volume_unit": "...", # "%"
                  "incremental_moles_removed_unit": "...", # "%"
                  "cumulative_moles_removed_unit": "...", # "%"

                  # Properties data
                  "stages": [
                      # Fill here if the table displays properties as row and pressure as column, or otherwise
                      {
                          "pressure": 4661.0,
                          "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                          "relative_oil_volume": 0.0,
                          "incremental_moles_removed": null, # "%"
                          "cumulative_moles_removed": 0.0,
                          "oil_density": null,
                          "gas_z_factor": 0.922,
                          "gas_specific_gravity": null,
                          "gas_density": 0.339,
                          "gas_viscosity": 0.042,
                          "gas_plus_fraction_mw": null,
                      },
                      {
                          // Other stages ...
                      }
                      {
                          "pressure": 1300.0,
                          "is_saturation_pressure": false,
                          "relative_oil_volume": 13.18,
                          "incremental_moles_removed": null,
                          "cumulative_moles_removed": 67.06,
                          "oil_density": 0.63,
                          "gas_z_factor": 0.874,
                          "gas_specific_gravity": null,
                          "gas_density": 0.075,
                          "gas_viscosity": 0.015,
                          "gas_plus_fraction_mw": null,
                      }
                  ]
              }
          ]
      }

     - 1.4.5 If the page contains a Multi-Stage Separator (MSS) or Three Stage Separator table:
       - If you see "Two Stage", "Three Stage", "Four Stage" Separator, it is MSS. But, "Single Stage" is NOT MSS
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Stock tank oil data: If the title mention stock tank or tank oil
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If you see "Pressure Atm. bara", it means "pressure": 1 (atmospheric pressure means 1 bara)
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON

        Exception:
       - If you find page with title "Bo and GOR from Three Stage Separator test during depletion using the results from Differential Liberation ...", DO NOT extract the data.

        Example JSON:
{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                    "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                    "name": "Multi-stage Separator",
                    "type": "MSS",
                    "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "Dodecanes Plus",
                            "mw": null
                        }
                    ],
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.7579
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0024
                                }
                            ]
                        },
                        {
                            "stage_number": 1,
                            "composition": [
                                {
                                    "stage_number": 1,
                                    "component_name": "C1",
                                    "molar_amount": 0.6791
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 1,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0022
                                }
                            ]
                        },
                        {
                            "stage_number": 2,
                            "composition": [
                                {
                                    "stage_number": 2,
                                    "component_name": "C1",
                                    "molar_amount": 0.1999
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 2,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.019
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Stock tank oil
                "stock_tank_oil_molecular_weight": 145.78,
                "stock_tank_oil_density": 0.7843,
                "stock_tank_oil_density_unit": "g/cm3",
                "stock_tank_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.013,
                            "mass_amount": 0.0107
                        }
                    ]
                },
                "pressure_unit": "psia",
                "temperature_unit": "F",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",

                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 3724.0,
                        "is_saturation_pressure": true,
                        "temperature": 230.0,
                        "gor": 1802.83,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.1783,
                        "oil_density": 0.5016,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "temperature": 60.0,
                        "gor": 0.0,
                        "liberated_gas": 1802.83,
                        "oil_fvf": 1.0,
                        "oil_density": 0.7843,
                        "gas_z_factor": 0.9892,
                        "gas_specific_gravity": 1.316,
                        "gas_density": null,
                        "gas_viscosity": null
                    }
                ]
            }
    ]
}


     - 1.4.6 If the page contains a Differential Liberation (DLE) or Differential Vaporization (DV) table:
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Residual oil data: If mention residual oil or final stage
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity
       gas-oil ratio solution** | gor

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON
       ** in "Gas-Oil Ratio" column if you find "solution" and "liberated", take the "solution" and put to "gor" key in JSON

        Example JSON:

{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                "name": "Differential Liberation Expansion",
                "type": "DLE",
                "temperature": 229.7,
                "temperature_unit": "F",
                "dle_experiment_type": "Standard DLE Experiment",

                # // First part, Liberated gas
                "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "N2",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "C7+",
                            "mw": 114.01
                        }
                    ],
                    # Fill here if the table displays component as row and pressure as column, or otherwise
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.6859 # Composition in mole percent
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0085
                                }
                            ]
                        },
                        {
                            // Other stages ...
                        },
                        {
                            "stage_number": 9,
                            "composition": [
                                {
                                    "stage_number": 9,
                                    "component_name": "C1",
                                    "molar_amount": 0.1309
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 9,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0629
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Residual oil
                "evolved_gas_specific_gravity": null,
                "evolved_gas_composition_id": null,
                "evolved_gas_composition": null,
                "average_residual_oil_mw": 179.43,
                "average_residual_oil_density": 0.8128,
                "average_residual_oil_density_unit": "g/cm3",
                "residual_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.019,
                            "mass_amount": 0.0127
                        }
                    ]
                },
                "pressure_unit": "psia",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",
                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 8513.0,
                        "is_saturation_pressure": true,
                        "gor": 2847.67,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.5407,
                        "oil_density": 0.5714,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "gor": 0.0,
                        "liberated_gas": 2847.67,
                        "oil_fvf": 1.0975,
                        "oil_density": 0.7471,
                        "gas_z_factor": 0.9887,
                        "gas_specific_gravity": 2.1686,
                        "gas_density": null,
                        "gas_viscosity": 0.00925
                    }
                ]
            }
    ]
}

     - 1.4.7 If the page contains a Viscosity experiment (VISCO) table:
       - Identify measurement units for parameters.
       - Viscosity table has pressure as y-axis and viscosities as x-axis
       - Extract viscosity data and structure into "experiments".
       - Never come up with new structures or keys, just fill up in the specified JSON schema.

        Example JSON:

{
    "page": ...,
    "sample_name": ...,
    "experiments": [
        {
            "name": "Oil Viscosity",
            "type": "VISCO",
            "temperature": 229.7,
            "temperature_unit": "F",
            "pressure_unit": "psia",
            "oil_viscosity_unit": "cP",
            "gas_viscosity_unit": "cP",
            "stages": [
                {
                    "visco_id": 1018,
                    "pressure": 5413.0,
                    "oil_viscosity": 0.088,
                    "gas_viscosity": null
                },
                {
                    // Other stages ...
                },
                {
                    "visco_id": 1018,
                    "pressure": 13.0,
                    "oil_viscosity": 0.749,
                    "gas_viscosity": 0.00925
                }
            ]
        }
    ]
}

2. If any summary data or descriptive information is found:
   - Include it as key "Other_information", outside the "experiments" key in JSON.

   Example JSON:
   {
       "solution_gas_oil_ratio": 100,
       "separator_volume_factor": 300,
       "solution_gas_oil_ratio_unit": "scf/stb",
       "separator_volume_factor_unit": "bbl",
       ......
   }

3. Finally, you must stick to the following units

Unit shown | Unit in JSON
--------|-----------
g/cc | g/cm3
mole% | %
Vol/Vol | Sm3/Sm3
scf/sep bbl | scf/bbl
kg/Sm3 | kg/m3
psi | psia
Air=1 | SG

4. If you find Figure in the page, DO NOT extract any data from it. Just extract the title into json.

  {
    "figure_title": "Plot of dewpoint pressure"
  }

5. Dealing with Paraffinic-Naphtenes-Aromatics (PNA) composition

In some cases, PNA can be reported in compositional table, DLE liberated gas, or MSS liberated gas.

For example:

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| n-Hexane          | 0.086   | 0.351     | 86.2  |
| iso-Paraffins     | 0.154   | 0.627     | 86.2  |
| Naphthenes        | 0.033   | 0.109     | 70.1  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |
| n-Heptane         | 0.014   | 0.067     | 100.2 |
| iso-Paraffins     | 0.038   | 0.181     | 100.2 |
| Naphthenes        | 0.116   | 0.476     | 86.6  |
| Aromatics         | 0.030   | 0.112     | 78.1  |

You see for every C6 total and C7 total, there are iso-Paraffins (P), Naphthenes (N), and Aromatics (A).

Remove these PNA, so you just have C6 total and C7 total.

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |

From here, you just extract into corresponding JSON schema as defined in instructions 1 until 4
"
            }
          ]
        },
        {
          "role":"model",
          "parts":[
            {
              "text":"{
    "page": "57 of 119",
    "sample_name": "WFL-01777",
    "uncorrected": true,
    "last_component": "C36+",
    "flashed_oil_mw": 330.8,
    "flashed_oil_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 0.103,
                "mass_amount": 0.005
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 0.165,
                "mass_amount": 0.03
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 0.03,
                "mass_amount": 0.006
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 0.006,
                "mass_amount": 0.001
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 0.017,
                "mass_amount": 0.003
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.009,
                "mass_amount": 0.002
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 0.005,
                "mass_amount": 0.001
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 0.005,
                "mass_amount": 0.001
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 0.077,
                "mass_amount": 0.02
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 0.136,
                "mass_amount": 0.039
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 0.405,
                "mass_amount": 0.136
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 1.019,
                "mass_amount": 0.382
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 2.138,
                "mass_amount": 0.866
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 2.71,
                "mass_amount": 1.204
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 3.682,
                "mass_amount": 1.792
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 5.045,
                "mass_amount": 2.669
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 6.608,
                "mass_amount": 3.795
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 6.248,
                "mass_amount": 3.891
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 5.394,
                "mass_amount": 3.62
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 4.848,
                "mass_amount": 3.473
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 4.593,
                "mass_amount": 3.485
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 4.322,
                "mass_amount": 3.436
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 3.895,
                "mass_amount": 3.238
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 3.639,
                "mass_amount": 3.201
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 3.313,
                "mass_amount": 3.004
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 3.048,
                "mass_amount": 2.875
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 2.739,
                "mass_amount": 2.683
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 2.448,
                "mass_amount": 2.494
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 2.285,
                "mass_amount": 2.411
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 2.169,
                "mass_amount": 2.36
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 2.11,
                "mass_amount": 2.373
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 1.95,
                "mass_amount": 2.252
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 1.886,
                "mass_amount": 2.246
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 1.681,
                "mass_amount": 2.053
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 1.506,
                "mass_amount": 1.889
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 1.357,
                "mass_amount": 1.747
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 1.234,
                "mass_amount": 1.63
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 1.147,
                "mass_amount": 1.543
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 16.029,
                "mass_amount": 33.161
            }
        ]
    },
    "flashed_gas_mw": 17.55,
    "flashed_gas_specific_gravity": 0.606,
    "flashed_gas_specific_gravity_unit": "SG",
    "flashed_gas_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": 0.229,
                "mass_amount": 0.366
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": 0.183,
                "mass_amount": 0.458
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 90.342,
                "mass_amount": 82.572
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 8.711,
                "mass_amount": 14.923
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 0.364,
                "mass_amount": 0.916
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 0.034,
                "mass_amount": 0.114
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 0.042,
                "mass_amount": 0.138
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.019,
                "mass_amount": 0.08
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 0.004,
                "mass_amount": 0.015
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 0.005,
                "mass_amount": 0.019
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 0.022,
                "mass_amount": 0.107
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 0.014,
                "mass_amount": 0.074
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 0.012,
                "mass_amount": 0.072
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 0.01,
                "mass_amount": 0.07
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 0.007,
                "mass_amount": 0.054
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 0.002,
                "mass_amount": 0.021
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.002
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            }
        ]
    },
    "recombined_fluid_mw": 181.9,
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": null,
                "molar_amount": 0.109,
                "mass_amount": 0.017
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": null,
                "molar_amount": 0.087,
                "mass_amount": 0.021
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": null,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": null,
                "molar_amount": 42.992,
                "mass_amount": 3.791
            },
            {
                "input_name": "Ethane",
                "mw": null,
                "molar_amount": 4.227,
                "mass_amount": 0.699
            },
            {
                "input_name": "Propane",
                "mw": null,
                "molar_amount": 0.189,
                "mass_amount": 0.046
            },
            {
                "input_name": "iso-Butane",
                "mw": null,
                "molar_amount": 0.019,
                "mass_amount": 0.006
            },
            {
                "input_name": "n-Butane",
                "mw": null,
                "molar_amount": 0.029,
                "mass_amount": 0.009
            },
            {
                "input_name": "Neopentane",
                "mw": null,
                "molar_amount": 0.014,
                "mass_amount": 0.006
            },
            {
                "input_name": "iso-Pentane",
                "mw": null,
                "molar_amount": 0.004,
                "mass_amount": 0.002
            },
            {
                "input_name": "n-Pentane",
                "mw": null,
                "molar_amount": 0.005,
                "mass_amount": 0.002
            },
            {
                "input_name": "Hexanes",
                "mw": null,
                "molar_amount": 0.051,
                "mass_amount": 0.024
            },
            {
                "input_name": "Heptanes",
                "mw": null,
                "molar_amount": 0.078,
                "mass_amount": 0.041
            },
            {
                "input_name": "Octanes",
                "mw": null,
                "molar_amount": 0.218,
                "mass_amount": 0.133
            },
            {
                "input_name": "Nonanes",
                "mw": null,
                "molar_amount": 0.539,
                "mass_amount": 0.368
            },
            {
                "input_name": "Decanes",
                "mw": null,
                "molar_amount": 1.125,
                "mass_amount": 0.829
            },
            {
                "input_name": "Undecanes",
                "mw": null,
                "molar_amount": 1.423,
                "mass_amount": 1.15
            },
            {
                "input_name": "Dodecanes",
                "mw": null,
                "molar_amount": 1.932,
                "mass_amount": 1.71
            },
            {
                "input_name": "Tridecanes",
                "mw": null,
                "molar_amount": 2.647,
                "mass_amount": 2.547
            },
            {
                "input_name": "Tetradecanes",
                "mw": null,
                "molar_amount": 3.467,
                "mass_amount": 3.621
            },
            {
                "input_name": "Pentadecanes",
                "mw": null,
                "molar_amount": 3.279,
                "mass_amount": 3.713
            },
            {
                "input_name": "Hexadecanes",
                "mw": null,
                "molar_amount": 2.831,
                "mass_amount": 3.454
            },
            {
                "input_name": "Heptadecanes",
                "mw": null,
                "molar_amount": 2.544,
                "mass_amount": 3.314
            },
            {
                "input_name": "Octadecanes",
                "mw": null,
                "molar_amount": 2.41,
                "mass_amount": 3.325
            },
            {
                "input_name": "Nonadecanes",
                "mw": null,
                "molar_amount": 2.268,
                "mass_amount": 3.278
            },
            {
                "input_name": "Eicosanes",
                "mw": null,
                "molar_amount": 2.044,
                "mass_amount": 3.09
            },
            {
                "input_name": "C21",
                "mw": null,
                "molar_amount": 1.909,
                "mass_amount": 3.054
            },
            {
                "input_name": "C22",
                "mw": null,
                "molar_amount": 1.738,
                "mass_amount": 2.866
            },
            {
                "input_name": "C23",
                "mw": null,
                "molar_amount": 1.6,
                "mass_amount": 2.743
            },
            {
                "input_name": "C24",
                "mw": null,
                "molar_amount": 1.437,
                "mass_amount": 2.56
            },
            {
                "input_name": "C25",
                "mw": null,
                "molar_amount": 1.285,
                "mass_amount": 2.38
            },
            {
                "input_name": "C26",
                "mw": null,
                "molar_amount": 1.199,
                "mass_amount": 2.3
            },
            {
                "input_name": "C27",
                "mw": null,
                "molar_amount": 1.138,
                "mass_amount": 2.252
            },
            {
                "input_name": "C28",
                "mw": null,
                "molar_amount": 1.107,
                "mass_amount": 2.264
            },
            {
                "input_name": "C29",
                "mw": null,
                "molar_amount": 1.023,
                "mass_amount": 2.149
            },
            {
                "input_name": "C30",
                "mw": null,
                "molar_amount": 0.99,
                "mass_amount": 2.143
            },
            {
                "input_name": "C31",
                "mw": null,
                "molar_amount": 0.882,
                "mass_amount": 1.959
            },
            {
                "input_name": "C32",
                "mw": null,
                "molar_amount": 0.79,
                "mass_amount": 1.802
            },
            {
                "input_name": "C33",
                "mw": null,
                "molar_amount": 0.712,
                "mass_amount": 1.667
            },
            {
                "input_name": "C34",
                "mw": null,
                "molar_amount": 0.647,
                "mass_amount": 1.555
            },
            {
                "input_name": "C35",
                "mw": null,
                "molar_amount": 0.602,
                "mass_amount": 1.472
            },
            {
                "input_name": "C36+",
                "mw": null,
                "molar_amount": 8.411,
                "mass_amount": 31.64
            }
        ]
    }
}"
            }
          ]
        }
    ]}
{"contents":[
        {
          "role":"user",
          "parts":[
            {
              "fileData":{
                "mimeType":"image/jpeg",
                "fileUri":"https://github.com/yohanesnuwara/sft-finetune-gemini/blob/main/images/RS-113242%20Preliminary%20Results_v4%20-%20%C3%98st%20Frigg_page-0062.jpg"
              }
            },
            {
              "text":"OCR the following page into complete JSON.

Your task is to parse and extract as many infomation as possible from the page and put into JSON like specified

Never come up with new structures or keys, just fill up in the specified JSON schema.

Page can be either full texts, full table, or texts with table.

1. Identify the type of page:
   - 1.1 If the page consists only of texts:

      Parse sentences into JSON and do not give full sentence or summary

      Example sentence:

      "Two sets of sample (CL01 & CL02) is transferred at 15 deg C and pressure 1 atm" (page A.1)

      JSON response

      {
          "page": "A.1",
          "conditioning": {
              "samples": ["CL01", "CL02"],
              "transfer_temp": 15,
              "transfer_temp_unit": "C",
              "transfer_pressure": 1,
              "transfer_pressure_unit": "atm"
              // ...
          }
      }

      Try to find these parameters inferred from "flash" keyword
      {
        "sep_pressure": ...,
        "sep_pressure_unit": ...,
        "sep_temperature": ...,
        "sep_temperature_unit": ...,
      }



   - 1.2 If the page consists of table of contents
     - Put each table title from the list in key "table_title"
     - Identify the "keyword" in the table title, into these categories
        - If mention composition then "composition"
        - If mention constant composition expansion or constant mass expansion then "CCE"
        - If mention constant volume depletion then "CVD"
        - If mention differential liberation expansion then "DLE"
        - If mention multistage separator then "MSS"
        - If mention viscosity then "VISCO"
     - Identify the "sample_name" from keywords like Cylinder, Sample, Chamber number, or if it is sample pair
     - Identify the "page_number"

    JSON response:

    {
        "page": "....",
        "list_content": [
            {
                "title": "...",
                "keyword": "composition",
                "sample_name": null,
                "page_number": 1
            },
            {
                "title": "...",
                "keyword": "CCE"
                "sample_name": "A01",
                "page_number": 2
            },
            {
                "title": "...",
                "keyword": "CVD",
                "sample_name": "A01+A02",
                "page_number": 3
            }
        ]
    }

   - 1.3 If the page consists of texts with table:
     - 1.3.1 If the page displays "sample inventory" or "sample summary" table:
       - This type of page can be recognized by structure of the table. If the table has Sample ID/name or Bottle no in the y-axis, and properties in the x-axis
       - Properties reported in this summary table such as sampling depth, GOR, density, molecular weight, reservoir temperature, reservoir pressure (Pres), viscosity
       - Do not confuse this table with experiment table
       - Extract data into the "sample_inventory" JSON schema.
       - Extract other relevant information into "Other_information".
       - If you do not find any of the keys, DO NOT create the key
       - Identify title of each table and decide the "type"
            - If mention MDT oil, then "type": "OFT"
            - If mention MDT water, then "type": "WATER"

       Example JSON:
        {
          "page": "...",
          "sample_inventory": {
            "data": [
              {
                "sample_name": "1.01",
                "type": "OFT", # put "OFT" if mention MDT oil, "WATER" if mention MDT water
                "sampling_date": "2023-04-26", # If mention Transfer Date
                "well_id": "23/1", # Well name
                "basin_id": null,
                "sub_basin_id": null,
                "field_id": "Volve", # Field name
                "field_segment_id": null,
                "formation_id": "Realgrunnen", # Formation name
                "formation_zone_id": null,
                "reservoir_pressure": 182.0,
                "reservoir_pressure_unit": "bara",
                "reservoir_temperature": 69.8,
                "reservoir_temperature_unit": "C",
                "true_vertical_depth": 1929.0, # If mention sampling depth m TVDSS (true vertical depth sub sea)
                "true_vertical_depth_unit": "m",
                "measured_depth": 1984.5, # If mention sampling depth m MD (measured depth)
                "measured_depth_unit": "m",
                "pressure_at_lab": 400.0,
                "pressure_at_lab_unit": "bara",
                "temperature_at_lab": 80.0,
                "temperature_at_lab_unit": "C",
                "pressure_when_sampled": 100,
                "pressure_when_sampled_unit": "bara",
                "temperature_when_sampled": 23,
                "temperature_when_sampled_unit": "C",
                "top_perforation_depth": 2000,
                "top_perforation_depth_unit": "m",
                "bottom_perforation_depth": 3000,
                "bottom_perforation_depth_unit": "m",
                "transfer_pressure": 450.0,
                "transfer_pressure_unit": "bara",
                "transfer_temperature": 80.0,
                "transfer_temperature_unit": "C",
                "drawdown_pressure": 100,
                "drawdown_pressure_unit": "bara",
                "flashed_oil_contamination": 2.0, # If mention Mud filtrate contamination in STO
                "flashed_oil_contamination": "mass%", # If the unit mentioned is Wt%
                "fluid_type": "Oil",
                "mud_base": "Oil", # put "Oil" if mention OBM, or "Water" if mention WBM
                //... # Other parameters
              },
              {
                "Sample Type": "REC", # If mention Recombined
                # Same as above
                //...
              }
            ]
          },
          "Other_information": {
            "remarks": "Additional details can be provided here."
          }
        }

   - 1.4 If the page consists of a table:
     - 1.4.1 If the page consists of an Information table or descriptions:
       - Extract physical parameters and values into a structured JSON format.
       - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
         - If found, set "sample_name" accordingly.
         - If not found, set "sample_name" to null.

       Important data:

       - If you find "density of stock tank oil", put into key "flashed_oil_density", then fill "flashed_oil_density_unit"
       - If you see gas oil ratio (GOR), put into key "recombined_fluid_gor", then fill "recombined_fluid_gor_unit

       Getting 'flashed_oil_temperature':
       If you see the following

        ```
        Separation conditions:    From:  80.0 °C and   400 bara
                                  To:    25.5 °C and   atm. pressure
        ```

       In this case, "flashed_oil_temperature": 25.5, "flashed_oil_temperature_unit": "C"
       Pick the number after "To:   " before "and atm.pressure"

       Example JSON:
        {
            "page": "...",
            "sample_name": "...",
            "parameter1": "...",
            "parameter1_unit": "...",
            "parameter2": "...",
            "parameter2_unit": "...",
            "parameter3": "...",
            "parameter4_unit": "...",

            # Important data
            "flashed_oil_density": ...,
            "flashed_oil_density_unit": "...",
            "flashed_oil_temperature": 20.5,
            "flashed_oil_temperature_unit": "C",
            "recombined_fluid_gor": ...,
            "recombined_fluid_gor_unit": "...",
            et cetera ...
        }

     - 1.4.2 If the page contains a Composition table :

        - Dynamically identify each fluid-type group by reading the top header row(s), matching these synonyms:
          - flashed_oil ↔ "Stock tank oil", "Flashed Liquid", "Stock tank oil"
          - flashed_gas ↔ "Stock tank gas", "Flashed gas"
          - recombined_fluid ↔ "Monophasic fluid", "Reservoir fluid"
        - Under each fluid-type header, locate its two sub-columns: one labeled "Mole %" → molar_amount, the other "Weight %" → mass_amount.
        - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
            - If found, set "sample_name" accordingly.
            - Sample name is just like ID consist of letter and number, without C10+ or C36+
            - If not found, set "sample_name" to null.
        - If the table title says "uncorrected" or "corrected", set "uncorrected": true/false.
        - Identify "last_component" from the final row label (e.g. "C36+"), include units on every top-level number, and fill only the keys in the prescribed schema—do not invent new ones.

        IMPORTANT!!!
        - In case there is blank cell in the table (value not reported)
        - If you do not find BOTH molar amount and mass amount of a component, do not extract it into JSON

        Example table with blanks:

      |Component         | Stock tank gas    | Stock tank oil    |  Reservoir fluid   | Mol weight  |
      |Mole%             | Weight% | Mole%   | Weight% | Mole%   |  Mole%   | Weight% |             |
      |Nitrogen          | 0.157   | 0.183   |         |         |  0.084   | 0.024   | 28.02       |
      |Carbon Dioxide    | 6.582   | 12.048  |         |         |  3.509   | 1.555   | 44.01       |
      |Hydrogen Sulphide | 0       | 0       |         |         |  0       | 0       | 34.08       |
      |Methane           | 73.927  | 49.324  | 0.115   | 0.01    |  39.466  | 6.376   | 16.04       |
      |Ethane            | 8.997   | 11.251  | 0.222   | 0.036   |  4.9     | 1.484   | 30.07       |


        Result JSON (referring to the table):

{
    "page": ...,
    "sample_name": "A001", # The name of sample
    "uncorrected": true, # false or null
    "last_component": "C10+",
    "flashed_oil_mw": 151.9, # oil molecular weight or MW
    "flashed_oil_density": 0.777, # oil density at stock-tank condition 15 degC
    "flashed_oil_density_unit": "g/cm3", # g/cm3, kg/m3
    "flashed_oil_temperature": 60.0, # temperature at flash
    "flashed_oil_temperature_unit": "F", # F, C, K, R
    "flashed_oil_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide molar_amount and mass_amount is null, so no need to extract
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 0.115,
                "mass_amount": 0.01
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 0.222,
                "mass_amount": 0.036
            }
        ]
    },
    "flashed_gas_mw": 23.4, # gas molecular weight or MW
    "flashed_gas_specific_gravity": 0.808, # also called relative density or ideal
    "flashed_gas_specific_gravity_unit": "SG", # if unit not mentioned then most likely SG
    "flashed_gas_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide has molar_amount and mass_amount, so extract it
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.157,
                "mass_amount": 0.183
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 6.582,
                "mass_amount": 12.048
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 73.997,
                "mass_amount": 49.324
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 8.997,
                "mass_amount": 11.251
            }
        ]
    },

    # Recombined is sometimes called as Reservoir Fluid or Monophasic
    "recombined_fluid_mw": 30.2, # reservoir fluid MW
    "recombined_fluid_gor": 12200.8, # Gas oil ratio or gas liquid ratio (GLR) or Rs
    "recombined_fluid_gor_unit": "scf/STB", # scf/STB, Sm3/Sm3, Sm3/m3, scf/bbl
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.084,
                "mass_amount": 0.024
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 3.509,
                "mass_amount": 1.555
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 39.466,
                "mass_amount": 6.376
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 4.9,
                "mass_amount": 1.484
            }
        ]
    }
}
     - 1.4.3 If the page contains a Constant Composition Expansion (CCE) or Constant Mass Expansion (CME) table:
       - Identify measurement units for parameters.
       - Always put as "CCE" not "CME"
       - Extract data and structure into the "experiments" JSON key.
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Stages 'order' key must always start from 0
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column name | Key
       --------|-----------
       Relative Volume (column) | relative_total_volume
       Relative Volumes (Vs/Vs,BP) | relative_total_volume
       RLD (column) | relative_oil_volume
       % Liq/Sat (Vliq/Vsat) | relative_oil_volume

       Note: relative_oil_volume always null BEFORE the saturation_pressure=True

       - You must stick to the following units

        Variable | Unit
        --------|-----------
        relative_total_volume_unit | Vtot/Vsat

       Example JSON:


{
    "page" : ...,
    "sample_name": ...,
    "experiments": [
        {
            "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
            "sample_name": 1184,
            "name": "Constant Composition Expansion",
            "type": "CCE",
            "temperature": 106.0,
            "temperature_unit": "C",
            "pressure_unit": "psia",
            "relative_oil_volume_unit": "Vo/Vsat (%)",
            "single_phase_density_unit": "g/cm3",
            "relative_total_volume_unit": "Vtot/Vsat",
            "stages": [
                {
                    "pressure": 9000.0,
                    "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                    "relative_oil_volume": null,
                    "relative_total_volume": 0.79,
                    "single_phase_density": 0.422,
                    "z_factor": 1.407
                },
                // Other stages ...
                {
                    "pressure": 3011.0,
                    "is_saturation_pressure": false,
                    "relative_oil_volume": 14.37,
                    "relative_total_volume": 1.315,
                    "single_phase_density": null,
                    "z_factor": null
                }
            ]
        }
    ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) COMPOSITION:
       - You put the page in this category if you see keywords "Constant Volume Depletion" and chemical component
       - Please Read the WHOLE COLUMNS of TABLE
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true

       - If the columns like this: 2600 psia, 2010 psia, 1000 psia, Residual Oil
          - Put the pressures columns inside Liberated Gas schema
          - Put the Residual Oil column inside Final Stage Oil schema

       - Liberated Gas structure:
          - Put each of the "pressure" inside "stages" key
          - Put ALL the "components" and its "molar_amount" inside each "pressure" which it refers to

        Structure:

{
  "sample_name": null,
  "experiments": [
    {
      "sample_name": null,
      "continued": false,
      "saturation_pressure_type": "Dewpoint",
      "name": "Constant Volume Depletion",
      "type": "CVD",
      "temperature": 106.0,
      "temperature_unit": "C",

      # First type
      "liberated_gas_compositions": {
        "components": [
          {
            "input_name": "CO2",
            "mw": 44.01
          },
          {
            "input_name": "Other",
            "mw": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0
          }
        ],
        "stages": [
          {
            "pressure": 2600,
            "composition": [
              {
                "component_name": "CO2",
                "molar_amount": 0.305
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "C30+",
                "molar_amount": 0.087
              }
            ]
          },
          {
            "pressure": 1300,
            "composition": [
              {
                "component_name": "2M-C6",
                "molar_amount": 0.123
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "Toluene",
                "molar_amount": 0.037
              }
            ]
          }
        ]
      },

       - Residual Oil structure:
          - Put ALL the "components" and its "molar_amount" inside "composition" key
          - Get the "final_stage_oil_mw" from the last row of table if mentioning "MW"

        Structure:

      # Second type
      "final_stage_oil_mw": 100.14,
      "final_stage_oil_density": 630.0,
      "final_stage_oil_density_unit": "kg/m3",
      "stock_tank_oil_density": 630.0,
      "stock_tank_oil_density_unit": "kg/m3",
      "final_stage_oil_composition": {
        "components": [
          {
            "input_name": "CO2",
            "mw": null,
            "molar_amount": 0.213,
            "mass_amount": null
          },
          {
            "input_name": "Other",
            "mw": null,
            "molar_amount": null,
            "mass_amount": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0,
            "molar_amount": 0.553,
            "mass_amount": null
          }
        ]
      }
    }
  ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) PROPERTIES table:
       - You put into this category If you see Pressure as row and Physical Properties as column (No composition)
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column Name | Key
       --------|-----------
       Total Recovery (mole %) | cumulative_moles_removed
       Liq. Density (g/cc) | oil_density

        Example JSON:

      {
          "sample_name": ..., # Put sample ID here
          "experiments": [
              {
                  "sample_name": ...,
                  "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                  "name": "Constant Volume Depletion",
                  "type": "CVD",
                  "temperature": 106.0,
                  "temperature_unit": "C",
                  "pressure_unit": "psia",
                  "oil_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_viscosity_unit": "...", # "cP"
                  "relative_oil_volume_unit": "...", # "%"
                  "incremental_moles_removed_unit": "...", # "%"
                  "cumulative_moles_removed_unit": "...", # "%"

                  # Properties data
                  "stages": [
                      # Fill here if the table displays properties as row and pressure as column, or otherwise
                      {
                          "pressure": 4661.0,
                          "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                          "relative_oil_volume": 0.0,
                          "incremental_moles_removed": null, # "%"
                          "cumulative_moles_removed": 0.0,
                          "oil_density": null,
                          "gas_z_factor": 0.922,
                          "gas_specific_gravity": null,
                          "gas_density": 0.339,
                          "gas_viscosity": 0.042,
                          "gas_plus_fraction_mw": null,
                      },
                      {
                          // Other stages ...
                      }
                      {
                          "pressure": 1300.0,
                          "is_saturation_pressure": false,
                          "relative_oil_volume": 13.18,
                          "incremental_moles_removed": null,
                          "cumulative_moles_removed": 67.06,
                          "oil_density": 0.63,
                          "gas_z_factor": 0.874,
                          "gas_specific_gravity": null,
                          "gas_density": 0.075,
                          "gas_viscosity": 0.015,
                          "gas_plus_fraction_mw": null,
                      }
                  ]
              }
          ]
      }

     - 1.4.5 If the page contains a Multi-Stage Separator (MSS) or Three Stage Separator table:
       - If you see "Two Stage", "Three Stage", "Four Stage" Separator, it is MSS. But, "Single Stage" is NOT MSS
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Stock tank oil data: If the title mention stock tank or tank oil
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If you see "Pressure Atm. bara", it means "pressure": 1 (atmospheric pressure means 1 bara)
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON

        Exception:
       - If you find page with title "Bo and GOR from Three Stage Separator test during depletion using the results from Differential Liberation ...", DO NOT extract the data.

        Example JSON:
{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                    "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                    "name": "Multi-stage Separator",
                    "type": "MSS",
                    "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "Dodecanes Plus",
                            "mw": null
                        }
                    ],
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.7579
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0024
                                }
                            ]
                        },
                        {
                            "stage_number": 1,
                            "composition": [
                                {
                                    "stage_number": 1,
                                    "component_name": "C1",
                                    "molar_amount": 0.6791
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 1,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0022
                                }
                            ]
                        },
                        {
                            "stage_number": 2,
                            "composition": [
                                {
                                    "stage_number": 2,
                                    "component_name": "C1",
                                    "molar_amount": 0.1999
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 2,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.019
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Stock tank oil
                "stock_tank_oil_molecular_weight": 145.78,
                "stock_tank_oil_density": 0.7843,
                "stock_tank_oil_density_unit": "g/cm3",
                "stock_tank_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.013,
                            "mass_amount": 0.0107
                        }
                    ]
                },
                "pressure_unit": "psia",
                "temperature_unit": "F",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",

                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 3724.0,
                        "is_saturation_pressure": true,
                        "temperature": 230.0,
                        "gor": 1802.83,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.1783,
                        "oil_density": 0.5016,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "temperature": 60.0,
                        "gor": 0.0,
                        "liberated_gas": 1802.83,
                        "oil_fvf": 1.0,
                        "oil_density": 0.7843,
                        "gas_z_factor": 0.9892,
                        "gas_specific_gravity": 1.316,
                        "gas_density": null,
                        "gas_viscosity": null
                    }
                ]
            }
    ]
}


     - 1.4.6 If the page contains a Differential Liberation (DLE) or Differential Vaporization (DV) table:
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Residual oil data: If mention residual oil or final stage
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity
       gas-oil ratio solution** | gor

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON
       ** in "Gas-Oil Ratio" column if you find "solution" and "liberated", take the "solution" and put to "gor" key in JSON

        Example JSON:

{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                "name": "Differential Liberation Expansion",
                "type": "DLE",
                "temperature": 229.7,
                "temperature_unit": "F",
                "dle_experiment_type": "Standard DLE Experiment",

                # // First part, Liberated gas
                "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "N2",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "C7+",
                            "mw": 114.01
                        }
                    ],
                    # Fill here if the table displays component as row and pressure as column, or otherwise
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.6859 # Composition in mole percent
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0085
                                }
                            ]
                        },
                        {
                            // Other stages ...
                        },
                        {
                            "stage_number": 9,
                            "composition": [
                                {
                                    "stage_number": 9,
                                    "component_name": "C1",
                                    "molar_amount": 0.1309
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 9,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0629
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Residual oil
                "evolved_gas_specific_gravity": null,
                "evolved_gas_composition_id": null,
                "evolved_gas_composition": null,
                "average_residual_oil_mw": 179.43,
                "average_residual_oil_density": 0.8128,
                "average_residual_oil_density_unit": "g/cm3",
                "residual_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.019,
                            "mass_amount": 0.0127
                        }
                    ]
                },
                "pressure_unit": "psia",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",
                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 8513.0,
                        "is_saturation_pressure": true,
                        "gor": 2847.67,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.5407,
                        "oil_density": 0.5714,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "gor": 0.0,
                        "liberated_gas": 2847.67,
                        "oil_fvf": 1.0975,
                        "oil_density": 0.7471,
                        "gas_z_factor": 0.9887,
                        "gas_specific_gravity": 2.1686,
                        "gas_density": null,
                        "gas_viscosity": 0.00925
                    }
                ]
            }
    ]
}

     - 1.4.7 If the page contains a Viscosity experiment (VISCO) table:
       - Identify measurement units for parameters.
       - Viscosity table has pressure as y-axis and viscosities as x-axis
       - Extract viscosity data and structure into "experiments".
       - Never come up with new structures or keys, just fill up in the specified JSON schema.

        Example JSON:

{
    "page": ...,
    "sample_name": ...,
    "experiments": [
        {
            "name": "Oil Viscosity",
            "type": "VISCO",
            "temperature": 229.7,
            "temperature_unit": "F",
            "pressure_unit": "psia",
            "oil_viscosity_unit": "cP",
            "gas_viscosity_unit": "cP",
            "stages": [
                {
                    "visco_id": 1018,
                    "pressure": 5413.0,
                    "oil_viscosity": 0.088,
                    "gas_viscosity": null
                },
                {
                    // Other stages ...
                },
                {
                    "visco_id": 1018,
                    "pressure": 13.0,
                    "oil_viscosity": 0.749,
                    "gas_viscosity": 0.00925
                }
            ]
        }
    ]
}

2. If any summary data or descriptive information is found:
   - Include it as key "Other_information", outside the "experiments" key in JSON.

   Example JSON:
   {
       "solution_gas_oil_ratio": 100,
       "separator_volume_factor": 300,
       "solution_gas_oil_ratio_unit": "scf/stb",
       "separator_volume_factor_unit": "bbl",
       ......
   }

3. Finally, you must stick to the following units

Unit shown | Unit in JSON
--------|-----------
g/cc | g/cm3
mole% | %
Vol/Vol | Sm3/Sm3
scf/sep bbl | scf/bbl
kg/Sm3 | kg/m3
psi | psia
Air=1 | SG

4. If you find Figure in the page, DO NOT extract any data from it. Just extract the title into json.

  {
    "figure_title": "Plot of dewpoint pressure"
  }

5. Dealing with Paraffinic-Naphtenes-Aromatics (PNA) composition

In some cases, PNA can be reported in compositional table, DLE liberated gas, or MSS liberated gas.

For example:

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| n-Hexane          | 0.086   | 0.351     | 86.2  |
| iso-Paraffins     | 0.154   | 0.627     | 86.2  |
| Naphthenes        | 0.033   | 0.109     | 70.1  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |
| n-Heptane         | 0.014   | 0.067     | 100.2 |
| iso-Paraffins     | 0.038   | 0.181     | 100.2 |
| Naphthenes        | 0.116   | 0.476     | 86.6  |
| Aromatics         | 0.030   | 0.112     | 78.1  |

You see for every C6 total and C7 total, there are iso-Paraffins (P), Naphthenes (N), and Aromatics (A).

Remove these PNA, so you just have C6 total and C7 total.

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |

From here, you just extract into corresponding JSON schema as defined in instructions 1 until 4
"
            }
          ]
        },
        {
          "role":"model",
          "parts":[
            {
              "text":"{
    "page": "62",
    "sample_name": "WFL-01721",
    "recombined_fluid_gor": 56.3,
    "recombined_fluid_gor_unit": "Sm3/Sm3",
    "flashed_oil_density": 908.8,
    "flashed_oil_density_unit": "kg/m3",
    "flashed_oil_temperature": 22.7,
    "flashed_oil_temperature_unit": "C",
    "gas_specific_gravity": 0.61,
    "gas_specific_gravity_unit": "SG",
    "flashed_oil_mw": 328.9,
    "flashed_oil_mw_unit": "g/mol",
    "flashed_oil_c7_plus_mw": 330.0,
    "flashed_oil_c7_plus_mw_unit": "g/mol",
    "flashed_oil_c7_plus_density": 909.0,
    "flashed_oil_c7_plus_density_unit": "kg/m3",
    "flashed_oil_c10_plus_mw": 334.0,
    "flashed_oil_c10_plus_mw_unit": "g/mol",
    "flashed_oil_c10_plus_density": 910.0,
    "flashed_oil_c10_plus_density_unit": "kg/m3",
    "Other_information": {
        "sampling_depth": 1991.3,
        "sampling_depth_unit": "m MD",
        "remarks": "uncorrected for mud filtrate contamination",
        "standard_conditions_gas": "15 \u00b0C and 1.01325 bara",
        "standard_conditions_oil": "15 \u00b0C and atmospheric pressure"
    }
}"
            }
          ]
        }
    ]}
{"contents":[
        {
          "role":"user",
          "parts":[
            {
              "fileData":{
                "mimeType":"image/jpeg",
                "fileUri":"https://github.com/yohanesnuwara/sft-finetune-gemini/blob/main/images/RS-113242%20Preliminary%20Results_v4%20-%20%C3%98st%20Frigg_page-0065.jpg"
              }
            },
            {
              "text":"OCR the following page into complete JSON.

Your task is to parse and extract as many infomation as possible from the page and put into JSON like specified

Never come up with new structures or keys, just fill up in the specified JSON schema.

Page can be either full texts, full table, or texts with table.

1. Identify the type of page:
   - 1.1 If the page consists only of texts:

      Parse sentences into JSON and do not give full sentence or summary

      Example sentence:

      "Two sets of sample (CL01 & CL02) is transferred at 15 deg C and pressure 1 atm" (page A.1)

      JSON response

      {
          "page": "A.1",
          "conditioning": {
              "samples": ["CL01", "CL02"],
              "transfer_temp": 15,
              "transfer_temp_unit": "C",
              "transfer_pressure": 1,
              "transfer_pressure_unit": "atm"
              // ...
          }
      }

      Try to find these parameters inferred from "flash" keyword
      {
        "sep_pressure": ...,
        "sep_pressure_unit": ...,
        "sep_temperature": ...,
        "sep_temperature_unit": ...,
      }



   - 1.2 If the page consists of table of contents
     - Put each table title from the list in key "table_title"
     - Identify the "keyword" in the table title, into these categories
        - If mention composition then "composition"
        - If mention constant composition expansion or constant mass expansion then "CCE"
        - If mention constant volume depletion then "CVD"
        - If mention differential liberation expansion then "DLE"
        - If mention multistage separator then "MSS"
        - If mention viscosity then "VISCO"
     - Identify the "sample_name" from keywords like Cylinder, Sample, Chamber number, or if it is sample pair
     - Identify the "page_number"

    JSON response:

    {
        "page": "....",
        "list_content": [
            {
                "title": "...",
                "keyword": "composition",
                "sample_name": null,
                "page_number": 1
            },
            {
                "title": "...",
                "keyword": "CCE"
                "sample_name": "A01",
                "page_number": 2
            },
            {
                "title": "...",
                "keyword": "CVD",
                "sample_name": "A01+A02",
                "page_number": 3
            }
        ]
    }

   - 1.3 If the page consists of texts with table:
     - 1.3.1 If the page displays "sample inventory" or "sample summary" table:
       - This type of page can be recognized by structure of the table. If the table has Sample ID/name or Bottle no in the y-axis, and properties in the x-axis
       - Properties reported in this summary table such as sampling depth, GOR, density, molecular weight, reservoir temperature, reservoir pressure (Pres), viscosity
       - Do not confuse this table with experiment table
       - Extract data into the "sample_inventory" JSON schema.
       - Extract other relevant information into "Other_information".
       - If you do not find any of the keys, DO NOT create the key
       - Identify title of each table and decide the "type"
            - If mention MDT oil, then "type": "OFT"
            - If mention MDT water, then "type": "WATER"

       Example JSON:
        {
          "page": "...",
          "sample_inventory": {
            "data": [
              {
                "sample_name": "1.01",
                "type": "OFT", # put "OFT" if mention MDT oil, "WATER" if mention MDT water
                "sampling_date": "2023-04-26", # If mention Transfer Date
                "well_id": "23/1", # Well name
                "basin_id": null,
                "sub_basin_id": null,
                "field_id": "Volve", # Field name
                "field_segment_id": null,
                "formation_id": "Realgrunnen", # Formation name
                "formation_zone_id": null,
                "reservoir_pressure": 182.0,
                "reservoir_pressure_unit": "bara",
                "reservoir_temperature": 69.8,
                "reservoir_temperature_unit": "C",
                "true_vertical_depth": 1929.0, # If mention sampling depth m TVDSS (true vertical depth sub sea)
                "true_vertical_depth_unit": "m",
                "measured_depth": 1984.5, # If mention sampling depth m MD (measured depth)
                "measured_depth_unit": "m",
                "pressure_at_lab": 400.0,
                "pressure_at_lab_unit": "bara",
                "temperature_at_lab": 80.0,
                "temperature_at_lab_unit": "C",
                "pressure_when_sampled": 100,
                "pressure_when_sampled_unit": "bara",
                "temperature_when_sampled": 23,
                "temperature_when_sampled_unit": "C",
                "top_perforation_depth": 2000,
                "top_perforation_depth_unit": "m",
                "bottom_perforation_depth": 3000,
                "bottom_perforation_depth_unit": "m",
                "transfer_pressure": 450.0,
                "transfer_pressure_unit": "bara",
                "transfer_temperature": 80.0,
                "transfer_temperature_unit": "C",
                "drawdown_pressure": 100,
                "drawdown_pressure_unit": "bara",
                "flashed_oil_contamination": 2.0, # If mention Mud filtrate contamination in STO
                "flashed_oil_contamination": "mass%", # If the unit mentioned is Wt%
                "fluid_type": "Oil",
                "mud_base": "Oil", # put "Oil" if mention OBM, or "Water" if mention WBM
                //... # Other parameters
              },
              {
                "Sample Type": "REC", # If mention Recombined
                # Same as above
                //...
              }
            ]
          },
          "Other_information": {
            "remarks": "Additional details can be provided here."
          }
        }

   - 1.4 If the page consists of a table:
     - 1.4.1 If the page consists of an Information table or descriptions:
       - Extract physical parameters and values into a structured JSON format.
       - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
         - If found, set "sample_name" accordingly.
         - If not found, set "sample_name" to null.

       Important data:

       - If you find "density of stock tank oil", put into key "flashed_oil_density", then fill "flashed_oil_density_unit"
       - If you see gas oil ratio (GOR), put into key "recombined_fluid_gor", then fill "recombined_fluid_gor_unit

       Getting 'flashed_oil_temperature':
       If you see the following

        ```
        Separation conditions:    From:  80.0 °C and   400 bara
                                  To:    25.5 °C and   atm. pressure
        ```

       In this case, "flashed_oil_temperature": 25.5, "flashed_oil_temperature_unit": "C"
       Pick the number after "To:   " before "and atm.pressure"

       Example JSON:
        {
            "page": "...",
            "sample_name": "...",
            "parameter1": "...",
            "parameter1_unit": "...",
            "parameter2": "...",
            "parameter2_unit": "...",
            "parameter3": "...",
            "parameter4_unit": "...",

            # Important data
            "flashed_oil_density": ...,
            "flashed_oil_density_unit": "...",
            "flashed_oil_temperature": 20.5,
            "flashed_oil_temperature_unit": "C",
            "recombined_fluid_gor": ...,
            "recombined_fluid_gor_unit": "...",
            et cetera ...
        }

     - 1.4.2 If the page contains a Composition table :

        - Dynamically identify each fluid-type group by reading the top header row(s), matching these synonyms:
          - flashed_oil ↔ "Stock tank oil", "Flashed Liquid", "Stock tank oil"
          - flashed_gas ↔ "Stock tank gas", "Flashed gas"
          - recombined_fluid ↔ "Monophasic fluid", "Reservoir fluid"
        - Under each fluid-type header, locate its two sub-columns: one labeled "Mole %" → molar_amount, the other "Weight %" → mass_amount.
        - Identify if the title contains "Sample No.", "Cylinder No.", "Chamber No.", or "Bottle No."
            - If found, set "sample_name" accordingly.
            - Sample name is just like ID consist of letter and number, without C10+ or C36+
            - If not found, set "sample_name" to null.
        - If the table title says "uncorrected" or "corrected", set "uncorrected": true/false.
        - Identify "last_component" from the final row label (e.g. "C36+"), include units on every top-level number, and fill only the keys in the prescribed schema—do not invent new ones.

        IMPORTANT!!!
        - In case there is blank cell in the table (value not reported)
        - If you do not find BOTH molar amount and mass amount of a component, do not extract it into JSON

        Example table with blanks:

      |Component         | Stock tank gas    | Stock tank oil    |  Reservoir fluid   | Mol weight  |
      |Mole%             | Weight% | Mole%   | Weight% | Mole%   |  Mole%   | Weight% |             |
      |Nitrogen          | 0.157   | 0.183   |         |         |  0.084   | 0.024   | 28.02       |
      |Carbon Dioxide    | 6.582   | 12.048  |         |         |  3.509   | 1.555   | 44.01       |
      |Hydrogen Sulphide | 0       | 0       |         |         |  0       | 0       | 34.08       |
      |Methane           | 73.927  | 49.324  | 0.115   | 0.01    |  39.466  | 6.376   | 16.04       |
      |Ethane            | 8.997   | 11.251  | 0.222   | 0.036   |  4.9     | 1.484   | 30.07       |


        Result JSON (referring to the table):

{
    "page": ...,
    "sample_name": "A001", # The name of sample
    "uncorrected": true, # false or null
    "last_component": "C10+",
    "flashed_oil_mw": 151.9, # oil molecular weight or MW
    "flashed_oil_density": 0.777, # oil density at stock-tank condition 15 degC
    "flashed_oil_density_unit": "g/cm3", # g/cm3, kg/m3
    "flashed_oil_temperature": 60.0, # temperature at flash
    "flashed_oil_temperature_unit": "F", # F, C, K, R
    "flashed_oil_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide molar_amount and mass_amount is null, so no need to extract
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 0.115,
                "mass_amount": 0.01
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 0.222,
                "mass_amount": 0.036
            }
        ]
    },
    "flashed_gas_mw": 23.4, # gas molecular weight or MW
    "flashed_gas_specific_gravity": 0.808, # also called relative density or ideal
    "flashed_gas_specific_gravity_unit": "SG", # if unit not mentioned then most likely SG
    "flashed_gas_composition": {
        "components": [
            # Nitrogen, Carbon Dioxide, and Hydrogen Sulfide has molar_amount and mass_amount, so extract it
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.157,
                "mass_amount": 0.183
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 6.582,
                "mass_amount": 12.048
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 73.997,
                "mass_amount": 49.324
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 8.997,
                "mass_amount": 11.251
            }
        ]
    },

    # Recombined is sometimes called as Reservoir Fluid or Monophasic
    "recombined_fluid_mw": 30.2, # reservoir fluid MW
    "recombined_fluid_gor": 12200.8, # Gas oil ratio or gas liquid ratio (GLR) or Rs
    "recombined_fluid_gor_unit": "scf/STB", # scf/STB, Sm3/Sm3, Sm3/m3, scf/bbl
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "mw": 28.02,
                "molar_amount": 0.084,
                "mass_amount": 0.024
            },
            {
                "input_name": "Carbon Dioxide",
                "mw": 44.01,
                "molar_amount": 3.509,
                "mass_amount": 1.555
            },
            {
                "input_name": "Hydrogen Sulphide",
                "mw": 34.08,
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "mw": 16.04,
                "molar_amount": 39.466,
                "mass_amount": 6.376
            },
            {
                "input_name": "Ethane",
                "mw": 30.07,
                "molar_amount": 4.9,
                "mass_amount": 1.484
            }
        ]
    }
}
     - 1.4.3 If the page contains a Constant Composition Expansion (CCE) or Constant Mass Expansion (CME) table:
       - Identify measurement units for parameters.
       - Always put as "CCE" not "CME"
       - Extract data and structure into the "experiments" JSON key.
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Stages 'order' key must always start from 0
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column name | Key
       --------|-----------
       Relative Volume (column) | relative_total_volume
       Relative Volumes (Vs/Vs,BP) | relative_total_volume
       RLD (column) | relative_oil_volume
       % Liq/Sat (Vliq/Vsat) | relative_oil_volume

       Note: relative_oil_volume always null BEFORE the saturation_pressure=True

       - You must stick to the following units

        Variable | Unit
        --------|-----------
        relative_total_volume_unit | Vtot/Vsat

       Example JSON:


{
    "page" : ...,
    "sample_name": ...,
    "experiments": [
        {
            "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
            "sample_name": 1184,
            "name": "Constant Composition Expansion",
            "type": "CCE",
            "temperature": 106.0,
            "temperature_unit": "C",
            "pressure_unit": "psia",
            "relative_oil_volume_unit": "Vo/Vsat (%)",
            "single_phase_density_unit": "g/cm3",
            "relative_total_volume_unit": "Vtot/Vsat",
            "stages": [
                {
                    "pressure": 9000.0,
                    "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                    "relative_oil_volume": null,
                    "relative_total_volume": 0.79,
                    "single_phase_density": 0.422,
                    "z_factor": 1.407
                },
                // Other stages ...
                {
                    "pressure": 3011.0,
                    "is_saturation_pressure": false,
                    "relative_oil_volume": 14.37,
                    "relative_total_volume": 1.315,
                    "single_phase_density": null,
                    "z_factor": null
                }
            ]
        }
    ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) COMPOSITION:
       - You put the page in this category if you see keywords "Constant Volume Depletion" and chemical component
       - Please Read the WHOLE COLUMNS of TABLE
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true

       - If the columns like this: 2600 psia, 2010 psia, 1000 psia, Residual Oil
          - Put the pressures columns inside Liberated Gas schema
          - Put the Residual Oil column inside Final Stage Oil schema

       - Liberated Gas structure:
          - Put each of the "pressure" inside "stages" key
          - Put ALL the "components" and its "molar_amount" inside each "pressure" which it refers to

        Structure:

{
  "sample_name": null,
  "experiments": [
    {
      "sample_name": null,
      "continued": false,
      "saturation_pressure_type": "Dewpoint",
      "name": "Constant Volume Depletion",
      "type": "CVD",
      "temperature": 106.0,
      "temperature_unit": "C",

      # First type
      "liberated_gas_compositions": {
        "components": [
          {
            "input_name": "CO2",
            "mw": 44.01
          },
          {
            "input_name": "Other",
            "mw": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0
          }
        ],
        "stages": [
          {
            "pressure": 2600,
            "composition": [
              {
                "component_name": "CO2",
                "molar_amount": 0.305
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "C30+",
                "molar_amount": 0.087
              }
            ]
          },
          {
            "pressure": 1300,
            "composition": [
              {
                "component_name": "2M-C6",
                "molar_amount": 0.123
              },
              {
                "component_name": "Other",
                "molar_amount": null
              },
              {
                "component_name": "Toluene",
                "molar_amount": 0.037
              }
            ]
          }
        ]
      },

       - Residual Oil structure:
          - Put ALL the "components" and its "molar_amount" inside "composition" key
          - Get the "final_stage_oil_mw" from the last row of table if mentioning "MW"

        Structure:

      # Second type
      "final_stage_oil_mw": 100.14,
      "final_stage_oil_density": 630.0,
      "final_stage_oil_density_unit": "kg/m3",
      "stock_tank_oil_density": 630.0,
      "stock_tank_oil_density_unit": "kg/m3",
      "final_stage_oil_composition": {
        "components": [
          {
            "input_name": "CO2",
            "mw": null,
            "molar_amount": 0.213,
            "mass_amount": null
          },
          {
            "input_name": "Other",
            "mw": null,
            "molar_amount": null,
            "mass_amount": null
          },
          {
            "input_name": "C30+",
            "mw": 750.0,
            "molar_amount": 0.553,
            "mass_amount": null
          }
        ]
      }
    }
  ]
}


     - 1.4.4 If the page contains a Constant Volume Depletion (CVD) PROPERTIES table:
       - You put into this category If you see Pressure as row and Physical Properties as column (No composition)
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - If you find the following Column name in the page, make it to the key as follows

       Column Name | Key
       --------|-----------
       Total Recovery (mole %) | cumulative_moles_removed
       Liq. Density (g/cc) | oil_density

        Example JSON:

      {
          "sample_name": ..., # Put sample ID here
          "experiments": [
              {
                  "sample_name": ...,
                  "saturation_pressure_type": "Dewpoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                  "name": "Constant Volume Depletion",
                  "type": "CVD",
                  "temperature": 106.0,
                  "temperature_unit": "C",
                  "pressure_unit": "psia",
                  "oil_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_density_unit": "...", # "g/cm3", "kg/m3"
                  "gas_viscosity_unit": "...", # "cP"
                  "relative_oil_volume_unit": "...", # "%"
                  "incremental_moles_removed_unit": "...", # "%"
                  "cumulative_moles_removed_unit": "...", # "%"

                  # Properties data
                  "stages": [
                      # Fill here if the table displays properties as row and pressure as column, or otherwise
                      {
                          "pressure": 4661.0,
                          "is_saturation_pressure": true, # Put true if it mention Psat or Pd or Pb beside pressure value
                          "relative_oil_volume": 0.0,
                          "incremental_moles_removed": null, # "%"
                          "cumulative_moles_removed": 0.0,
                          "oil_density": null,
                          "gas_z_factor": 0.922,
                          "gas_specific_gravity": null,
                          "gas_density": 0.339,
                          "gas_viscosity": 0.042,
                          "gas_plus_fraction_mw": null,
                      },
                      {
                          // Other stages ...
                      }
                      {
                          "pressure": 1300.0,
                          "is_saturation_pressure": false,
                          "relative_oil_volume": 13.18,
                          "incremental_moles_removed": null,
                          "cumulative_moles_removed": 67.06,
                          "oil_density": 0.63,
                          "gas_z_factor": 0.874,
                          "gas_specific_gravity": null,
                          "gas_density": 0.075,
                          "gas_viscosity": 0.015,
                          "gas_plus_fraction_mw": null,
                      }
                  ]
              }
          ]
      }

     - 1.4.5 If the page contains a Multi-Stage Separator (MSS) or Three Stage Separator table:
       - If you see "Two Stage", "Three Stage", "Four Stage" Separator, it is MSS. But, "Single Stage" is NOT MSS
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Stock tank oil data: If the title mention stock tank or tank oil
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If you see "Pressure Atm. bara", it means "pressure": 1 (atmospheric pressure means 1 bara)
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON

        Exception:
       - If you find page with title "Bo and GOR from Three Stage Separator test during depletion using the results from Differential Liberation ...", DO NOT extract the data.

        Example JSON:
{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                    "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                    "name": "Multi-stage Separator",
                    "type": "MSS",
                    "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "Dodecanes Plus",
                            "mw": null
                        }
                    ],
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.7579
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0024
                                }
                            ]
                        },
                        {
                            "stage_number": 1,
                            "composition": [
                                {
                                    "stage_number": 1,
                                    "component_name": "C1",
                                    "molar_amount": 0.6791
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 1,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0022
                                }
                            ]
                        },
                        {
                            "stage_number": 2,
                            "composition": [
                                {
                                    "stage_number": 2,
                                    "component_name": "C1",
                                    "molar_amount": 0.1999
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 2,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.019
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Stock tank oil
                "stock_tank_oil_molecular_weight": 145.78,
                "stock_tank_oil_density": 0.7843,
                "stock_tank_oil_density_unit": "g/cm3",
                "stock_tank_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.013,
                            "mass_amount": 0.0107
                        }
                    ]
                },
                "pressure_unit": "psia",
                "temperature_unit": "F",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",

                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 3724.0,
                        "is_saturation_pressure": true,
                        "temperature": 230.0,
                        "gor": 1802.83,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.1783,
                        "oil_density": 0.5016,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "temperature": 60.0,
                        "gor": 0.0,
                        "liberated_gas": 1802.83,
                        "oil_fvf": 1.0,
                        "oil_density": 0.7843,
                        "gas_z_factor": 0.9892,
                        "gas_specific_gravity": 1.316,
                        "gas_density": null,
                        "gas_viscosity": null
                    }
                ]
            }
    ]
}


     - 1.4.6 If the page contains a Differential Liberation (DLE) or Differential Vaporization (DV) table:
       - It has 3 main parts: Liberated gas data, Final stage oil data, and properties data
          - Liberated gas data: If you see component as row and pressure as column (composition), and if mention vapour
          - Residual oil data: If mention residual oil or final stage
          - Properties: If you see pressure as row and physical properties as column (no composition)

       - This is how you put your data
          - Liberated gas data: Put component name and pressure inside "components" key, and molar amount of each component for each pressure in "stages" key

       - If you see both First part and Second part in one table, combine them into the specified JSON.
       - Extract data and structure into "experiments".
       - If the pressure column contains "Psat", "Dewpoint", or "Bubblepoint", set "is_saturation_pressure": true.
       - If you see "Continuance", it means the table is continued from last page, put into key "continued": true
       - Put any information outside the table into the JSON schema, e.g. you find "Density of residual oil" put to "average_residual_oil_density" inside "experiments"
       - Never come up with new structures or keys, just fill up in the specified JSON schema.
       - Refer to this keyword and JSON key

       Keyword | Fluid Type
       --------|-----------
       gas deviation factor (column) | gas_z_factor
       gas gravity incremental* | gas_specific_gravity
       gas-oil ratio solution** | gor

       * in "Gas Gravity" column if you find "incremental (Air=1)" and "cumulative (Air=1)", take the "incremental" and put to "gas_specific_gravity" key in JSON
       ** in "Gas-Oil Ratio" column if you find "solution" and "liberated", take the "solution" and put to "gor" key in JSON

        Example JSON:

{
    "page": ...,
    "sample_name": ..., # Put sample ID here,
    "continued": false, # Put true if it mention "continuance"
    "experiments": [
            {
                "saturation_pressure_type": "Bubblepoint", # Or Bubblepoint. If you see Pb then bubblepoint, Pd then dewpoint. If not mentioned, leave null
                "name": "Differential Liberation Expansion",
                "type": "DLE",
                "temperature": 229.7,
                "temperature_unit": "F",
                "dle_experiment_type": "Standard DLE Experiment",

                # // First part, Liberated gas
                "liberated_gas_compositions": {
                    "components": [
                        {
                            "input_name": "N2",
                            "mw": null
                        },
                        {
                            // Other components MW
                        },
                        {
                            "input_name": "C7+",
                            "mw": 114.01
                        }
                    ],
                    # Fill here if the table displays component as row and pressure as column, or otherwise
                    "stages": [
                        {
                            "stage_number": 0,
                            "composition": [
                                {
                                    "stage_number": 0,
                                    "component_name": "C1",
                                    "molar_amount": 0.6859 # Composition in mole percent
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 0,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0085
                                }
                            ]
                        },
                        {
                            // Other stages ...
                        },
                        {
                            "stage_number": 9,
                            "composition": [
                                {
                                    "stage_number": 9,
                                    "component_name": "C1",
                                    "molar_amount": 0.1309
                                },
                                {
                                    // Other components MW
                                },
                                {
                                    "stage_number": 9,
                                    "component_name": "n-C5",
                                    "molar_amount": 0.0629
                                }
                            ]
                        }
                    ]
                },
                # // Second part, Residual oil
                "evolved_gas_specific_gravity": null,
                "evolved_gas_composition_id": null,
                "evolved_gas_composition": null,
                "average_residual_oil_mw": 179.43,
                "average_residual_oil_density": 0.8128,
                "average_residual_oil_density_unit": "g/cm3",
                "residual_oil_composition": {
                    "components": [
                        {
                            "input_name": "Nitrogen",
                            "mw": null,
                            "molar_amount": 0.0,
                            "mass_amount": 0.0
                        },
                        {
                            // Other components ...
                        }
                        {
                            "input_name": "1, 2, 4-Trimethylbenzene",
                            "mw": null,
                            "molar_amount": 0.019,
                            "mass_amount": 0.0127
                        }
                    ]
                },
                "pressure_unit": "psia",
                "gor_unit": "scf/STB",
                "liberated_gas_unit": "scf/STB",
                "oil_fvf_unit": "bbl/STB",
                "oil_density_unit": "g/cm3",
                "gas_density_unit": "g/cm3",
                "gas_viscosity_unit": "cP",
                # // Third part, Properties data
                "stages": [
                    # Fill here if the table displays properties as row and pressure as column, or otherwise
                    {
                        "pressure": 8513.0,
                        "is_saturation_pressure": true,
                        "gor": 2847.67,
                        "liberated_gas": 0.0,
                        "oil_fvf": 2.5407,
                        "oil_density": 0.5714,
                        "gas_z_factor": null,
                        "gas_specific_gravity": null,
                        "gas_density": null,
                        "gas_viscosity": null
                    },
                    {
                        "pressure": 13.0,
                        "is_saturation_pressure": false,
                        "gor": 0.0,
                        "liberated_gas": 2847.67,
                        "oil_fvf": 1.0975,
                        "oil_density": 0.7471,
                        "gas_z_factor": 0.9887,
                        "gas_specific_gravity": 2.1686,
                        "gas_density": null,
                        "gas_viscosity": 0.00925
                    }
                ]
            }
    ]
}

     - 1.4.7 If the page contains a Viscosity experiment (VISCO) table:
       - Identify measurement units for parameters.
       - Viscosity table has pressure as y-axis and viscosities as x-axis
       - Extract viscosity data and structure into "experiments".
       - Never come up with new structures or keys, just fill up in the specified JSON schema.

        Example JSON:

{
    "page": ...,
    "sample_name": ...,
    "experiments": [
        {
            "name": "Oil Viscosity",
            "type": "VISCO",
            "temperature": 229.7,
            "temperature_unit": "F",
            "pressure_unit": "psia",
            "oil_viscosity_unit": "cP",
            "gas_viscosity_unit": "cP",
            "stages": [
                {
                    "visco_id": 1018,
                    "pressure": 5413.0,
                    "oil_viscosity": 0.088,
                    "gas_viscosity": null
                },
                {
                    // Other stages ...
                },
                {
                    "visco_id": 1018,
                    "pressure": 13.0,
                    "oil_viscosity": 0.749,
                    "gas_viscosity": 0.00925
                }
            ]
        }
    ]
}

2. If any summary data or descriptive information is found:
   - Include it as key "Other_information", outside the "experiments" key in JSON.

   Example JSON:
   {
       "solution_gas_oil_ratio": 100,
       "separator_volume_factor": 300,
       "solution_gas_oil_ratio_unit": "scf/stb",
       "separator_volume_factor_unit": "bbl",
       ......
   }

3. Finally, you must stick to the following units

Unit shown | Unit in JSON
--------|-----------
g/cc | g/cm3
mole% | %
Vol/Vol | Sm3/Sm3
scf/sep bbl | scf/bbl
kg/Sm3 | kg/m3
psi | psia
Air=1 | SG

4. If you find Figure in the page, DO NOT extract any data from it. Just extract the title into json.

  {
    "figure_title": "Plot of dewpoint pressure"
  }

5. Dealing with Paraffinic-Naphtenes-Aromatics (PNA) composition

In some cases, PNA can be reported in compositional table, DLE liberated gas, or MSS liberated gas.

For example:

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| n-Hexane          | 0.086   | 0.351     | 86.2  |
| iso-Paraffins     | 0.154   | 0.627     | 86.2  |
| Naphthenes        | 0.033   | 0.109     | 70.1  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |
| n-Heptane         | 0.014   | 0.067     | 100.2 |
| iso-Paraffins     | 0.038   | 0.181     | 100.2 |
| Naphthenes        | 0.116   | 0.476     | 86.6  |
| Aromatics         | 0.030   | 0.112     | 78.1  |

You see for every C6 total and C7 total, there are iso-Paraffins (P), Naphthenes (N), and Aromatics (A).

Remove these PNA, so you just have C6 total and C7 total.

| Component         | Mole % | Weight % | Molecular weight (g/mol) |
|-------------------|--------:|----------:|---------------------------:|
| n-Pentane         | 0.236   | 0.806     | 72.15 |
| Hexanes, C6 total | 0.273   | 1.087     | 84.2  |
| Heptanes, C7 total| 0.199   | 0.837     | 88.9  |

From here, you just extract into corresponding JSON schema as defined in instructions 1 until 4
"
            }
          ]
        },
        {
          "role":"model",
          "parts":[
            {
              "text":"{
    "page": "65 of 119",
    "sample_name": "WFL-01721",
    "uncorrected": true,
    "last_component": "C36+",
    "flashed_gas_mw": 17.67,
    "flashed_gas_specific_gravity": 0.61,
    "flashed_gas_specific_gravity_unit": "SG",
    "flashed_gas_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "molar_amount": 0.231,
                "mass_amount": 0.366
            },
            {
                "input_name": "Carbon Dioxide",
                "molar_amount": 0.212,
                "mass_amount": 0.527
            },
            {
                "input_name": "Hydrogen Sulphide",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "molar_amount": 90.111,
                "mass_amount": 81.799
            },
            {
                "input_name": "Ethane",
                "molar_amount": 8.79,
                "mass_amount": 14.956
            },
            {
                "input_name": "Propane",
                "molar_amount": 0.352,
                "mass_amount": 0.88
            },
            {
                "input_name": "iso-Butane",
                "molar_amount": 0.04,
                "mass_amount": 0.131
            },
            {
                "input_name": "n-Butane",
                "molar_amount": 0.057,
                "mass_amount": 0.186
            },
            {
                "input_name": "Neopentane",
                "molar_amount": 0.022,
                "mass_amount": 0.09
            },
            {
                "input_name": "iso-Pentane",
                "molar_amount": 0.011,
                "mass_amount": 0.043
            },
            {
                "input_name": "n-Pentane",
                "molar_amount": 0.014,
                "mass_amount": 0.059
            },
            {
                "input_name": "Hexanes",
                "molar_amount": 0.042,
                "mass_amount": 0.204
            },
            {
                "input_name": "Heptanes",
                "molar_amount": 0.037,
                "mass_amount": 0.193
            },
            {
                "input_name": "Octanes",
                "molar_amount": 0.033,
                "mass_amount": 0.201
            },
            {
                "input_name": "Nonanes",
                "molar_amount": 0.025,
                "mass_amount": 0.174
            },
            {
                "input_name": "Decanes",
                "molar_amount": 0.019,
                "mass_amount": 0.141
            },
            {
                "input_name": "Undecanes",
                "molar_amount": 0.005,
                "mass_amount": 0.044
            },
            {
                "input_name": "Dodecanes",
                "molar_amount": 0.001,
                "mass_amount": 0.006
            },
            {
                "input_name": "Tridecanes",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Tetradecanes",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Pentadecanes",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Hexadecanes",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Heptadecanes",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Octadecanes",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Nonadecanes",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Eicosanes",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C21",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C22",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C23",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C24",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C25",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C26",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C27",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C28",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C29",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C30",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C31",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C32",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C33",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C34",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C35",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "C36+",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            }
        ]
    },
    "flashed_oil_mw": 328.9,
    "flashed_oil_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Carbon Dioxide",
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Hydrogen Sulphide",
                "molar_amount": null,
                "mass_amount": null
            },
            {
                "input_name": "Methane",
                "molar_amount": 0.062,
                "mass_amount": 0.003
            },
            {
                "input_name": "Ethane",
                "molar_amount": 0.12,
                "mass_amount": 0.011
            },
            {
                "input_name": "Propane",
                "molar_amount": 0.022,
                "mass_amount": 0.003
            },
            {
                "input_name": "iso-Butane",
                "molar_amount": 0.006,
                "mass_amount": 0.001
            },
            {
                "input_name": "n-Butane",
                "molar_amount": 0.017,
                "mass_amount": 0.003
            },
            {
                "input_name": "Neopentane",
                "molar_amount": 0.005,
                "mass_amount": 0.001
            },
            {
                "input_name": "iso-Pentane",
                "molar_amount": 0.009,
                "mass_amount": 0.002
            },
            {
                "input_name": "n-Pentane",
                "molar_amount": 0.014,
                "mass_amount": 0.003
            },
            {
                "input_name": "Hexanes",
                "molar_amount": 0.084,
                "mass_amount": 0.022
            },
            {
                "input_name": "Heptanes",
                "molar_amount": 0.176,
                "mass_amount": 0.05
            },
            {
                "input_name": "Octanes",
                "molar_amount": 0.452,
                "mass_amount": 0.151
            },
            {
                "input_name": "Nonanes",
                "molar_amount": 1.059,
                "mass_amount": 0.4
            },
            {
                "input_name": "Decanes",
                "molar_amount": 2.192,
                "mass_amount": 0.893
            },
            {
                "input_name": "Undecanes",
                "molar_amount": 2.745,
                "mass_amount": 1.227
            },
            {
                "input_name": "Dodecanes",
                "molar_amount": 3.745,
                "mass_amount": 1.833
            },
            {
                "input_name": "Tridecanes",
                "molar_amount": 5.093,
                "mass_amount": 2.71
            },
            {
                "input_name": "Tetradecanes",
                "molar_amount": 6.365,
                "mass_amount": 3.677
            },
            {
                "input_name": "Pentadecanes",
                "molar_amount": 6.251,
                "mass_amount": 3.915
            },
            {
                "input_name": "Hexadecanes",
                "molar_amount": 5.371,
                "mass_amount": 3.625
            },
            {
                "input_name": "Heptadecanes",
                "molar_amount": 4.864,
                "mass_amount": 3.505
            },
            {
                "input_name": "Octadecanes",
                "molar_amount": 4.597,
                "mass_amount": 3.508
            },
            {
                "input_name": "Nonadecanes",
                "molar_amount": 4.302,
                "mass_amount": 3.44
            },
            {
                "input_name": "Eicosanes",
                "molar_amount": 3.957,
                "mass_amount": 3.308
            },
            {
                "input_name": "C21",
                "molar_amount": 3.628,
                "mass_amount": 3.21
            },
            {
                "input_name": "C22",
                "molar_amount": 3.303,
                "mass_amount": 3.013
            },
            {
                "input_name": "C23",
                "molar_amount": 3.031,
                "mass_amount": 2.875
            },
            {
                "input_name": "C24",
                "molar_amount": 2.745,
                "mass_amount": 2.704
            },
            {
                "input_name": "C25",
                "molar_amount": 2.473,
                "mass_amount": 2.534
            },
            {
                "input_name": "C26",
                "molar_amount": 2.325,
                "mass_amount": 2.467
            },
            {
                "input_name": "C27",
                "molar_amount": 2.166,
                "mass_amount": 2.371
            },
            {
                "input_name": "C28",
                "molar_amount": 2.156,
                "mass_amount": 2.438
            },
            {
                "input_name": "C29",
                "molar_amount": 2.075,
                "mass_amount": 2.41
            },
            {
                "input_name": "C30",
                "molar_amount": 1.941,
                "mass_amount": 2.325
            },
            {
                "input_name": "C31",
                "molar_amount": 1.779,
                "mass_amount": 2.185
            },
            {
                "input_name": "C32",
                "molar_amount": 1.58,
                "mass_amount": 1.993
            },
            {
                "input_name": "C33",
                "molar_amount": 1.4,
                "mass_amount": 1.813
            },
            {
                "input_name": "C34",
                "molar_amount": 1.292,
                "mass_amount": 1.716
            },
            {
                "input_name": "C35",
                "molar_amount": 1.215,
                "mass_amount": 1.644
            },
            {
                "input_name": "C36+",
                "molar_amount": 15.384,
                "mass_amount": 32.011
            }
        ]
    },
    "recombined_fluid_mw": 184.9,
    "recombined_fluid_composition": {
        "components": [
            {
                "input_name": "Nitrogen",
                "molar_amount": 0.107,
                "mass_amount": 0.016
            },
            {
                "input_name": "Carbon Dioxide",
                "molar_amount": 0.098,
                "mass_amount": 0.023
            },
            {
                "input_name": "Hydrogen Sulphide",
                "molar_amount": 0.0,
                "mass_amount": 0.0
            },
            {
                "input_name": "Methane",
                "molar_amount": 41.74,
                "mass_amount": 3.622
            },
            {
                "input_name": "Ethane",
                "molar_amount": 4.133,
                "mass_amount": 0.672
            },
            {
                "input_name": "Propane",
                "molar_amount": 0.175,
                "mass_amount": 0.042
            },
            {
                "input_name": "iso-Butane",
                "molar_amount": 0.021,
                "mass_amount": 0.007
            },
            {
                "input_name": "n-Butane",
                "molar_amount": 0.035,
                "mass_amount": 0.011
            },
            {
                "input_name": "Neopentane",
                "molar_amount": 0.013,
                "mass_amount": 0.005
            },
            {
                "input_name": "iso-Pentane",
                "molar_amount": 0.01,
                "mass_amount": 0.004
            },
            {
                "input_name": "n-Pentane",
                "molar_amount": 0.014,
                "mass_amount": 0.005
            },
            {
                "input_name": "Hexanes",
                "molar_amount": 0.065,
                "mass_amount": 0.03
            },
            {
                "input_name": "Heptanes",
                "molar_amount": 0.111,
                "mass_amount": 0.056
            },
            {
                "input_name": "Octanes",
                "molar_amount": 0.258,
                "mass_amount": 0.153
            },
            {
                "input_name": "Nonanes",
                "molar_amount": 0.581,
                "mass_amount": 0.39
            },
            {
                "input_name": "Decanes",
                "molar_amount": 1.186,
                "mass_amount": 0.86
            },
            {
                "input_name": "Undecanes",
                "molar_amount": 1.477,
                "mass_amount": 1.175
            },
            {
                "input_name": "Dodecanes",
                "molar_amount": 2.012,
                "mass_amount": 1.752
            },
            {
                "input_name": "Tridecanes",
                "molar_amount": 2.736,
                "mass_amount": 2.59
            },
            {
                "input_name": "Tetradecanes",
                "molar_amount": 3.419,
                "mass_amount": 3.514
            },
            {
                "input_name": "Pentadecanes",
                "molar_amount": 3.358,
                "mass_amount": 3.742
            },
            {
                "input_name": "Hexadecanes",
                "molar_amount": 2.885,
                "mass_amount": 3.465
            },
            {
                "input_name": "Heptadecanes",
                "molar_amount": 2.613,
                "mass_amount": 3.35
            },
            {
                "input_name": "Octadecanes",
                "molar_amount": 2.469,
                "mass_amount": 3.353
            },
            {
                "input_name": "Nonadecanes",
                "molar_amount": 2.311,
                "mass_amount": 3.288
            },
            {
                "input_name": "Eicosanes",
                "molar_amount": 2.125,
                "mass_amount": 3.162
            },
            {
                "input_name": "C21",
                "molar_amount": 1.949,
                "mass_amount": 3.068
            },
            {
                "input_name": "C22",
                "molar_amount": 1.774,
                "mass_amount": 2.88
            },
            {
                "input_name": "C23",
                "molar_amount": 1.628,
                "mass_amount": 2.748
            },
            {
                "input_name": "C24",
                "molar_amount": 1.474,
                "mass_amount": 2.584
            },
            {
                "input_name": "C25",
                "molar_amount": 1.328,
                "mass_amount": 2.422
            },
            {
                "input_name": "C26",
                "molar_amount": 1.249,
                "mass_amount": 2.358
            },
            {
                "input_name": "C27",
                "molar_amount": 1.164,
                "mass_amount": 2.266
            },
            {
                "input_name": "C28",
                "molar_amount": 1.158,
                "mass_amount": 2.33
            },
            {
                "input_name": "C29",
                "molar_amount": 1.115,
                "mass_amount": 2.303
            },
            {
                "input_name": "C30",
                "molar_amount": 1.043,
                "mass_amount": 2.222
            },
            {
                "input_name": "C31",
                "molar_amount": 0.956,
                "mass_amount": 2.088
            },
            {
                "input_name": "C32",
                "molar_amount": 0.848,
                "mass_amount": 1.905
            },
            {
                "input_name": "C33",
                "molar_amount": 0.752,
                "mass_amount": 1.733
            },
            {
                "input_name": "C34",
                "molar_amount": 0.694,
                "mass_amount": 1.64
            },
            {
                "input_name": "C35",
                "molar_amount": 0.653,
                "mass_amount": 1.571
            },
            {
                "input_name": "C36+",
                "molar_amount": 8.264,
                "mass_amount": 30.595
            }
        ]
    }
}"
            }
          ]
        }
    ]}
